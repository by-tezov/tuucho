package com.tezov.tuucho.core.data.repository.parser.rectifier.content

import com.tezov.tuucho.core.data.repository.di.MaterialRectifierModule
import com.tezov.tuucho.core.data.repository.parser._system.lastSegmentIs
import com.tezov.tuucho.core.data.repository.parser._system.parentIsTypeOf
import com.tezov.tuucho.core.data.repository.parser.rectifier._system.AbstractRectifier
import com.tezov.tuucho.core.data.repository.parser.rectifier._system.MatcherRectifierProtocol
import com.tezov.tuucho.core.domain.business.jsonSchema._system.withScope
import com.tezov.tuucho.core.domain.business.jsonSchema.material.ComponentSchema
import com.tezov.tuucho.core.domain.business.jsonSchema.material.IdSchema
import com.tezov.tuucho.core.domain.business.jsonSchema.material.IdSchema.addGroup
import com.tezov.tuucho.core.domain.business.jsonSchema.material.IdSchema.hasGroup
import com.tezov.tuucho.core.domain.business.jsonSchema.material.IdSchema.requireIsRef
import com.tezov.tuucho.core.domain.business.jsonSchema.material.SubsetSchema
import com.tezov.tuucho.core.domain.business.jsonSchema.material.TypeSchema
import com.tezov.tuucho.core.domain.business.jsonSchema.material.content.ContentSchema
import com.tezov.tuucho.core.domain.tool.json.JsonElementPath
import com.tezov.tuucho.core.domain.tool.json.find
import com.tezov.tuucho.core.domain.tool.json.findOrNull
import com.tezov.tuucho.core.domain.tool.json.string
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonNull
import kotlinx.serialization.json.JsonPrimitive
import org.koin.core.component.inject

class ContentRectifier : AbstractRectifier() {

    override val matchers: List<MatcherRectifierProtocol> by inject(
        MaterialRectifierModule.Name.Matcher.CONTENT
    )

    override val childProcessors: List<AbstractRectifier> by inject(
        MaterialRectifierModule.Name.Processor.CONTENT
    )

    override fun accept(
        path: JsonElementPath, element: JsonElement
    ) = (path.lastSegmentIs(TypeSchema.Value.content) && path.parentIsTypeOf(
        element, TypeSchema.Value.component
    )) || super.accept(path, element)

    override fun beforeAlterPrimitive(
        path: JsonElementPath,
        element: JsonElement,
    ) = element.find(path).withScope(ContentSchema::Scope).apply {
        type = TypeSchema.Value.content
        val value = this.element.string.requireIsRef()
        id = JsonPrimitive(value)
    }.collect()

    override fun beforeAlterObject(
        path: JsonElementPath,
        element: JsonElement
    ) = element.find(path).withScope(ContentSchema::Scope).apply {
        type = TypeSchema.Value.content
        id ?: run { id = JsonNull }
        subset = retrieveSubsetOrMarkUnknown(path, element)
    }.collect()

    override fun afterAlterObject(
        path: JsonElementPath,
        element: JsonElement,
    ): JsonElement? {
        var valueRectified: String?
        var sourceRectified: String?
        return element.find(path)
            .withScope(ContentSchema::Scope)
            .takeIf {
                it.rectifyIds().also { (value, source) ->
                    valueRectified = value
                    sourceRectified = source
                }
                valueRectified != null || sourceRectified != null
            }
            ?.apply {
                id = onScope(IdSchema::Scope).apply {
                    valueRectified?.let { value = it }
                    sourceRectified?.let { source = it }
                }.collect()
            }?.collect()
    }

    private fun ContentSchema.Scope.rectifyIds(): Pair<String?, String?> {
        var valueRectified: String?
        var sourceRectified: String?
        onScope(IdSchema::Scope).apply {
            valueRectified = value
                ?.takeIf { !it.hasGroup() && idAutoGenerated != true }
                ?.addGroup(ContentSchema.Value.Group.common)
            sourceRectified = source
                ?.takeIf { !it.hasGroup() }
                ?.addGroup(ContentSchema.Value.Group.common)
        }
        return valueRectified to sourceRectified
    }

    private fun retrieveSubsetOrMarkUnknown(
        path: JsonElementPath,
        element: JsonElement,
    ) = element.findOrNull(path.parent())
        ?.withScope(ComponentSchema::Scope)?.subset
        ?: SubsetSchema.Value.unknown
}
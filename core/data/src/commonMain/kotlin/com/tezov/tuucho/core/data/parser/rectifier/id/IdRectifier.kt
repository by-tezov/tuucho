package com.tezov.tuucho.core.data.parser.rectifier.id

import com.tezov.tuucho.core.data.di.MaterialRectifierModule.Name
import com.tezov.tuucho.core.data.parser._system.IdGenerator

import com.tezov.tuucho.core.data.parser.rectifier.Rectifier
import com.tezov.tuucho.core.data.parser.rectifier._system.MatcherRectifierProtocol
import com.tezov.tuucho.core.domain.business._system.JsonElementPath
import com.tezov.tuucho.core.domain.business._system.find
import com.tezov.tuucho.core.domain.business._system.stringOrNull

import com.tezov.tuucho.core.domain.business.model.schema._system.SymbolData
import com.tezov.tuucho.core.domain.business.model.schema._system.withScope
import com.tezov.tuucho.core.domain.business.model.schema.material.IdSchema
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonNull
import org.koin.core.component.inject

class IdRectifier(
    private val idGenerator: IdGenerator
) : Rectifier() {

    override val matchers: List<MatcherRectifierProtocol> by inject(
        Name.Matcher.ID
    )

    override fun beforeAlterNull(
        path: JsonElementPath,
        element: JsonElement,
    ) = JsonNull.withScope(IdSchema::Scope).apply {
        val (value, source, idAutoGenerated) = rectifyIds(null, null)
        this.value = value
        source?.let { this.source = it }
        idAutoGenerated?.let { this.idAutoGenerated = it }
    }.collect()

    override fun beforeAlterPrimitive(
        path: JsonElementPath,
        element: JsonElement,
    ) = element.find(path).withScope(IdSchema::Scope).apply {
        val (value, source, idAutoGenerated) = rectifyIds(
            this.element.stringOrNull, null
        )
        this.value = value
        source?.let { this.source = it }
        idAutoGenerated?.let { this.idAutoGenerated = it }
    }.collect()

    override fun beforeAlterObject(
        path: JsonElementPath,
        element: JsonElement,
    ) = element.find(path).withScope(IdSchema::Scope).apply {
        val (value, source, idAutoGenerated) = rectifyIds(
            this.value, this.source
        )
        this.value = value
        source?.let { this.source = it }
        idAutoGenerated?.let { this.idAutoGenerated = it }
    }.collect()

    private fun rectifyIds(id: String?, idFrom: String?): Triple<String, String?, Boolean?> {
        if (id == null || id.startsWith(SymbolData.ID_REF_INDICATOR)) {
            return Triple(
                idGenerator.generate(),
                id?.removePrefix(SymbolData.ID_REF_INDICATOR),
                true
            )
        }
        return Triple(id, idFrom?.removePrefix(SymbolData.ID_REF_INDICATOR), null)
    }
}
package com.tezov.tuucho.core.data.parser.rectifier.texts

import com.tezov.tuucho.core.data.di.MaterialRectifierModule.Name
import com.tezov.tuucho.core.data.parser._system.MatcherProtocol
import com.tezov.tuucho.core.data.parser._system.isTypeOf
import com.tezov.tuucho.core.data.parser.rectifier.Rectifier
import com.tezov.tuucho.core.domain._system.JsonElementPath
import com.tezov.tuucho.core.domain._system.find
import com.tezov.tuucho.core.domain._system.string
import com.tezov.tuucho.core.domain._system.toPath
import com.tezov.tuucho.core.domain.model.schema._system.Schema.Companion.schema
import com.tezov.tuucho.core.domain.model.schema.material.IdSchema
import com.tezov.tuucho.core.domain.model.schema.material.IdSchema.addGroup
import com.tezov.tuucho.core.domain.model.schema.material.IdSchema.hasGroup
import com.tezov.tuucho.core.domain.model.schema.material.TextSchema
import com.tezov.tuucho.core.domain.model.schema.material.TypeSchema
import kotlinx.serialization.json.JsonArray
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonNull
import kotlinx.serialization.json.jsonArray
import org.koin.core.component.inject

class TextRectifier : Rectifier() {

    override val matchers: List<MatcherProtocol> by inject(
        Name.Matcher.TEXT
    )

    override val childProcessors: List<Rectifier> by inject(
        Name.Processor.TEXT
    )

    override fun accept(
        path: JsonElementPath, element: JsonElement,
    ) = (path.lastSegment() == null &&
            element is JsonArray &&
            element.all { it.isTypeOf(TypeSchema.Value.text) }) || super.accept(path, element)

    override fun beforeAlterArray(
        path: JsonElementPath,
        element: JsonElement,
    ) = with(element.find(path).jsonArray) {
        JsonArray(this.map { process("".toPath(), it) })
    }

    override fun beforeAlterObject(
        path: JsonElementPath,
        element: JsonElement,
    ) = element.find(path).schema().withScope(TextSchema::Scope).apply {
        type = TypeSchema.Value.text
        id ?: run { id = JsonNull }
    }.collect()

    override fun beforeAlterPrimitive(
        path: JsonElementPath,
        element: JsonElement,
    ) = element.find(path).schema().withScope(TextSchema::Scope).apply {
        type = TypeSchema.Value.text
        id ?: run { id = JsonNull }
        default = this.element.string
    }.collect()

    override fun afterAlterObject(
        path: JsonElementPath,
        element: JsonElement,
    ): JsonElement? {
        var valueRectified: String?
        var sourceRectified: String?
        return element.find(path).schema()
            .withScope(TextSchema::Scope)
            .takeIf {
                it.rectifyIds().also { (value, source) ->
                    valueRectified = value
                    sourceRectified = source
                }
                valueRectified != null || sourceRectified != null
            }
            ?.apply {
                id = onScope(IdSchema::Scope).apply {
                    valueRectified?.let { value = it }
                    sourceRectified?.let { source = it }
                }.collect()
            }?.collect()
    }

    private fun TextSchema.Scope.rectifyIds(): Pair<String?, String?> {
        var valueRectified: String?
        var sourceRectified: String?
        onScope(IdSchema::Scope).apply {
            valueRectified = value
                ?.takeIf { !it.hasGroup() && idAutoGenerated != true }
                ?.addGroup(TextSchema.Value.Group.common)
            sourceRectified = source
                ?.takeIf { !it.hasGroup() }
                ?.addGroup(TextSchema.Value.Group.common)
        }
        return valueRectified to sourceRectified
    }

}
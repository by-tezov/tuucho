package com.tezov.tuucho.core.data.parser._schema.header

import com.tezov.tuucho.core.domain.model._system.SymbolDomain.ID_PATH_SEPARATOR
import com.tezov.tuucho.core.domain.model._system.SymbolDomain.ID_REF_INDICATOR
import com.tezov.tuucho.core.domain.model._system.booleanOrNull
import com.tezov.tuucho.core.domain.model._system.string
import com.tezov.tuucho.core.domain.model._system.stringOrNull
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonNull
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.jsonObject

interface HeaderIdSchema {

    object Name {
        const val id = "id"

        object Id {
            const val value = "value"
            const val source = "source"
            const val id_auto_generated = "auto_generated"
        }
    }

    companion object {

        val String.idIsRef get() = startsWith(ID_REF_INDICATOR)
        fun String.idAddGroup(value: String): String {
            return if (idIsRef) {
                "$ID_REF_INDICATOR$value$ID_PATH_SEPARATOR${substring(ID_REF_INDICATOR.length)}"
            } else {
                "$value$ID_PATH_SEPARATOR$this"
            }
        }

        fun String.idHasGroup() = count { it == '/' } == 1
        fun String.idGroupOrNull(): String? {
            val parts = removePrefix(ID_REF_INDICATOR)
                .split(ID_PATH_SEPARATOR, limit = 2)
            return if (parts.size == 2) parts[0] else null
        }

        val Map<String, JsonElement>.idExist get() = idRawOrNull != null
        val Map<String, JsonElement>.idIsObject get() = idRawOrNull is JsonObject
        val Map<String, JsonElement>.idIsPrimitive get() = idRawOrNull is JsonPrimitive

        val Map<String, JsonElement>.idRaw get() = this[Name.id]!!
        val Map<String, JsonElement>.idRawOrNull get() = this[Name.id]

        val Map<String, JsonElement>.id get() = idRaw.string
        val Map<String, JsonElement>.idOrNull get() = idRawOrNull.stringOrNull
        val Map<String, JsonElement>.idObject get() = idRaw.jsonObject
        val Map<String, JsonElement>.idObjectOrNull get() = (idRawOrNull as? JsonObject)
        val Map<String, JsonElement>.idValue get() = this[Name.Id.value].string
        val Map<String, JsonElement>.idValueOrNull get() = this[Name.Id.value].stringOrNull
        val Map<String, JsonElement>.idSource get() = this[Name.Id.source].string
        val Map<String, JsonElement>.idSourceOrNull get() = this[Name.Id.source].stringOrNull
        val Map<String, JsonElement>.isIdAutoGenerated get() = this[Name.Id.id_auto_generated].booleanOrNull == true

        fun MutableMap<String, JsonElement>.idPutNullIfMissing() {
            if (!containsKey(Name.id)) {
                put(Name.id, JsonNull)
            }
        }

        fun MutableMap<String, JsonElement>.idPutPrimitive(value: String) {
            put(Name.id, JsonPrimitive(value))
        }

        fun MutableMap<String, JsonElement>.idPutObject(value: Map<String, JsonElement>) {
            put(Name.id, JsonObject(value))
        }

        fun MutableMap<String, JsonElement>.idPutObject(
            value: String?,
            source: String?,
            idAutoGenerated: Boolean? = null
        ) {
            put(Name.id, JsonObject(mutableMapOf<String, JsonElement>().apply {
                idPut(value, source, idAutoGenerated)
            }))
        }

        fun MutableMap<String, JsonElement>.idPutValue(
            value: String?,
            idAutoGenerated: Boolean? = null
        ) {
            if (value != null) {
                put(Name.Id.value, JsonPrimitive(value))
                if(idAutoGenerated == true) {
                    put(Name.Id.id_auto_generated, JsonPrimitive(true))
                }
                else {
                    remove(Name.Id.id_auto_generated)
                }

            } else {
                remove(Name.Id.value)
                remove(Name.Id.id_auto_generated)
            }
        }

        fun MutableMap<String, JsonElement>.idPutSource(source: String?) {
            if (source != null) {
                put(Name.Id.source, JsonPrimitive(source))
            } else {
                remove(Name.Id.source)
            }
        }

        fun MutableMap<String, JsonElement>.idPut(
            value: String?,
            source: String?,
            idAutoGenerated: Boolean? = null
        ) {
            idPutValue(value, idAutoGenerated)
            idPutSource(source)
        }

    }
}




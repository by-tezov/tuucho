package com.tezov.tuucho.core.domain.business.jsonSchema.material

import com.tezov.tuucho.core.domain.business.exception.DomainException
import com.tezov.tuucho.core.domain.business.jsonSchema._system.OpenSchemaScope
import com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument
import com.tezov.tuucho.core.domain.business.jsonSchema._system.SymbolData.ID_GROUP_SEPARATOR
import com.tezov.tuucho.core.domain.business.jsonSchema._system.SymbolData.ID_REF_INDICATOR
import com.tezov.tuucho.core.domain.business.jsonSchema._system.onScope
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonObject

object IdSchema {

    const val root = "id"

    object Key {
        const val value = "value"
        const val source = "source"
        const val id_auto_generated = "auto_generated"
    }

    class Scope(argument: SchemaScopeArgument) : OpenSchemaScope<Scope>(argument) {
        override val root = IdSchema.root
        var self by delegate<JsonElement?>(root)

        var value by delegate<String?>(Key.value)
        var source by delegate<String?>(Key.source)
        var idAutoGenerated by delegate<Boolean?>(Key.id_auto_generated)
    }

    val String.isRef get() = startsWith(ID_REF_INDICATOR)

    fun String.requireIsRef(): String {
        if (!isRef) {
            throw DomainException.Default("should start with *")
        }
        return this
    }

    fun String.hasGroup() = contains(ID_GROUP_SEPARATOR)

    fun String.addGroup(value: String): String {
        return if (isRef) {
            "$ID_REF_INDICATOR$value$ID_GROUP_SEPARATOR${substring(ID_REF_INDICATOR.length)}"
        } else {
            "$value$ID_GROUP_SEPARATOR$this"
        }
    }

    val JsonObject.idValue
        get() = onScope(::Scope).value
            ?: throw DomainException.Default("id value is null for $this")

    val JsonObject.idSourceOrNull
        get() = onScope(::Scope).source
}


package com.tezov.tuucho.core.domain.schema

import com.tezov.tuucho.core.domain._system.booleanOrNull
import com.tezov.tuucho.core.domain._system.string
import com.tezov.tuucho.core.domain._system.stringOrNull
import com.tezov.tuucho.core.domain.schema.SymbolData.ID_GROUP_SEPARATOR
import com.tezov.tuucho.core.domain.schema.SymbolData.ID_REF_INDICATOR
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonNull
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.jsonObject

interface IdSchema {

    object Key {
        const val id = "id"

        object Id {
            const val value = "value"
            const val source = "source"
            const val id_auto_generated = "auto_generated"
        }
    }

    companion object {

        val String.idIsRef get() = startsWith(ID_REF_INDICATOR)

        fun String.idAddGroup(value: String): String {
            return if (idIsRef) {
                "$ID_REF_INDICATOR$value$ID_GROUP_SEPARATOR${substring(ID_REF_INDICATOR.length)}"
            } else {
                "$value$ID_GROUP_SEPARATOR$this"
            }
        }

        fun String.idHasGroup() = contains(ID_GROUP_SEPARATOR)

        val JsonElement.idExist get() = jsonObject.contains(Key.id)

        val JsonElement.idRaw get() = this.jsonObject[Key.id]!!
        val JsonElement.idRawOrNull get() = (this as? JsonObject)?.get(Key.id)

        val JsonElement.id get() = idRaw.string
        val JsonElement.idOrNull get() = idRawOrNull.stringOrNull

        val JsonElement.idObject get() = idRaw.jsonObject
        val JsonElement.idObjectOrNull get() = (idRawOrNull as? JsonObject)

        val JsonElement.idValue get() = this.jsonObject[Key.Id.value].string
        val JsonElement.idValueOrNull get() = (this as? JsonObject)?.get(Key.Id.value).stringOrNull

        val JsonElement.idSource get() = this.jsonObject[Key.Id.source].string
        val JsonElement.idSourceOrNull get() = (this as? JsonObject)?.get(Key.Id.source).stringOrNull

        val JsonElement.isIdAutoGenerated get() = (this as? JsonObject)?.get(Key.Id.id_auto_generated).booleanOrNull == true

        fun MutableMap<String, JsonElement>.idPutNullIfMissing() {
            if (!containsKey(Key.id)) {
                put(Key.id, JsonNull)
            }
        }

        fun MutableMap<String, JsonElement>.idPutPrimitive(value: String?) {
            if(value != null) {
                put(Key.id, JsonPrimitive(value))
            }
            else {
                remove(Key.id)
            }
        }

        fun MutableMap<String, JsonElement>.idPutObject(value: Map<String, JsonElement>) {
            put(Key.id, JsonObject(value))
        }

        fun MutableMap<String, JsonElement>.idPutObject(
            value: String?,
            source: String?,
            idAutoGenerated: Boolean? = null
        ) {
            put(Key.id, JsonObject(mutableMapOf<String, JsonElement>().apply {
                idPut(value, source, idAutoGenerated)
            }))
        }

        fun MutableMap<String, JsonElement>.idPutValue(
            value: String?,
            idAutoGenerated: Boolean? = null
        ) {
            if (value != null) {
                put(Key.Id.value, JsonPrimitive(value))
                if(idAutoGenerated == true) {
                    put(Key.Id.id_auto_generated, JsonPrimitive(true))
                }
                else {
                    remove(Key.Id.id_auto_generated)
                }

            } else {
                remove(Key.Id.value)
                remove(Key.Id.id_auto_generated)
            }
        }

        fun MutableMap<String, JsonElement>.idPutSource(source: String?) {
            if (source != null) {
                put(Key.Id.source, JsonPrimitive(source))
            } else {
                remove(Key.Id.source)
            }
        }

        fun MutableMap<String, JsonElement>.idPut(
            value: String?,
            source: String?,
            idAutoGenerated: Boolean? = null
        ) {
            idPutValue(value, idAutoGenerated)
            idPutSource(source)
        }

    }
}




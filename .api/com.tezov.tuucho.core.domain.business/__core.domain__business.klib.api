// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.tezov:__core.domain__business>
final enum class com.tezov.tuucho.core.domain.business.model/LanguageModelDomain : kotlin/Enum<com.tezov.tuucho.core.domain.business.model/LanguageModelDomain> { // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain|null[0]
    enum entry Default // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.Default|null[0]
    enum entry French // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.French|null[0]

    final val code // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.code|{}code[0]
        final fun <get-code>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.code.<get-code>|<get-code>(){}[0]
    final val entries // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<com.tezov.tuucho.core.domain.business.model/LanguageModelDomain> // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): com.tezov.tuucho.core.domain.business.model/LanguageModelDomain // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<com.tezov.tuucho.core.domain.business.model/LanguageModelDomain> // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.values|values#static(){}[0]

    final object Companion { // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.Companion|null[0]
        final fun from(kotlin/String): com.tezov.tuucho.core.domain.business.model/LanguageModelDomain // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.Companion.from|from(kotlin.String){}[0]
        final fun fromOrNull(kotlin/String): com.tezov.tuucho.core.domain.business.model/LanguageModelDomain? // com.tezov.tuucho.core.domain.business.model/LanguageModelDomain.Companion.fromOrNull|fromOrNull(kotlin.String){}[0]
    }
}

abstract fun interface <#A: kotlin/Any> com.tezov.tuucho.core.domain.business.middleware/MiddlewareProtocol { // com.tezov.tuucho.core.domain.business.middleware/MiddlewareProtocol|null[0]
    abstract suspend fun process(#A, com.tezov.tuucho.core.domain.business.middleware/NextMiddleware<#A>?) // com.tezov.tuucho.core.domain.business.middleware/MiddlewareProtocol.process|process(1:0;com.tezov.tuucho.core.domain.business.middleware.NextMiddleware<1:0>?){}[0]

    final object Companion { // com.tezov.tuucho.core.domain.business.middleware/MiddlewareProtocol.Companion|null[0]
        final suspend fun <#A2: kotlin/Any> (kotlin.collections/List<com.tezov.tuucho.core.domain.business.middleware/MiddlewareProtocol<#A2>>).execute(#A2) // com.tezov.tuucho.core.domain.business.middleware/MiddlewareProtocol.Companion.execute|execute@kotlin.collections.List<com.tezov.tuucho.core.domain.business.middleware.MiddlewareProtocol<0:0>>(0:0){0ยง<kotlin.Any>}[0]
    }
}

abstract fun interface <#A: kotlin/Any?> com.tezov.tuucho.core.domain.business.middleware/NextMiddleware { // com.tezov.tuucho.core.domain.business.middleware/NextMiddleware|null[0]
    abstract suspend fun invoke(#A) // com.tezov.tuucho.core.domain.business.middleware/NextMiddleware.invoke|invoke(1:0){}[0]
}

abstract interface <#A: kotlin/Any> com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol : com.tezov.tuucho.core.domain.business.protocol/ValidatorProtocol<#A> { // com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol|null[0]
    abstract fun getErrorMessage(com.tezov.tuucho.core.domain.business.model/LanguageModelDomain): kotlin/String // com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol.getErrorMessage|getErrorMessage(com.tezov.tuucho.core.domain.business.model.LanguageModelDomain){}[0]
}

abstract interface <#A: kotlin/Any> com.tezov.tuucho.core.domain.business.protocol/ValidatorProtocol { // com.tezov.tuucho.core.domain.business.protocol/ValidatorProtocol|null[0]
    abstract val isValid // com.tezov.tuucho.core.domain.business.protocol/ValidatorProtocol.isValid|{}isValid[0]
        abstract fun <get-isValid>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol/ValidatorProtocol.isValid.<get-isValid>|<get-isValid>(){}[0]

    abstract fun updateValidity(#A) // com.tezov.tuucho.core.domain.business.protocol/ValidatorProtocol.updateValidity|updateValidity(1:0){}[0]
}

abstract interface com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator : com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey.MapOperator { // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator|null[0]
    abstract val hasBeenChanged // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator.hasBeenChanged|{}hasBeenChanged[0]
        abstract fun <get-hasBeenChanged>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator.hasBeenChanged.<get-hasBeenChanged>|<get-hasBeenChanged>(){}[0]

    abstract fun collect(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator.collect|collect(){}[0]
    abstract fun contains(kotlin/String): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator.contains|contains(kotlin.String){}[0]
    abstract fun remove(kotlin/String) // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator.remove|remove(kotlin.String){}[0]
}

abstract interface com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol { // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol|null[0]
    abstract suspend fun tryLock(com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type): kotlin/String? // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.tryLock|tryLock(com.tezov.tuucho.core.domain.business.protocol.repository.InterractionLockRepositoryProtocol.Type){}[0]
    abstract suspend fun unLock(com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type, kotlin/String) // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.unLock|unLock(com.tezov.tuucho.core.domain.business.protocol.repository.InterractionLockRepositoryProtocol.Type;kotlin.String){}[0]

    final enum class Type : kotlin/Enum<com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type> { // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type|null[0]
        enum entry Navigation // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type.Navigation|null[0]

        final val entries // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type> // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type> // com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type.values|values#static(){}[0]
    }
}

abstract interface com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol { // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol|null[0]
    abstract suspend fun get(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.get|get(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]
    abstract suspend fun getOrNull(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value? // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.getOrNull|getOrNull(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]
    abstract suspend fun hasKey(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.hasKey|hasKey(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]
    abstract suspend fun save(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key, com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value?) // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.save|save(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key;com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Value?){}[0]

    abstract interface Key { // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key|null[0]
        abstract val value // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key.value|{}value[0]
            abstract fun <get-value>(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key.value.<get-value>|<get-value>(){}[0]

        final object Companion { // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key.Companion|null[0]
            final fun (kotlin/String).toKey(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key.Companion.toKey|toKey@kotlin.String(){}[0]
        }
    }

    abstract interface Value { // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value|null[0]
        abstract val value // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value.value|{}value[0]
            abstract fun <get-value>(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value.value.<get-value>|<get-value>(){}[0]

        final object Companion { // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value.Companion|null[0]
            final fun (kotlin/String).toValue(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value // com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value.Companion.toValue|toValue@kotlin.String(){}[0]
        }
    }
}

abstract interface com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol : com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol { // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol|null[0]
    abstract val validators // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol.validators|{}validators[0]
        abstract fun <get-validators>(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol<kotlin/String>>? // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol.validators.<get-validators>|<get-validators>(){}[0]

    abstract interface Extension : com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.Extension<com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol> { // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol.Extension|null[0]
        abstract val formView // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol.Extension.formView|{}formView[0]
            abstract fun <get-formView>(): com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FieldFormViewProtocol.Extension.formView.<get-formView>|<get-formView>(){}[0]
    }
}

abstract interface com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol { // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol|null[0]
    abstract fun attach(com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol) // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.attach|attach(com.tezov.tuucho.core.domain.business.protocol.screen.view.ViewProtocol){}[0]
    abstract fun getId(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.getId|getId(){}[0]
    abstract fun getValue(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.getValue|getValue(){}[0]
    abstract fun isValid(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.isValid|isValid(){}[0]
    abstract fun updateValidity() // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.updateValidity|updateValidity(){}[0]

    abstract interface <#A1: com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol> Extension : com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol { // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.Extension|null[0]
        abstract val formView // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.Extension.formView|{}formView[0]
            abstract fun <get-formView>(): #A1 // com.tezov.tuucho.core.domain.business.protocol.screen.view.form/FormViewProtocol.Extension.formView.<get-formView>|<get-formView>(){}[0]
    }
}

abstract interface com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol { // com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol|null[0]
    abstract val componentObject // com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol.componentObject|{}componentObject[0]
        abstract fun <get-componentObject>(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol.componentObject.<get-componentObject>|<get-componentObject>(){}[0]

    abstract suspend fun update(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol.update|update(kotlinx.serialization.json.JsonObject){}[0]
}

abstract interface com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol { // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol|null[0]
    abstract val route // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol.route|{}route[0]
        abstract fun <get-route>(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol.route.<get-route>|<get-route>(){}[0]
    abstract val view // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol.view|{}view[0]
        abstract fun <get-view>(): com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol.view.<get-view>|<get-view>(){}[0]

    abstract fun <#A1: com.tezov.tuucho.core.domain.business.protocol.screen.view/ViewProtocol> views(kotlin.reflect/KClass<#A1>): kotlin.collections/List<#A1> // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol.views|views(kotlin.reflect.KClass<0:0>){0ยง<com.tezov.tuucho.core.domain.business.protocol.screen.view.ViewProtocol>}[0]
    abstract suspend fun update(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol.update|update(kotlinx.serialization.json.JsonObject){}[0]
}

abstract interface com.tezov.tuucho.core.domain.business.protocol.screen/ScreenRendererProtocol { // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenRendererProtocol|null[0]
    abstract suspend fun process(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, kotlinx.serialization.json/JsonObject): com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol // com.tezov.tuucho.core.domain.business.protocol.screen/ScreenRendererProtocol.process|process(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;kotlinx.serialization.json.JsonObject){}[0]
}

abstract interface com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol { // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol|null[0]
    abstract val priority // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.priority|{}priority[0]
        abstract fun <get-priority>(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.priority.<get-priority>|<get-priority>(){}[0]

    abstract fun accept(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.accept|accept(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
    abstract suspend fun process(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.process|process(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]

    final object Priority { // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.Priority|null[0]
        final val DEFAULT // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.Priority.DEFAULT|{}DEFAULT[0]
            final fun <get-DEFAULT>(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.Priority.DEFAULT.<get-DEFAULT>|<get-DEFAULT>(){}[0]
        final val HIGH // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.Priority.HIGH|{}HIGH[0]
            final fun <get-HIGH>(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.Priority.HIGH.<get-HIGH>|<get-HIGH>(){}[0]
        final val LOW // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.Priority.LOW|{}LOW[0]
            final fun <get-LOW>(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol.Priority.LOW.<get-LOW>|<get-LOW>(){}[0]
    }
}

abstract interface com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol { // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol|null[0]
    abstract val database // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.database|{}database[0]
        abstract fun <get-database>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.database.<get-database>|<get-database>(){}[0]
    abstract val datastore // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.datastore|{}datastore[0]
        abstract fun <get-datastore>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.datastore.<get-datastore>|<get-datastore>(){}[0]
    abstract val default // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.default|{}default[0]
        abstract fun <get-default>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.default.<get-default>|<get-default>(){}[0]
    abstract val event // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.event|{}event[0]
        abstract fun <get-event>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.event.<get-event>|<get-event>(){}[0]
    abstract val io // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.io|{}io[0]
        abstract fun <get-io>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.io.<get-io>|<get-io>(){}[0]
    abstract val main // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.main|{}main[0]
        abstract fun <get-main>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.main.<get-main>|<get-main>(){}[0]
    abstract val navigation // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.navigation|{}navigation[0]
        abstract fun <get-navigation>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.navigation.<get-navigation>|<get-navigation>(){}[0]
    abstract val network // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.network|{}network[0]
        abstract fun <get-network>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.network.<get-network>|<get-network>(){}[0]
    abstract val parser // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.parser|{}parser[0]
        abstract fun <get-parser>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.parser.<get-parser>|<get-parser>(){}[0]
    abstract val renderer // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.renderer|{}renderer[0]
        abstract fun <get-renderer>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.renderer.<get-renderer>|<get-renderer>(){}[0]
    abstract val useCase // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.useCase|{}useCase[0]
        abstract fun <get-useCase>(): com.tezov.tuucho.core.domain.tool.async/CoroutineContextProtocol // com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol.useCase.<get-useCase>|<get-useCase>(){}[0]
}

abstract interface com.tezov.tuucho.core.domain.business.protocol/IdGeneratorProtocol { // com.tezov.tuucho.core.domain.business.protocol/IdGeneratorProtocol|null[0]
    abstract fun generate(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol/IdGeneratorProtocol.generate|generate(){}[0]
}

abstract interface com.tezov.tuucho.core.domain.business.protocol/NavigationDefinitionSelectorMatcherProtocol // com.tezov.tuucho.core.domain.business.protocol/NavigationDefinitionSelectorMatcherProtocol|null[0]

abstract interface com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol { // com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol|null[0]
    abstract fun isForeground(kotlinx.serialization.json/JsonObject): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol.isForeground|isForeground(kotlinx.serialization.json.JsonObject){}[0]
}

abstract interface com.tezov.tuucho.core.domain.business.protocol/ServerHealthCheckProtocol { // com.tezov.tuucho.core.domain.business.protocol/ServerHealthCheckProtocol|null[0]
    abstract suspend fun process(kotlin/String): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.protocol/ServerHealthCheckProtocol.process|process(kotlin.String){}[0]
}

sealed interface <#A: kotlin/Any, #B: kotlin/Any> com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol { // com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol|null[0]
    abstract interface <#A1: kotlin/Any, #B1: kotlin/Any> Async : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol<#A1, #B1> { // com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async|null[0]
        abstract suspend fun invoke(#A1): #B1 // com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async.invoke|invoke(1:0){}[0]
    }

    abstract interface <#A1: kotlin/Any, #B1: kotlin/Any> Sync : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol<#A1, #B1> { // com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync|null[0]
        abstract fun invoke(#A1): #B1 // com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync.invoke|invoke(1:0){}[0]
    }
}

abstract class <#A: kotlin/Any> com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator : com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol<#A> { // com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject){}[0]

    open var isValid // com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator.isValid|{}isValid[0]
        open fun <get-isValid>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator.isValid.<get-isValid>|<get-isValid>(){}[0]
        open fun <set-isValid>(kotlin/Boolean) // com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator.isValid.<set-isValid>|<set-isValid>(kotlin.Boolean){}[0]

    open fun getErrorMessage(com.tezov.tuucho.core.domain.business.model/LanguageModelDomain): kotlin/String // com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator.getErrorMessage|getErrorMessage(com.tezov.tuucho.core.domain.business.model.LanguageModelDomain){}[0]
}

final class <#A: kotlin/Any?> com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey { // com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey.MapOperator, kotlin.reflect/KClass<*>, kotlin/String? = ...) // com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.DelegateSchemaKey.MapOperator;kotlin.reflect.KClass<*>;kotlin.String?){}[0]

    final fun getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #A? // com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey.getValue|getValue(kotlin.Any?;kotlin.reflect.KProperty<*>){}[0]
    final fun setValue(kotlin/Any?, kotlin.reflect/KProperty<*>, #A?) // com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey.setValue|setValue(kotlin.Any?;kotlin.reflect.KProperty<*>;1:0?){}[0]

    abstract interface MapOperator { // com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey.MapOperator|null[0]
        abstract fun read(kotlin/String): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey.MapOperator.read|read(kotlin.String){}[0]
        abstract fun write(kotlin/String, kotlinx.serialization.json/JsonElement) // com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey.MapOperator.write|write(kotlin.String;kotlinx.serialization.json.JsonElement){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.interaction.action/FormSendUrlActionProcessor : com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol, org.koin.core.component/KoinComponent { // com.tezov.tuucho.core.domain.business.interaction.action/FormSendUrlActionProcessor|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase, com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase) // com.tezov.tuucho.core.domain.business.interaction.action/FormSendUrlActionProcessor.<init>|<init>(com.tezov.tuucho.core.domain.business.usecase._system.UseCaseExecutor;com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.GetScreenOrNullUseCase;com.tezov.tuucho.core.domain.business.usecase.withNetwork.SendDataUseCase){}[0]

    final val priority // com.tezov.tuucho.core.domain.business.interaction.action/FormSendUrlActionProcessor.priority|{}priority[0]
        final fun <get-priority>(): kotlin/Int // com.tezov.tuucho.core.domain.business.interaction.action/FormSendUrlActionProcessor.priority.<get-priority>|<get-priority>(){}[0]

    final fun accept(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.action/FormSendUrlActionProcessor.accept|accept(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
    final suspend fun process(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.interaction.action/FormSendUrlActionProcessor.process|process(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.action/FormUpdateActionProcessor : com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol, org.koin.core.component/KoinComponent { // com.tezov.tuucho.core.domain.business.interaction.action/FormUpdateActionProcessor|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase) // com.tezov.tuucho.core.domain.business.interaction.action/FormUpdateActionProcessor.<init>|<init>(com.tezov.tuucho.core.domain.business.usecase._system.UseCaseExecutor;com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.UpdateViewUseCase){}[0]

    final val priority // com.tezov.tuucho.core.domain.business.interaction.action/FormUpdateActionProcessor.priority|{}priority[0]
        final fun <get-priority>(): kotlin/Int // com.tezov.tuucho.core.domain.business.interaction.action/FormUpdateActionProcessor.priority.<get-priority>|<get-priority>(){}[0]

    final fun accept(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.action/FormUpdateActionProcessor.accept|accept(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
    final suspend fun process(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.interaction.action/FormUpdateActionProcessor.process|process(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.action/NavigationLocalDestinationActionProcessor : com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol { // com.tezov.tuucho.core.domain.business.interaction.action/NavigationLocalDestinationActionProcessor|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor, com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateBackUseCase) // com.tezov.tuucho.core.domain.business.interaction.action/NavigationLocalDestinationActionProcessor.<init>|<init>(com.tezov.tuucho.core.domain.business.usecase._system.UseCaseExecutor;com.tezov.tuucho.core.domain.business.usecase.withNetwork.NavigateBackUseCase){}[0]

    final val priority // com.tezov.tuucho.core.domain.business.interaction.action/NavigationLocalDestinationActionProcessor.priority|{}priority[0]
        final fun <get-priority>(): kotlin/Int // com.tezov.tuucho.core.domain.business.interaction.action/NavigationLocalDestinationActionProcessor.priority.<get-priority>|<get-priority>(){}[0]

    final fun accept(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.action/NavigationLocalDestinationActionProcessor.accept|accept(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
    final suspend fun process(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.interaction.action/NavigationLocalDestinationActionProcessor.process|process(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.action/NavigationUrlActionProcessor : com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol { // com.tezov.tuucho.core.domain.business.interaction.action/NavigationUrlActionProcessor|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor, com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase) // com.tezov.tuucho.core.domain.business.interaction.action/NavigationUrlActionProcessor.<init>|<init>(com.tezov.tuucho.core.domain.business.usecase._system.UseCaseExecutor;com.tezov.tuucho.core.domain.business.usecase.withNetwork.NavigateToUrlUseCase){}[0]

    final val priority // com.tezov.tuucho.core.domain.business.interaction.action/NavigationUrlActionProcessor.priority|{}priority[0]
        final fun <get-priority>(): kotlin/Int // com.tezov.tuucho.core.domain.business.interaction.action/NavigationUrlActionProcessor.priority.<get-priority>|<get-priority>(){}[0]

    final fun accept(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.action/NavigationUrlActionProcessor.accept|accept(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
    final suspend fun process(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.interaction.action/NavigationUrlActionProcessor.process|process(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.action/StoreActionProcessor : com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol { // com.tezov.tuucho.core.domain.business.interaction.action/StoreActionProcessor|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase) // com.tezov.tuucho.core.domain.business.interaction.action/StoreActionProcessor.<init>|<init>(com.tezov.tuucho.core.domain.business.usecase._system.UseCaseExecutor;com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.SaveKeyValueToStoreUseCase;com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.RemoveKeyValueFromStoreUseCase){}[0]

    final val priority // com.tezov.tuucho.core.domain.business.interaction.action/StoreActionProcessor.priority|{}priority[0]
        final fun <get-priority>(): kotlin/Int // com.tezov.tuucho.core.domain.business.interaction.action/StoreActionProcessor.priority.<get-priority>|<get-priority>(){}[0]

    final fun accept(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.action/StoreActionProcessor.accept|accept(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
    final suspend fun process(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.interaction.action/StoreActionProcessor.process|process(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.lock/ActionLockIdGenerator : com.tezov.tuucho.core.domain.business.protocol/IdGeneratorProtocol { // com.tezov.tuucho.core.domain.business.interaction.lock/ActionLockIdGenerator|null[0]
    constructor <init>() // com.tezov.tuucho.core.domain.business.interaction.lock/ActionLockIdGenerator.<init>|<init>(){}[0]

    final fun generate(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.lock/ActionLockIdGenerator.generate|generate(){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.lock/InterractionLockRepository : com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol { // com.tezov.tuucho.core.domain.business.interaction.lock/InterractionLockRepository|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/IdGeneratorProtocol) // com.tezov.tuucho.core.domain.business.interaction.lock/InterractionLockRepository.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.IdGeneratorProtocol){}[0]

    final suspend fun tryLock(com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type): kotlin/String? // com.tezov.tuucho.core.domain.business.interaction.lock/InterractionLockRepository.tryLock|tryLock(com.tezov.tuucho.core.domain.business.protocol.repository.InterractionLockRepositoryProtocol.Type){}[0]
    final suspend fun unLock(com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol.Type, kotlin/String) // com.tezov.tuucho.core.domain.business.interaction.lock/InterractionLockRepository.unLock|unLock(com.tezov.tuucho.core.domain.business.protocol.repository.InterractionLockRepositoryProtocol.Type;kotlin.String){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.navigation.selector/PageBreadCrumbNavigationDefinitionSelectorMatcher : com.tezov.tuucho.core.domain.business.protocol/NavigationDefinitionSelectorMatcherProtocol { // com.tezov.tuucho.core.domain.business.interaction.navigation.selector/PageBreadCrumbNavigationDefinitionSelectorMatcher|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>) // com.tezov.tuucho.core.domain.business.interaction.navigation.selector/PageBreadCrumbNavigationDefinitionSelectorMatcher.<init>|<init>(kotlin.collections.List<kotlin.String>){}[0]

    final fun accept(kotlin.collections/List<kotlin/String>): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation.selector/PageBreadCrumbNavigationDefinitionSelectorMatcher.accept|accept(kotlin.collections.List<kotlin.String>){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.navigation.transition/DefaultNavigationTransitionStackHelper : com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol { // com.tezov.tuucho.core.domain.business.interaction.navigation.transition/DefaultNavigationTransitionStackHelper|null[0]
    constructor <init>() // com.tezov.tuucho.core.domain.business.interaction.navigation.transition/DefaultNavigationTransitionStackHelper.<init>|<init>(){}[0]

    final fun isForeground(kotlinx.serialization.json/JsonObject): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation.transition/DefaultNavigationTransitionStackHelper.isForeground|isForeground(kotlinx.serialization.json.JsonObject){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.navigation.transition/FadeNavigationTransitionStackHelper : com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol { // com.tezov.tuucho.core.domain.business.interaction.navigation.transition/FadeNavigationTransitionStackHelper|null[0]
    constructor <init>() // com.tezov.tuucho.core.domain.business.interaction.navigation.transition/FadeNavigationTransitionStackHelper.<init>|<init>(){}[0]

    final fun isForeground(kotlinx.serialization.json/JsonObject): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation.transition/FadeNavigationTransitionStackHelper.isForeground|isForeground(kotlinx.serialization.json.JsonObject){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption|null[0]
    constructor <init>(kotlin/Boolean, kotlin/String?, com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo?, kotlin/Boolean) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.<init>|<init>(kotlin.Boolean;kotlin.String?;com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationOption.PopUpTo?;kotlin.Boolean){}[0]

    final val clearStack // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.clearStack|{}clearStack[0]
        final fun <get-clearStack>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.clearStack.<get-clearStack>|<get-clearStack>(){}[0]
    final val popUpTo // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.popUpTo|{}popUpTo[0]
        final fun <get-popUpTo>(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.popUpTo.<get-popUpTo>|<get-popUpTo>(){}[0]
    final val reuse // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.reuse|{}reuse[0]
        final fun <get-reuse>(): kotlin/String? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.reuse.<get-reuse>|<get-reuse>(){}[0]
    final val single // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.single|{}single[0]
        final fun <get-single>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.single.<get-single>|<get-single>(){}[0]

    final fun component1(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.component2|component2(){}[0]
    final fun component3(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.component4|component4(){}[0]
    final fun copy(kotlin/Boolean = ..., kotlin/String? = ..., com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo? = ..., kotlin/Boolean = ...): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.copy|copy(kotlin.Boolean;kotlin.String?;com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationOption.PopUpTo?;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.toString|toString(){}[0]

    final class PopUpTo { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute, kotlin/Boolean, kotlin/Boolean) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.<init>|<init>(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute;kotlin.Boolean;kotlin.Boolean){}[0]

        final val greedy // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.greedy|{}greedy[0]
            final fun <get-greedy>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.greedy.<get-greedy>|<get-greedy>(){}[0]
        final val inclusive // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.inclusive|{}inclusive[0]
            final fun <get-inclusive>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.inclusive.<get-inclusive>|<get-inclusive>(){}[0]
        final val route // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.route|{}route[0]
            final fun <get-route>(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.route.<get-route>|<get-route>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.component1|component1(){}[0]
        final fun component2(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.component3|component3(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.copy|copy(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.PopUpTo.toString|toString(){}[0]
    }

    final object Companion { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.Companion|null[0]
        final fun from(kotlinx.serialization.json/JsonObject): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationOption.Companion.from|from(kotlinx.serialization.json.JsonObject){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRouteIdGenerator : com.tezov.tuucho.core.domain.business.protocol/IdGeneratorProtocol { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRouteIdGenerator|null[0]
    constructor <init>() // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRouteIdGenerator.<init>|<init>(){}[0]

    final fun generate(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRouteIdGenerator.generate|generate(){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackRouteRepository : com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackRouteRepository|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackRouteRepository.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol){}[0]

    final suspend fun backward(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackRouteRepository.backward|backward(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute){}[0]
    final suspend fun currentRoute(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackRouteRepository.currentRoute|currentRoute(){}[0]
    final suspend fun forward(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, kotlinx.serialization.json/JsonObject?): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackRouteRepository.forward|forward(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;kotlinx.serialization.json.JsonObject?){}[0]
    final suspend fun priorRoute(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackRouteRepository.priorRoute|priorRoute(){}[0]
    final suspend fun routes(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackRouteRepository.routes|routes(){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository : com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen, org.koin.core.component/KoinComponent { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.screen/ScreenRendererProtocol) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.screen.ScreenRendererProtocol){}[0]

    final suspend fun backward(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository.backward|backward(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]
    final suspend fun forward(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository.forward|forward(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;kotlinx.serialization.json.JsonObject){}[0]
    final suspend fun getScreenOrNull(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url): com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol? // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository.getScreenOrNull|getScreenOrNull(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url){}[0]
    final suspend fun getScreens(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>): kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol> // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository.getScreens|getScreens(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]
    final suspend fun getScreensOrNull(kotlin/String): kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol> // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository.getScreensOrNull|getScreensOrNull(kotlin.String){}[0]
    final suspend fun routes(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackScreenRepository.routes|routes(){}[0]
}

final class com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository : com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition, org.koin.core.component/KoinComponent { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.usecase._system.UseCaseExecutor;com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.NavigationStackTransitionHelperFactoryUseCase){}[0]

    final val events // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository.events|{}events[0]
        final fun <get-events>(): com.tezov.tuucho.core.domain.tool.async/Notifier.Collector<com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event> // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository.events.<get-events>|<get-events>(){}[0]

    final suspend fun backward(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository.backward|backward(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]
    final suspend fun forward(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>, kotlinx.serialization.json/JsonObject?, kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository.forward|forward(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>;kotlinx.serialization.json.JsonObject?;kotlinx.serialization.json.JsonObject?){}[0]
    final suspend fun notifyTransitionCompleted() // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository.notifyTransitionCompleted|notifyTransitionCompleted(){}[0]
    final suspend fun routes(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationStackTransitionRepository.routes|routes(){}[0]
}

final class com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScope> { // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScope|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
}

final class com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument { // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument|null[0]
    constructor <init>(kotlinx.serialization.json/JsonElement, kotlin/Boolean, com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator?) // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.<init>|<init>(kotlinx.serialization.json.JsonElement;kotlin.Boolean;com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeMapOperator?){}[0]

    final val element // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.element|{}element[0]
        final fun <get-element>(): kotlinx.serialization.json/JsonElement // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.element.<get-element>|<get-element>(){}[0]
    final val mapOperator // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.mapOperator|{}mapOperator[0]
        final fun <get-mapOperator>(): com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator? // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.mapOperator.<get-mapOperator>|<get-mapOperator>(){}[0]
    final val moveOnRoot // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.moveOnRoot|{}moveOnRoot[0]
        final fun <get-moveOnRoot>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.moveOnRoot.<get-moveOnRoot>|<get-moveOnRoot>(){}[0]

    final fun component1(): kotlinx.serialization.json/JsonElement // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.component2|component2(){}[0]
    final fun component3(): com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator? // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.component3|component3(){}[0]
    final fun copy(kotlinx.serialization.json/JsonElement = ..., kotlin/Boolean = ..., com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator? = ...): com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.copy|copy(kotlinx.serialization.json.JsonElement;kotlin.Boolean;com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeMapOperator?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument.toString|toString(){}[0]
}

final class com.tezov.tuucho.core.domain.business.model/ActionModelDomain { // com.tezov.tuucho.core.domain.business.model/ActionModelDomain|null[0]
    constructor <init>(kotlin/String, kotlin/String?, kotlin/String?, kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.<init>|<init>(kotlin.String;kotlin.String?;kotlin.String?;kotlinx.serialization.json.JsonElement?){}[0]

    final val authority // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.authority|{}authority[0]
        final fun <get-authority>(): kotlin/String? // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.authority.<get-authority>|<get-authority>(){}[0]
    final val command // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.command|{}command[0]
        final fun <get-command>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.command.<get-command>|<get-command>(){}[0]
    final val query // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.query|{}query[0]
        final fun <get-query>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.query.<get-query>|<get-query>(){}[0]
    final val target // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.target|{}target[0]
        final fun <get-target>(): kotlin/String? // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.target.<get-target>|<get-target>(){}[0]

    final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.component3|component3(){}[0]
    final fun component4(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ..., kotlinx.serialization.json/JsonElement? = ...): com.tezov.tuucho.core.domain.business.model/ActionModelDomain // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.copy|copy(kotlin.String;kotlin.String?;kotlin.String?;kotlinx.serialization.json.JsonElement?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.toString|toString(){}[0]

    final object Companion { // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.Companion|null[0]
        final fun from(kotlin/String): com.tezov.tuucho.core.domain.business.model/ActionModelDomain // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.Companion.from|from(kotlin.String){}[0]
        final fun from(kotlin/String, kotlin/String?, kotlin/String?, kotlin/String? = ...): com.tezov.tuucho.core.domain.business.model/ActionModelDomain // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.Companion.from|from(kotlin.String;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
        final fun from(kotlin/String, kotlin/String?, kotlin/String?, kotlinx.serialization.json/JsonElement?): com.tezov.tuucho.core.domain.business.model/ActionModelDomain // com.tezov.tuucho.core.domain.business.model/ActionModelDomain.Companion.from|from(kotlin.String;kotlin.String?;kotlin.String?;kotlinx.serialization.json.JsonElement?){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor { // com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol) // com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol){}[0]

    final fun <#A1: kotlin/Any, #B1: kotlin/Any> invoke(com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol<#A1, #B1>, #A1, kotlin/Function1<com.tezov.tuucho.core.domain.business.exception/DomainException, kotlin/Unit>? = ..., kotlin/Function1<#B1, kotlin/Unit> = ...) // com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor.invoke|invoke(com.tezov.tuucho.core.domain.business.protocol.UseCaseProtocol<0:0,0:1>;0:0;kotlin.Function1<com.tezov.tuucho.core.domain.business.exception.DomainException,kotlin.Unit>?;kotlin.Function1<0:1,kotlin.Unit>){0ยง<kotlin.Any>;1ยง<kotlin.Any>}[0]
    final suspend fun <#A1: kotlin/Any, #B1: kotlin/Any> invokeSuspend(com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol<#A1, #B1>, #A1): #B1 // com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor.invokeSuspend|invokeSuspend(com.tezov.tuucho.core.domain.business.protocol.UseCaseProtocol<0:0,0:1>;0:0){0ยง<kotlin.Any>;1ยง<kotlin.Any>}[0]
}

final class com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateBackUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync<kotlin/Unit, kotlin/Unit>, org.koin.core.component/KoinComponent { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateBackUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition, com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower, com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol, kotlin.collections/List<com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back>) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateBackUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackRoute;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackScreen;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition;com.tezov.tuucho.core.domain.business.protocol.repository.MaterialRepositoryProtocol.Shadower;com.tezov.tuucho.core.domain.business.protocol.repository.InterractionLockRepositoryProtocol;kotlin.collections.List<com.tezov.tuucho.core.domain.business.middleware.NavigationMiddleware.Back>){}[0]

    final fun invoke(kotlin/Unit) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateBackUseCase.invoke|invoke(kotlin.Unit){}[0]
}

final class com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync<com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input, kotlin/Unit>, org.koin.core.component/KoinComponent { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.usecase._system/UseCaseExecutor, com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Retrieve, com.tezov.tuucho.core.domain.business.protocol/IdGeneratorProtocol, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition, com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower, com.tezov.tuucho.core.domain.business.protocol.repository/InterractionLockRepositoryProtocol, kotlin.collections/List<com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl>) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.usecase._system.UseCaseExecutor;com.tezov.tuucho.core.domain.business.protocol.repository.MaterialRepositoryProtocol.Retrieve;com.tezov.tuucho.core.domain.business.protocol.IdGeneratorProtocol;com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.NavigationDefinitionSelectorMatcherFactoryUseCase;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackRoute;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackScreen;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition;com.tezov.tuucho.core.domain.business.protocol.repository.MaterialRepositoryProtocol.Shadower;com.tezov.tuucho.core.domain.business.protocol.repository.InterractionLockRepositoryProtocol;kotlin.collections.List<com.tezov.tuucho.core.domain.business.middleware.NavigationMiddleware.ToUrl>){}[0]

    final fun invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork.NavigateToUrlUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input|null[0]
        constructor <init>(kotlin/String) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input.<init>|<init>(kotlin.String){}[0]

        final val url // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input.url|{}url[0]
            final fun <get-url>(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input, kotlin/Unit> { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol/ActionProcessorProtocol>) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;kotlin.collections.List<com.tezov.tuucho.core.domain.business.protocol.ActionProcessorProtocol>){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork.ProcessActionUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, com.tezov.tuucho.core.domain.business.model/ActionModelDomain, kotlinx.serialization.json/JsonElement? = ...) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.<init>|<init>(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]

        final val action // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.action|{}action[0]
            final fun <get-action>(): com.tezov.tuucho.core.domain.business.model/ActionModelDomain // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.action.<get-action>|<get-action>(){}[0]
        final val jsonElement // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.jsonElement|{}jsonElement[0]
            final fun <get-jsonElement>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.jsonElement.<get-jsonElement>|<get-jsonElement>(){}[0]
        final val route // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.route|{}route[0]
            final fun <get-route>(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.route.<get-route>|<get-route>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.component1|component1(){}[0]
        final fun component2(): com.tezov.tuucho.core.domain.business.model/ActionModelDomain // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.component2|component2(){}[0]
        final fun component3(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.component3|component3(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url = ..., com.tezov.tuucho.core.domain.business.model/ActionModelDomain = ..., kotlinx.serialization.json/JsonElement? = ...): com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.copy|copy(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;com.tezov.tuucho.core.domain.business.model.ActionModelDomain;kotlinx.serialization.json.JsonElement?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ProcessActionUseCase.Input.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input, kotlin/Unit> { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.RefreshCache) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.MaterialRepositoryProtocol.RefreshCache){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork.RefreshMaterialCacheUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input|null[0]
        constructor <init>(kotlin/String) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input.<init>|<init>(kotlin.String){}[0]

        final val url // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input.url|{}url[0]
            final fun <get-url>(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/RefreshMaterialCacheUseCase.Input.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.SendDataAndRetrieve) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.MaterialRepositoryProtocol.SendDataAndRetrieve){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork.SendDataUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input|null[0]
        constructor <init>(kotlin/String, kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.<init>|<init>(kotlin.String;kotlinx.serialization.json.JsonObject){}[0]

        final val jsonObject // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.jsonObject|{}jsonObject[0]
            final fun <get-jsonObject>(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.jsonObject.<get-jsonObject>|<get-jsonObject>(){}[0]
        final val url // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.url|{}url[0]
            final fun <get-url>(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.component1|component1(){}[0]
        final fun component2(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlinx.serialization.json/JsonObject = ...): com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.copy|copy(kotlin.String;kotlinx.serialization.json.JsonObject){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output|null[0]
        constructor <init>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output.<init>|<init>(kotlinx.serialization.json.JsonObject?){}[0]

        final val jsonObject // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output.jsonObject|{}jsonObject[0]
            final fun <get-jsonObject>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output.jsonObject.<get-jsonObject>|<get-jsonObject>(){}[0]

        final fun component1(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output.component1|component1(){}[0]
        final fun copy(kotlinx.serialization.json/JsonObject? = ...): com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output.copy|copy(kotlinx.serialization.json.JsonObject?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/SendDataUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output>, org.koin.core.component/KoinComponent { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol/ServerHealthCheckProtocol) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.ServerHealthCheckProtocol){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withNetwork.ServerHealthCheckUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input|null[0]
        constructor <init>(kotlin/String) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input.<init>|<init>(kotlin.String){}[0]

        final val url // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input.url|{}url[0]
            final fun <get-url>(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output|null[0]
        constructor <init>(kotlin/String) // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output.<init>|<init>(kotlin.String){}[0]

        final val status // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output.status|{}status[0]
            final fun <get-status>(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output.status.<get-status>|<get-status>(){}[0]

        final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withNetwork/ServerHealthCheckUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase|null[0]
    constructor <init>() // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.<init>|<init>(){}[0]

    final fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.FormValidatorFactoryUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input|null[0]
        constructor <init>(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input.<init>|<init>(kotlinx.serialization.json.JsonObject){}[0]

        final val prototypeObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input.prototypeObject|{}prototypeObject[0]
            final fun <get-prototypeObject>(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input.prototypeObject.<get-prototypeObject>|<get-prototypeObject>(){}[0]

        final fun component1(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input.component1|component1(){}[0]
        final fun copy(kotlinx.serialization.json/JsonObject = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input.copy|copy(kotlinx.serialization.json.JsonObject){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol<kotlin/Any>) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.FormValidatorProtocol<kotlin.Any>){}[0]

        final val validator // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output.validator|{}validator[0]
            final fun <get-validator>(): com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol<kotlin/Any> // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output.validator.<get-validator>|<get-validator>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol<kotlin/Any> // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol/FormValidatorProtocol<kotlin/Any> = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output.copy|copy(com.tezov.tuucho.core.domain.business.protocol.FormValidatorProtocol<kotlin.Any>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/FormValidatorFactoryUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync<kotlin/Unit, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase|null[0]
    constructor <init>() // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.<init>|<init>(){}[0]

    final fun invoke(kotlin/Unit): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.invoke|invoke(kotlin.Unit){}[0]

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.model/LanguageModelDomain) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output.<init>|<init>(com.tezov.tuucho.core.domain.business.model.LanguageModelDomain){}[0]

        final val language // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output.language|{}language[0]
            final fun <get-language>(): com.tezov.tuucho.core.domain.business.model/LanguageModelDomain // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output.language.<get-language>|<get-language>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.model/LanguageModelDomain // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.model/LanguageModelDomain = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output.copy|copy(com.tezov.tuucho.core.domain.business.model.LanguageModelDomain){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetLanguageUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackScreen){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.GetScreenOrNullUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input.<init>|<init>(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url){}[0]

        final val route // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input.route|{}route[0]
            final fun <get-route>(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input.route.<get-route>|<get-route>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input.copy|copy(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol?) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.screen.ScreenProtocol?){}[0]

        final val screen // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output.screen|{}screen[0]
            final fun <get-screen>(): com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol? // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output.screen.<get-screen>|<get-screen>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol? // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol? = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output.copy|copy(com.tezov.tuucho.core.domain.business.protocol.screen.ScreenProtocol?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreenOrNullUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackScreen){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.GetScreensFromRoutesUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input|null[0]
        constructor <init>(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input.<init>|<init>(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]

        final val routes // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input.routes|{}routes[0]
            final fun <get-routes>(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input.routes.<get-routes>|<get-routes>(){}[0]

        final fun component1(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input.component1|component1(){}[0]
        final fun copy(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input.copy|copy(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output|null[0]
        constructor <init>(kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol>) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output.<init>|<init>(kotlin.collections.List<com.tezov.tuucho.core.domain.business.protocol.screen.ScreenProtocol>){}[0]

        final val screens // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output.screens|{}screens[0]
            final fun <get-screens>(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol> // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output.screens.<get-screens>|<get-screens>(){}[0]

        final fun component1(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol> // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output.component1|component1(){}[0]
        final fun copy(kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol> = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output.copy|copy(kotlin.collections.List<com.tezov.tuucho.core.domain.business.protocol.screen.ScreenProtocol>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetScreensFromRoutesUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.GetValueFromStoreUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]

        final val key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input.key|{}key[0]
            final fun <get-key>(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input.key.<get-key>|<get-key>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input.copy|copy(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Value){}[0]

        final val value // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output.value|{}value[0]
            final fun <get-value>(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output.value.<get-value>|<get-value>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output.copy|copy(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Value){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueFromStoreUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.GetValueOrNullFromStoreUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]

        final val key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input.key|{}key[0]
            final fun <get-key>(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input.key.<get-key>|<get-key>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input.copy|copy(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value?) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Value?){}[0]

        final val value // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output.value|{}value[0]
            final fun <get-value>(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value? // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output.value.<get-value>|<get-value>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value? // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value? = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output.copy|copy(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Value?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/GetValueOrNullFromStoreUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.HasKeyInStoreUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]

        final val key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input.key|{}key[0]
            final fun <get-key>(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input.key.<get-key>|<get-key>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input.copy|copy(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output|null[0]
        constructor <init>(kotlin/Boolean) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output.<init>|<init>(kotlin.Boolean){}[0]

        final val result // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output.result|{}result[0]
            final fun <get-result>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output.result.<get-result>|<get-result>(){}[0]

        final fun component1(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output.component1|component1(){}[0]
        final fun copy(kotlin/Boolean = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output.copy|copy(kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/HasKeyInStoreUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase|null[0]
    constructor <init>() // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.<init>|<init>(){}[0]

    final fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.NavigationDefinitionSelectorMatcherFactoryUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input|null[0]
        constructor <init>(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input.<init>|<init>(kotlinx.serialization.json.JsonObject){}[0]

        final val prototypeObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input.prototypeObject|{}prototypeObject[0]
            final fun <get-prototypeObject>(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input.prototypeObject.<get-prototypeObject>|<get-prototypeObject>(){}[0]

        final fun component1(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input.component1|component1(){}[0]
        final fun copy(kotlinx.serialization.json/JsonObject = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input.copy|copy(kotlinx.serialization.json.JsonObject){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol/NavigationDefinitionSelectorMatcherProtocol) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.NavigationDefinitionSelectorMatcherProtocol){}[0]

        final val selector // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output.selector|{}selector[0]
            final fun <get-selector>(): com.tezov.tuucho.core.domain.business.protocol/NavigationDefinitionSelectorMatcherProtocol // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output.selector.<get-selector>|<get-selector>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol/NavigationDefinitionSelectorMatcherProtocol // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol/NavigationDefinitionSelectorMatcherProtocol = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output.copy|copy(com.tezov.tuucho.core.domain.business.protocol.NavigationDefinitionSelectorMatcherProtocol){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationDefinitionSelectorMatcherFactoryUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input, com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase|null[0]
    constructor <init>() // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.<init>|<init>(){}[0]

    final fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.NavigationStackTransitionHelperFactoryUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input|null[0]
        constructor <init>(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input.<init>|<init>(kotlinx.serialization.json.JsonObject){}[0]

        final val prototypeObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input.prototypeObject|{}prototypeObject[0]
            final fun <get-prototypeObject>(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input.prototypeObject.<get-prototypeObject>|<get-prototypeObject>(){}[0]

        final fun component1(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input.component1|component1(){}[0]
        final fun copy(kotlinx.serialization.json/JsonObject = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input.copy|copy(kotlinx.serialization.json.JsonObject){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Input.toString|toString(){}[0]
    }

    final class Output { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.NavigationTransitionStackHelperProtocol){}[0]

        final val helper // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output.helper|{}helper[0]
            final fun <get-helper>(): com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output.helper.<get-helper>|<get-helper>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol/NavigationTransitionStackHelperProtocol = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output.copy|copy(com.tezov.tuucho.core.domain.business.protocol.NavigationTransitionStackHelperProtocol){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NavigationStackTransitionHelperFactoryUseCase.Output.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NotifyNavigationTransitionCompletedUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<kotlin/Unit, kotlin/Unit> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NotifyNavigationTransitionCompletedUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NotifyNavigationTransitionCompletedUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition){}[0]

    final suspend fun invoke(kotlin/Unit) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/NotifyNavigationTransitionCompletedUseCase.invoke|invoke(kotlin.Unit){}[0]
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Sync<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input, kotlin/Unit> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition){}[0]

    final fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.RegisterToScreenTransitionEventUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input|null[0]
        constructor <init>(kotlin.coroutines/SuspendFunction1<com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event, kotlin/Unit>) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input.<init>|<init>(kotlin.coroutines.SuspendFunction1<com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition.Event,kotlin.Unit>){}[0]

        final val onEvent // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input.onEvent|{}onEvent[0]
            final fun <get-onEvent>(): kotlin.coroutines/SuspendFunction1<com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event, kotlin/Unit> // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input.onEvent.<get-onEvent>|<get-onEvent>(){}[0]

        final fun component1(): kotlin.coroutines/SuspendFunction1<com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event, kotlin/Unit> // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input.component1|component1(){}[0]
        final fun copy(kotlin.coroutines/SuspendFunction1<com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event, kotlin/Unit> = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input.copy|copy(kotlin.coroutines.SuspendFunction1<com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition.Event,kotlin.Unit>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RegisterToScreenTransitionEventUseCase.Input.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input, kotlin/Unit> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.RemoveKeyValueFromStoreUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]

        final val key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input.key|{}key[0]
            final fun <get-key>(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input.key.<get-key>|<get-key>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input.component1|component1(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input.copy|copy(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/RemoveKeyValueFromStoreUseCase.Input.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input, kotlin/Unit> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.SaveKeyValueToStoreUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key, com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value?) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key;com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Value?){}[0]

        final val key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.key|{}key[0]
            final fun <get-key>(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.key.<get-key>|<get-key>(){}[0]
        final val value // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.value|{}value[0]
            final fun <get-value>(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value? // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.value.<get-value>|<get-value>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.component1|component1(){}[0]
        final fun component2(): com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value? // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.component2|component2(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Key = ..., com.tezov.tuucho.core.domain.business.protocol.repository/KeyValueStoreRepositoryProtocol.Value? = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.copy|copy(com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Key;com.tezov.tuucho.core.domain.business.protocol.repository.KeyValueStoreRepositoryProtocol.Value?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/SaveKeyValueToStoreUseCase.Input.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase : com.tezov.tuucho.core.domain.business.protocol/UseCaseProtocol.Async<com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input, kotlin/Unit> { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.protocol/CoroutineScopesProtocol, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.CoroutineScopesProtocol;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackScreen){}[0]

    final suspend fun invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.invoke|invoke(com.tezov.tuucho.core.domain.business.usecase.withoutNetwork.UpdateViewUseCase.Input){}[0]

    final class Input { // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.<init>|<init>(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;kotlinx.serialization.json.JsonObject){}[0]

        final val jsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.jsonObject|{}jsonObject[0]
            final fun <get-jsonObject>(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.jsonObject.<get-jsonObject>|<get-jsonObject>(){}[0]
        final val route // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.route|{}route[0]
            final fun <get-route>(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.route.<get-route>|<get-route>(){}[0]

        final fun component1(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.component1|component1(){}[0]
        final fun component2(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.component2|component2(){}[0]
        final fun copy(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url = ..., kotlinx.serialization.json/JsonObject = ...): com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.copy|copy(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;kotlinx.serialization.json.JsonObject){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.usecase.withoutNetwork/UpdateViewUseCase.Input.toString|toString(){}[0]
    }
}

final class com.tezov.tuucho.core.domain.business.validator.formValidator/StringEmailFormValidator : com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator<kotlin/String> { // com.tezov.tuucho.core.domain.business.validator.formValidator/StringEmailFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringEmailFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject){}[0]

    final fun updateValidity(kotlin/String) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringEmailFormValidator.updateValidity|updateValidity(kotlin.String){}[0]
}

final class com.tezov.tuucho.core.domain.business.validator.formValidator/StringMaxLengthFieldFormValidator : com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator<kotlin/String> { // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMaxLengthFieldFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject, kotlin/Int) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMaxLengthFieldFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject;kotlin.Int){}[0]

    final fun updateValidity(kotlin/String) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMaxLengthFieldFormValidator.updateValidity|updateValidity(kotlin.String){}[0]
}

final class com.tezov.tuucho.core.domain.business.validator.formValidator/StringMaxValueFormValidator : com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator<kotlin/String> { // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMaxValueFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject, kotlin/Int) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMaxValueFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject;kotlin.Int){}[0]

    final fun updateValidity(kotlin/String) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMaxValueFormValidator.updateValidity|updateValidity(kotlin.String){}[0]
}

final class com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinDigitLengthFormValidator : com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator<kotlin/String> { // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinDigitLengthFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject, kotlin/Int) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinDigitLengthFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject;kotlin.Int){}[0]

    final fun updateValidity(kotlin/String) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinDigitLengthFormValidator.updateValidity|updateValidity(kotlin.String){}[0]
}

final class com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinLengthFormValidator : com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator<kotlin/String> { // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinLengthFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject, kotlin/Int) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinLengthFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject;kotlin.Int){}[0]

    final fun updateValidity(kotlin/String) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinLengthFormValidator.updateValidity|updateValidity(kotlin.String){}[0]
}

final class com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinValueFormValidator : com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator<kotlin/String> { // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinValueFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject, kotlin/Int) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinValueFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject;kotlin.Int){}[0]

    final fun updateValidity(kotlin/String) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringMinValueFormValidator.updateValidity|updateValidity(kotlin.String){}[0]
}

final class com.tezov.tuucho.core.domain.business.validator.formValidator/StringNotNullFormValidator : com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator<kotlin/String> { // com.tezov.tuucho.core.domain.business.validator.formValidator/StringNotNullFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringNotNullFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject){}[0]

    final fun updateValidity(kotlin/String) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringNotNullFormValidator.updateValidity|updateValidity(kotlin.String){}[0]
}

final class com.tezov.tuucho.core.domain.business.validator.formValidator/StringOnlyDigitsFormValidator : com.tezov.tuucho.core.domain.business.validator.formValidator/AbstractFormValidator<kotlin/String> { // com.tezov.tuucho.core.domain.business.validator.formValidator/StringOnlyDigitsFormValidator|null[0]
    constructor <init>(kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringOnlyDigitsFormValidator.<init>|<init>(kotlinx.serialization.json.JsonObject){}[0]

    final fun updateValidity(kotlin/String) // com.tezov.tuucho.core.domain.business.validator.formValidator/StringOnlyDigitsFormValidator.updateValidity|updateValidity(kotlin.String){}[0]
}

open class <#A: com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A>> com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope { // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope|null[0]
    constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

    final val element // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.element|{}element[0]
        final fun <get-element>(): kotlinx.serialization.json/JsonElement // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.element.<get-element>|<get-element>(){}[0]
    final val hasBeenChanged // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.hasBeenChanged|{}hasBeenChanged[0]
        final fun <get-hasBeenChanged>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.hasBeenChanged.<get-hasBeenChanged>|<get-hasBeenChanged>(){}[0]
    final val mapOperator // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.mapOperator|{}mapOperator[0]
        final fun <get-mapOperator>(): com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.mapOperator.<get-mapOperator>|<get-mapOperator>(){}[0]
    open val root // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.root|{}root[0]
        open fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.root.<get-root>|<get-root>(){}[0]

    final fun <#A1: com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1>> onScope(kotlin/Function1<com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument, #A1>): #A1 // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.onScope|onScope(kotlin.Function1<com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument,0:0>){0ยง<com.tezov.tuucho.core.domain.business.jsonSchema._system.OpenSchemaScope<0:0>>}[0]
    final fun <#A1: com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1>> withScope(kotlin/Function1<com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument, #A1>): #A1 // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.withScope|withScope(kotlin.Function1<com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument,0:0>){0ยง<com.tezov.tuucho.core.domain.business.jsonSchema._system.OpenSchemaScope<0:0>>}[0]
    final fun collect(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.collect|collect(){}[0]
    final fun collectChangedOrNull(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.collectChangedOrNull|collectChangedOrNull(){}[0]
    final fun contains(kotlin/String): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.contains|contains(kotlin.String){}[0]
    final fun get(kotlin/String): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.get|get(kotlin.String){}[0]
    final fun keys(): kotlin.collections/Set<kotlin/String> // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.keys|keys(){}[0]
    final fun remove(kotlin/String) // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.remove|remove(kotlin.String){}[0]
    final fun set(kotlin/String, kotlinx.serialization.json/JsonElement) // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.set|set(kotlin.String;kotlinx.serialization.json.JsonElement){}[0]
    final inline fun <#A1: reified kotlin/Any?> delegate(kotlin/String? = ...): com.tezov.tuucho.core.domain.business.jsonSchema._system/DelegateSchemaKey<#A1> // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.delegate|delegate(kotlin.String?){0ยง<kotlin.Any?>}[0]
    open fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope.toString|toString(){}[0]
}

sealed class com.tezov.tuucho.core.domain.business.exception/DomainException : kotlin/Exception { // com.tezov.tuucho.core.domain.business.exception/DomainException|null[0]
    final class Default : com.tezov.tuucho.core.domain.business.exception/DomainException { // com.tezov.tuucho.core.domain.business.exception/DomainException.Default|null[0]
        constructor <init>(kotlin/String) // com.tezov.tuucho.core.domain.business.exception/DomainException.Default.<init>|<init>(kotlin.String){}[0]
        constructor <init>(kotlin/String, kotlin/Throwable) // com.tezov.tuucho.core.domain.business.exception/DomainException.Default.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
        constructor <init>(kotlin/Throwable) // com.tezov.tuucho.core.domain.business.exception/DomainException.Default.<init>|<init>(kotlin.Throwable){}[0]
    }

    final class Unknown : com.tezov.tuucho.core.domain.business.exception/DomainException { // com.tezov.tuucho.core.domain.business.exception/DomainException.Unknown|null[0]
        constructor <init>(kotlin/Throwable) // com.tezov.tuucho.core.domain.business.exception/DomainException.Unknown.<init>|<init>(kotlin.Throwable){}[0]
    }
}

sealed class com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute|null[0]
    open val id // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.id|{}id[0]
        open fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.id.<get-id>|<get-id>(){}[0]

    abstract fun accept(kotlin/Any): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.accept|accept(kotlin.Any){}[0]

    final class Url : com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url|null[0]
        constructor <init>(kotlin/String, kotlin/String) // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.<init>|<init>(kotlin.String;kotlin.String){}[0]

        final val id // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.id.<get-id>|<get-id>(){}[0]
        final val value // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.value|{}value[0]
            final fun <get-value>(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.value.<get-value>|<get-value>(){}[0]

        final fun accept(kotlin/Any): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.accept|accept(kotlin.Any){}[0]
        final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.component1|component1(){}[0]
        final fun component2(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ...): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.copy|copy(kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url.toString|toString(){}[0]
    }

    final object Back : com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Back|null[0]
        final fun accept(kotlin/Any): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Back.accept|accept(kotlin.Any){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Back.toString|toString(){}[0]
    }

    final object Finish : com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute { // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Finish|null[0]
        final fun accept(kotlin/Any): kotlin/Boolean // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Finish.accept|accept(kotlin.Any){}[0]
        final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Finish.toString|toString(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.di/SystemCoreDomainModules { // com.tezov.tuucho.core.domain.business.di/SystemCoreDomainModules|null[0]
    final fun invoke(): kotlin.collections/List<org.koin.core.module/Module> // com.tezov.tuucho.core.domain.business.di/SystemCoreDomainModules.invoke|invoke(){}[0]
}

final object com.tezov.tuucho.core.domain.business.jsonSchema._system/SymbolData { // com.tezov.tuucho.core.domain.business.jsonSchema._system/SymbolData|null[0]
    final const val ID_GROUP_SEPARATOR // com.tezov.tuucho.core.domain.business.jsonSchema._system/SymbolData.ID_GROUP_SEPARATOR|{}ID_GROUP_SEPARATOR[0]
        final fun <get-ID_GROUP_SEPARATOR>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema._system/SymbolData.ID_GROUP_SEPARATOR.<get-ID_GROUP_SEPARATOR>|<get-ID_GROUP_SEPARATOR>(){}[0]
    final const val ID_REF_INDICATOR // com.tezov.tuucho.core.domain.business.jsonSchema._system/SymbolData.ID_REF_INDICATOR|{}ID_REF_INDICATOR[0]
        final fun <get-ID_REF_INDICATOR>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema._system/SymbolData.ID_REF_INDICATOR.<get-ID_REF_INDICATOR>|<get-ID_REF_INDICATOR>(){}[0]
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema|null[0]
    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final var materialResource // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Scope.materialResource|{}materialResource[0]
            final fun <get-materialResource>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Scope.materialResource.<get-materialResource>|<get-materialResource>(){}[0]
            final fun <set-materialResource>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Scope.materialResource.<set-materialResource>|<set-materialResource>(kotlinx.serialization.json.JsonObject?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Key|null[0]
        final const val materialResource // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Key.materialResource|{}materialResource[0]
            final fun <get-materialResource>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.Key.materialResource.<get-materialResource>|<get-materialResource>(){}[0]
    }

    final object MaterialItem { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var preDownload // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.preDownload|{}preDownload[0]
                final fun <get-preDownload>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.preDownload.<get-preDownload>|<get-preDownload>(){}[0]
                final fun <set-preDownload>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.preDownload.<set-preDownload>|<set-preDownload>(kotlin.Boolean?){}[0]
            final var url // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.url|{}url[0]
                final fun <get-url>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.url.<get-url>|<get-url>(){}[0]
                final fun <set-url>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.url.<set-url>|<set-url>(kotlin.String?){}[0]
            final var urlOrigin // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.urlOrigin|{}urlOrigin[0]
                final fun <get-urlOrigin>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.urlOrigin.<get-urlOrigin>|<get-urlOrigin>(){}[0]
                final fun <set-urlOrigin>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.urlOrigin.<set-urlOrigin>|<set-urlOrigin>(kotlin.String?){}[0]
            final var validityKey // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.validityKey|{}validityKey[0]
                final fun <get-validityKey>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.validityKey.<get-validityKey>|<get-validityKey>(){}[0]
                final fun <set-validityKey>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Scope.validityKey.<set-validityKey>|<set-validityKey>(kotlin.String?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key|null[0]
            final const val preDownload // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key.preDownload|{}preDownload[0]
                final fun <get-preDownload>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key.preDownload.<get-preDownload>|<get-preDownload>(){}[0]
            final const val url // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key.url|{}url[0]
                final fun <get-url>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key.url.<get-url>|<get-url>(){}[0]
            final const val urlOrigin // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key.urlOrigin|{}urlOrigin[0]
                final fun <get-urlOrigin>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key.urlOrigin.<get-urlOrigin>|<get-urlOrigin>(){}[0]
            final const val validityKey // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key.validityKey|{}validityKey[0]
                final fun <get-validityKey>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialItem.Key.validityKey.<get-validityKey>|<get-validityKey>(){}[0]
        }
    }

    final object MaterialResource { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource|null[0]
        final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.root.<get-root>|<get-root>(){}[0]

        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final val root // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.root|{}root[0]
                final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.root.<get-root>|<get-root>(){}[0]

            final var contextual // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.contextual|{}contextual[0]
                final fun <get-contextual>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.contextual.<get-contextual>|<get-contextual>(){}[0]
                final fun <set-contextual>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.contextual.<set-contextual>|<set-contextual>(kotlinx.serialization.json.JsonObject?){}[0]
            final var global // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.global|{}global[0]
                final fun <get-global>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.global.<get-global>|<get-global>(){}[0]
                final fun <set-global>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.global.<set-global>|<set-global>(kotlinx.serialization.json.JsonObject?){}[0]
            final var local // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.local|{}local[0]
                final fun <get-local>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.local.<get-local>|<get-local>(){}[0]
                final fun <set-local>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Scope.local.<set-local>|<set-local>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Key|null[0]
            final const val contextual // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Key.contextual|{}contextual[0]
                final fun <get-contextual>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Key.contextual.<get-contextual>|<get-contextual>(){}[0]
            final const val global // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Key.global|{}global[0]
                final fun <get-global>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Key.global.<get-global>|<get-global>(){}[0]
            final const val local // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Key.local|{}local[0]
                final fun <get-local>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.config/ConfigSchema.MaterialResource.Key.local.<get-local>|<get-local>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema|null[0]
    final object Component { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Component|null[0]
        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Component.Value|null[0]
            final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Component.Value.subset|{}subset[0]
                final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Component.Value.subset.<get-subset>|<get-subset>(){}[0]
        }
    }

    final object Content { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var messageError // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.messageError|{}messageError[0]
                final fun <get-messageError>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.messageError.<get-messageError>|<get-messageError>(){}[0]
                final fun <set-messageError>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.messageError.<set-messageError>|<set-messageError>(kotlinx.serialization.json.JsonArray?){}[0]
            final var placeholder // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.placeholder|{}placeholder[0]
                final fun <get-placeholder>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
                final fun <set-placeholder>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.placeholder.<set-placeholder>|<set-placeholder>(kotlinx.serialization.json.JsonObject?){}[0]
            final var title // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.title|{}title[0]
                final fun <get-title>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.title.<get-title>|<get-title>(){}[0]
                final fun <set-title>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Scope.title.<set-title>|<set-title>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Key|null[0]
            final const val messageError // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Key.messageError|{}messageError[0]
                final fun <get-messageError>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Key.messageError.<get-messageError>|<get-messageError>(){}[0]
            final const val placeholder // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Key.placeholder|{}placeholder[0]
                final fun <get-placeholder>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Key.placeholder.<get-placeholder>|<get-placeholder>(){}[0]
            final const val title // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Key.title|{}title[0]
                final fun <get-title>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.Content.Key.title.<get-title>|<get-title>(){}[0]
        }
    }

    final object State { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
        }

        open class <#A2: com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.OpenScope<#A2>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope<#A2> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.OpenScope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var initialValue // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.OpenScope.initialValue|{}initialValue[0]
                final fun <get-initialValue>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.OpenScope.initialValue.<get-initialValue>|<get-initialValue>(){}[0]
                final fun <set-initialValue>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.OpenScope.initialValue.<set-initialValue>|<set-initialValue>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.Key|null[0]
            final const val initialValue // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.Key.initialValue|{}initialValue[0]
                final fun <get-initialValue>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormFieldSchema.State.Key.initialValue.<get-initialValue>|<get-initialValue>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema|null[0]
    final object Component { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Component|null[0]
        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Component.Value|null[0]
            final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Component.Value.subset|{}subset[0]
                final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Component.Value.subset.<get-subset>|<get-subset>(){}[0]
        }
    }

    final object Message { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
        }

        open class <#A2: com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.OpenScope<#A2>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope<#A2> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.OpenScope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var messageErrorExtra // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.OpenScope.messageErrorExtra|{}messageErrorExtra[0]
                final fun <get-messageErrorExtra>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.OpenScope.messageErrorExtra.<get-messageErrorExtra>|<get-messageErrorExtra>(){}[0]
                final fun <set-messageErrorExtra>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.OpenScope.messageErrorExtra.<set-messageErrorExtra>|<set-messageErrorExtra>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Key|null[0]
            final const val messageErrorExtra // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Key.messageErrorExtra|{}messageErrorExtra[0]
                final fun <get-messageErrorExtra>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Key.messageErrorExtra.<get-messageErrorExtra>|<get-messageErrorExtra>(){}[0]
        }

        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Value|null[0]
            final object Subset { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Value.Subset|null[0]
                final const val updateErrorState // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Value.Subset.updateErrorState|{}updateErrorState[0]
                    final fun <get-updateErrorState>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Message.Value.Subset.updateErrorState.<get-updateErrorState>|<get-updateErrorState>(){}[0]
            }
        }
    }

    final object Option { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
        }

        open class <#A2: com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.OpenScope<#A2>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope<#A2> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.OpenScope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var validator // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.OpenScope.validator|{}validator[0]
                final fun <get-validator>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.OpenScope.validator.<get-validator>|<get-validator>(){}[0]
                final fun <set-validator>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.OpenScope.validator.<set-validator>|<set-validator>(kotlinx.serialization.json.JsonArray?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.Key|null[0]
            final const val validator // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.Key.validator|{}validator[0]
                final fun <get-validator>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormSchema.Option.Key.validator.<get-validator>|<get-validator>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var idMessageError // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.idMessageError|{}idMessageError[0]
            final fun <get-idMessageError>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.idMessageError.<get-idMessageError>|<get-idMessageError>(){}[0]
            final fun <set-idMessageError>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.idMessageError.<set-idMessageError>|<set-idMessageError>(kotlin.String?){}[0]
        final var length // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.length|{}length[0]
            final fun <get-length>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.length.<get-length>|<get-length>(){}[0]
            final fun <set-length>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.length.<set-length>|<set-length>(kotlin.String?){}[0]
        final var messageError // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.messageError|{}messageError[0]
            final fun <get-messageError>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.messageError.<get-messageError>|<get-messageError>(){}[0]
            final fun <set-messageError>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.messageError.<set-messageError>|<set-messageError>(kotlinx.serialization.json.JsonObject?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.type.<set-type>|<set-type>(kotlin.String?){}[0]
        final var value // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.value|{}value[0]
            final fun <get-value>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.value.<get-value>|<get-value>(){}[0]
            final fun <set-value>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Scope.value.<set-value>|<set-value>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key|null[0]
        final const val idMessageError // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.idMessageError|{}idMessageError[0]
            final fun <get-idMessageError>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.idMessageError.<get-idMessageError>|<get-idMessageError>(){}[0]
        final const val length // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.length|{}length[0]
            final fun <get-length>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.length.<get-length>|<get-length>(){}[0]
        final const val messageError // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.messageError|{}messageError[0]
            final fun <get-messageError>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.messageError.<get-messageError>|<get-messageError>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.type.<get-type>|<get-type>(){}[0]
        final const val value // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.value|{}value[0]
            final fun <get-value>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Key.value.<get-value>|<get-value>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value|null[0]
        final object Type { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type|null[0]
            final const val stringEmail // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringEmail|{}stringEmail[0]
                final fun <get-stringEmail>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringEmail.<get-stringEmail>|<get-stringEmail>(){}[0]
            final const val stringMaxLength // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMaxLength|{}stringMaxLength[0]
                final fun <get-stringMaxLength>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMaxLength.<get-stringMaxLength>|<get-stringMaxLength>(){}[0]
            final const val stringMaxValue // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMaxValue|{}stringMaxValue[0]
                final fun <get-stringMaxValue>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMaxValue.<get-stringMaxValue>|<get-stringMaxValue>(){}[0]
            final const val stringMinDigitLength // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMinDigitLength|{}stringMinDigitLength[0]
                final fun <get-stringMinDigitLength>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMinDigitLength.<get-stringMinDigitLength>|<get-stringMinDigitLength>(){}[0]
            final const val stringMinLength // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMinLength|{}stringMinLength[0]
                final fun <get-stringMinLength>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMinLength.<get-stringMinLength>|<get-stringMinLength>(){}[0]
            final const val stringMinValue // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMinValue|{}stringMinValue[0]
                final fun <get-stringMinValue>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringMinValue.<get-stringMinValue>|<get-stringMinValue>(){}[0]
            final const val stringNotNull // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringNotNull|{}stringNotNull[0]
                final fun <get-stringNotNull>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringNotNull.<get-stringNotNull>|<get-stringNotNull>(){}[0]
            final const val stringOnlyDigits // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringOnlyDigits|{}stringOnlyDigits[0]
                final fun <get-stringOnlyDigits>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.form/FormValidatorSchema.Value.Type.stringOnlyDigits.<get-stringOnlyDigits>|<get-stringOnlyDigits>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema|null[0]
    final object Component { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Component|null[0]
        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Component.Value|null[0]
            final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Component.Value.subset|{}subset[0]
                final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Component.Value.subset.<get-subset>|<get-subset>(){}[0]
        }
    }

    final object Content { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var items // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Scope.items|{}items[0]
                final fun <get-items>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Scope.items.<get-items>|<get-items>(){}[0]
                final fun <set-items>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Scope.items.<set-items>|<set-items>(kotlinx.serialization.json.JsonArray?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Key|null[0]
            final const val items // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Key.items|{}items[0]
                final fun <get-items>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Content.Key.items.<get-items>|<get-items>(){}[0]
        }
    }

    final object Style { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var backgroundColor // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.backgroundColor|{}backgroundColor[0]
                final fun <get-backgroundColor>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.backgroundColor.<get-backgroundColor>|<get-backgroundColor>(){}[0]
                final fun <set-backgroundColor>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.backgroundColor.<set-backgroundColor>|<set-backgroundColor>(kotlinx.serialization.json.JsonObject?){}[0]
            final var fillMaxSize // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.fillMaxSize|{}fillMaxSize[0]
                final fun <get-fillMaxSize>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.fillMaxSize.<get-fillMaxSize>|<get-fillMaxSize>(){}[0]
                final fun <set-fillMaxSize>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.fillMaxSize.<set-fillMaxSize>|<set-fillMaxSize>(kotlin.Boolean?){}[0]
            final var fillMaxWidth // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.fillMaxWidth|{}fillMaxWidth[0]
                final fun <get-fillMaxWidth>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.fillMaxWidth.<get-fillMaxWidth>|<get-fillMaxWidth>(){}[0]
                final fun <set-fillMaxWidth>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.fillMaxWidth.<set-fillMaxWidth>|<set-fillMaxWidth>(kotlin.Boolean?){}[0]
            final var orientation // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.orientation|{}orientation[0]
                final fun <get-orientation>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.orientation.<get-orientation>|<get-orientation>(){}[0]
                final fun <set-orientation>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Scope.orientation.<set-orientation>|<set-orientation>(kotlin.String?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key|null[0]
            final const val backgroundColor // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key.backgroundColor|{}backgroundColor[0]
                final fun <get-backgroundColor>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key.backgroundColor.<get-backgroundColor>|<get-backgroundColor>(){}[0]
            final const val fillMaxSize // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key.fillMaxSize|{}fillMaxSize[0]
                final fun <get-fillMaxSize>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key.fillMaxSize.<get-fillMaxSize>|<get-fillMaxSize>(){}[0]
            final const val fillMaxWidth // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key.fillMaxWidth|{}fillMaxWidth[0]
                final fun <get-fillMaxWidth>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key.fillMaxWidth.<get-fillMaxWidth>|<get-fillMaxWidth>(){}[0]
            final const val orientation // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key.orientation|{}orientation[0]
                final fun <get-orientation>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Key.orientation.<get-orientation>|<get-orientation>(){}[0]
        }

        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Value|null[0]
            final object Orientation { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Value.Orientation|null[0]
                final const val horizontal // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Value.Orientation.horizontal|{}horizontal[0]
                    final fun <get-horizontal>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Value.Orientation.horizontal.<get-horizontal>|<get-horizontal>(){}[0]
                final const val vertical // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Value.Orientation.vertical|{}vertical[0]
                    final fun <get-vertical>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element.layout/LayoutLinearSchema.Style.Value.Orientation.vertical.<get-vertical>|<get-vertical>(){}[0]
            }
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema|null[0]
    final object Component { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Component|null[0]
        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Component.Value|null[0]
            final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Component.Value.subset|{}subset[0]
                final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Component.Value.subset.<get-subset>|<get-subset>(){}[0]
        }
    }

    final object Content { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var action // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope.action|{}action[0]
                final fun <get-action>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope.action.<get-action>|<get-action>(){}[0]
                final fun <set-action>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope.action.<set-action>|<set-action>(kotlinx.serialization.json.JsonObject?){}[0]
            final var label // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope.label|{}label[0]
                final fun <get-label>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope.label.<get-label>|<get-label>(){}[0]
                final fun <set-label>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Scope.label.<set-label>|<set-label>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Key|null[0]
            final const val action // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Key.action|{}action[0]
                final fun <get-action>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Key.action.<get-action>|<get-action>(){}[0]
            final const val label // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Key.label|{}label[0]
                final fun <get-label>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/ButtonSchema.Content.Key.label.<get-label>|<get-label>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema|null[0]
    final object Component { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Component|null[0]
        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Component.Value|null[0]
            final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Component.Value.subset|{}subset[0]
                final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Component.Value.subset.<get-subset>|<get-subset>(){}[0]
        }
    }

    final object Content { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var value // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Scope.value|{}value[0]
                final fun <get-value>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Scope.value.<get-value>|<get-value>(){}[0]
                final fun <set-value>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Scope.value.<set-value>|<set-value>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Key|null[0]
            final const val value // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Key.value|{}value[0]
                final fun <get-value>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Content.Key.value.<get-value>|<get-value>(){}[0]
        }
    }

    final object Style { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var fontColor // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope.fontColor|{}fontColor[0]
                final fun <get-fontColor>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope.fontColor.<get-fontColor>|<get-fontColor>(){}[0]
                final fun <set-fontColor>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope.fontColor.<set-fontColor>|<set-fontColor>(kotlinx.serialization.json.JsonObject?){}[0]
            final var fontSize // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope.fontSize|{}fontSize[0]
                final fun <get-fontSize>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope.fontSize.<get-fontSize>|<get-fontSize>(){}[0]
                final fun <set-fontSize>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Scope.fontSize.<set-fontSize>|<set-fontSize>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Key|null[0]
            final const val fontColor // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Key.fontColor|{}fontColor[0]
                final fun <get-fontColor>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Key.fontColor.<get-fontColor>|<get-fontColor>(){}[0]
            final const val fontSize // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Key.fontSize|{}fontSize[0]
                final fun <get-fontSize>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/LabelSchema.Style.Key.fontSize.<get-fontSize>|<get-fontSize>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema|null[0]
    final object Component { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Component|null[0]
        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Component.Value|null[0]
            final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Component.Value.subset|{}subset[0]
                final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Component.Value.subset.<get-subset>|<get-subset>(){}[0]
        }
    }

    final object Style { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var weight // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Scope.weight|{}weight[0]
                final fun <get-weight>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Scope.weight.<get-weight>|<get-weight>(){}[0]
                final fun <set-weight>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Scope.weight.<set-weight>|<set-weight>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Key|null[0]
            final const val weight // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Key.weight|{}weight[0]
                final fun <get-weight>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material._element/SpacerSchema.Style.Key.weight.<get-weight>|<get-weight>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var backward // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.backward|{}backward[0]
            final fun <get-backward>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.backward.<get-backward>|<get-backward>(){}[0]
            final fun <set-backward>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.backward.<set-backward>|<set-backward>(kotlinx.serialization.json.JsonObject?){}[0]
        final var forward // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.forward|{}forward[0]
            final fun <get-forward>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.forward.<get-forward>|<get-forward>(){}[0]
            final fun <set-forward>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Scope.forward.<set-forward>|<set-forward>(kotlinx.serialization.json.JsonObject?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Key|null[0]
        final const val backward // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Key.backward|{}backward[0]
            final fun <get-backward>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Key.backward.<get-backward>|<get-backward>(){}[0]
        final const val forward // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Key.forward|{}forward[0]
            final fun <get-forward>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Key.forward.<get-forward>|<get-forward>(){}[0]
    }

    final object Set { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var enter // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope.enter|{}enter[0]
                final fun <get-enter>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope.enter.<get-enter>|<get-enter>(){}[0]
                final fun <set-enter>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope.enter.<set-enter>|<set-enter>(kotlinx.serialization.json.JsonObject?){}[0]
            final var exit // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope.exit|{}exit[0]
                final fun <get-exit>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope.exit.<get-exit>|<get-exit>(){}[0]
                final fun <set-exit>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Scope.exit.<set-exit>|<set-exit>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Key|null[0]
            final const val enter // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Key.enter|{}enter[0]
                final fun <get-enter>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Key.enter.<get-enter>|<get-enter>(){}[0]
            final const val exit // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Key.exit|{}exit[0]
                final fun <get-exit>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Set.Key.exit.<get-exit>|<get-exit>(){}[0]
        }
    }

    final object Spec { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
        }

        open class <#A2: com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope<#A2>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A2> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var directionNavigation // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.directionNavigation|{}directionNavigation[0]
                final fun <get-directionNavigation>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.directionNavigation.<get-directionNavigation>|<get-directionNavigation>(){}[0]
                final fun <set-directionNavigation>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.directionNavigation.<set-directionNavigation>|<set-directionNavigation>(kotlin.String?){}[0]
            final var directionScreen // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.directionScreen|{}directionScreen[0]
                final fun <get-directionScreen>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.directionScreen.<get-directionScreen>|<get-directionScreen>(){}[0]
                final fun <set-directionScreen>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.directionScreen.<set-directionScreen>|<set-directionScreen>(kotlin.String?){}[0]
            final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.type|{}type[0]
                final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.type.<get-type>|<get-type>(){}[0]
                final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Key|null[0]
            final const val directionNavigation // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Key.directionNavigation|{}directionNavigation[0]
                final fun <get-directionNavigation>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Key.directionNavigation.<get-directionNavigation>|<get-directionNavigation>(){}[0]
            final const val directionScreen // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Key.directionScreen|{}directionScreen[0]
                final fun <get-directionScreen>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Key.directionScreen.<get-directionScreen>|<get-directionScreen>(){}[0]
            final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Key.type|{}type[0]
                final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Key.type.<get-type>|<get-type>(){}[0]
        }

        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value|null[0]
            final object DirectionNavigation { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionNavigation|null[0]
                final const val backward // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionNavigation.backward|{}backward[0]
                    final fun <get-backward>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionNavigation.backward.<get-backward>|<get-backward>(){}[0]
                final const val forward // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionNavigation.forward|{}forward[0]
                    final fun <get-forward>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionNavigation.forward.<get-forward>|<get-forward>(){}[0]
            }

            final object DirectionScreen { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionScreen|null[0]
                final const val enter // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionScreen.enter|{}enter[0]
                    final fun <get-enter>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionScreen.enter.<get-enter>|<get-enter>(){}[0]
                final const val exit // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionScreen.exit|{}exit[0]
                    final fun <get-exit>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.DirectionScreen.exit.<get-exit>|<get-exit>(){}[0]
            }

            final object Type { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type|null[0]
                final const val fade // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type.fade|{}fade[0]
                    final fun <get-fade>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type.fade.<get-fade>|<get-fade>(){}[0]
                final const val none // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type.none|{}none[0]
                    final fun <get-none>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type.none.<get-none>|<get-none>(){}[0]
                final const val slideHorizontal // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type.slideHorizontal|{}slideHorizontal[0]
                    final fun <get-slideHorizontal>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type.slideHorizontal.<get-slideHorizontal>|<get-slideHorizontal>(){}[0]
                final const val slideVertical // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type.slideVertical|{}slideVertical[0]
                    final fun <get-slideVertical>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.Value.Type.slideVertical.<get-slideVertical>|<get-slideVertical>(){}[0]
            }
        }
    }

    final object SpecFade { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var alphaInitial // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope.alphaInitial|{}alphaInitial[0]
                final fun <get-alphaInitial>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope.alphaInitial.<get-alphaInitial>|<get-alphaInitial>(){}[0]
                final fun <set-alphaInitial>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope.alphaInitial.<set-alphaInitial>|<set-alphaInitial>(kotlin.String?){}[0]
            final var duration // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope.duration|{}duration[0]
                final fun <get-duration>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope.duration.<get-duration>|<get-duration>(){}[0]
                final fun <set-duration>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Scope.duration.<set-duration>|<set-duration>(kotlin.String?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Key|null[0]
            final const val alphaInitial // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Key.alphaInitial|{}alphaInitial[0]
                final fun <get-alphaInitial>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Key.alphaInitial.<get-alphaInitial>|<get-alphaInitial>(){}[0]
            final const val duration // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Key.duration|{}duration[0]
                final fun <get-duration>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecFade.Key.duration.<get-duration>|<get-duration>(){}[0]
        }
    }

    final object SpecSlide { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.Spec.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var duration // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.duration|{}duration[0]
                final fun <get-duration>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.duration.<get-duration>|<get-duration>(){}[0]
                final fun <set-duration>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.duration.<set-duration>|<set-duration>(kotlin.String?){}[0]
            final var effect // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.effect|{}effect[0]
                final fun <get-effect>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.effect.<get-effect>|<get-effect>(){}[0]
                final fun <set-effect>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.effect.<set-effect>|<set-effect>(kotlin.String?){}[0]
            final var entrance // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.entrance|{}entrance[0]
                final fun <get-entrance>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.entrance.<get-entrance>|<get-entrance>(){}[0]
                final fun <set-entrance>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.entrance.<set-entrance>|<set-entrance>(kotlin.String?){}[0]
            final var exitDarkAlphaFactor // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.exitDarkAlphaFactor|{}exitDarkAlphaFactor[0]
                final fun <get-exitDarkAlphaFactor>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.exitDarkAlphaFactor.<get-exitDarkAlphaFactor>|<get-exitDarkAlphaFactor>(){}[0]
                final fun <set-exitDarkAlphaFactor>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Scope.exitDarkAlphaFactor.<set-exitDarkAlphaFactor>|<set-exitDarkAlphaFactor>(kotlin.String?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key|null[0]
            final const val duration // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key.duration|{}duration[0]
                final fun <get-duration>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key.duration.<get-duration>|<get-duration>(){}[0]
            final const val effect // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key.effect|{}effect[0]
                final fun <get-effect>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key.effect.<get-effect>|<get-effect>(){}[0]
            final const val entrance // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key.entrance|{}entrance[0]
                final fun <get-entrance>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key.entrance.<get-entrance>|<get-entrance>(){}[0]
            final const val exitDarkAlphaFactor // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key.exitDarkAlphaFactor|{}exitDarkAlphaFactor[0]
                final fun <get-exitDarkAlphaFactor>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Key.exitDarkAlphaFactor.<get-exitDarkAlphaFactor>|<get-exitDarkAlphaFactor>(){}[0]
        }

        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value|null[0]
            final object Effect { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Effect|null[0]
                final const val cover // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Effect.cover|{}cover[0]
                    final fun <get-cover>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Effect.cover.<get-cover>|<get-cover>(){}[0]
                final const val coverPush // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Effect.coverPush|{}coverPush[0]
                    final fun <get-coverPush>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Effect.coverPush.<get-coverPush>|<get-coverPush>(){}[0]
                final const val push // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Effect.push|{}push[0]
                    final fun <get-push>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Effect.push.<get-push>|<get-push>(){}[0]
            }

            final object Entrance { // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance|null[0]
                final const val fromBottom // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance.fromBottom|{}fromBottom[0]
                    final fun <get-fromBottom>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance.fromBottom.<get-fromBottom>|<get-fromBottom>(){}[0]
                final const val fromEnd // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance.fromEnd|{}fromEnd[0]
                    final fun <get-fromEnd>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance.fromEnd.<get-fromEnd>|<get-fromEnd>(){}[0]
                final const val fromStart // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance.fromStart|{}fromStart[0]
                    final fun <get-fromStart>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance.fromStart.<get-fromStart>|<get-fromStart>(){}[0]
                final const val fromTop // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance.fromTop|{}fromTop[0]
                    final fun <get-fromTop>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.componentSetting.navigationSchema/SettingComponentNavigationTransitionSchema.SpecSlide.Value.Entrance.fromTop.<get-fromTop>|<get-fromTop>(){}[0]
            }
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema|null[0]
    final object Send { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var after // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.after|{}after[0]
                final fun <get-after>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.after.<get-after>|<get-after>(){}[0]
                final fun <set-after>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.after.<set-after>|<set-after>(kotlinx.serialization.json.JsonArray?){}[0]
            final var before // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.before|{}before[0]
                final fun <get-before>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.before.<get-before>|<get-before>(){}[0]
                final fun <set-before>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.before.<set-before>|<set-before>(kotlinx.serialization.json.JsonArray?){}[0]
            final var denied // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.denied|{}denied[0]
                final fun <get-denied>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.denied.<get-denied>|<get-denied>(){}[0]
                final fun <set-denied>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.denied.<set-denied>|<set-denied>(kotlinx.serialization.json.JsonArray?){}[0]
            final var validated // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.validated|{}validated[0]
                final fun <get-validated>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.validated.<get-validated>|<get-validated>(){}[0]
                final fun <set-validated>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Scope.validated.<set-validated>|<set-validated>(kotlinx.serialization.json.JsonArray?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key|null[0]
            final const val after // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key.after|{}after[0]
                final fun <get-after>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key.after.<get-after>|<get-after>(){}[0]
            final const val before // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key.before|{}before[0]
                final fun <get-before>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key.before.<get-before>|<get-before>(){}[0]
            final const val denied // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key.denied|{}denied[0]
                final fun <get-denied>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key.denied.<get-denied>|<get-denied>(){}[0]
            final const val validated // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key.validated|{}validated[0]
                final fun <get-validated>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionFormSchema.Send.Key.validated.<get-validated>|<get-validated>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
    }

    open class <#A1: com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope<#A1>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        open val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.root|{}root[0]
            open fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.root.<get-root>|<get-root>(){}[0]

        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var primary // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.primary|{}primary[0]
            final fun <get-primary>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.primary.<get-primary>|<get-primary>(){}[0]
            final fun <set-primary>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.primary.<set-primary>|<set-primary>(kotlinx.serialization.json.JsonArray?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Key|null[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val primary // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Key.primary|{}primary[0]
            final fun <get-primary>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Key.primary.<get-primary>|<get-primary>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content.action/ActionSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
    }

    open class <#A1: com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope<#A1>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.root.<get-root>|<get-root>(){}[0]

        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var subset // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.subset.<get-subset>|<get-subset>(){}[0]
            final fun <set-subset>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.subset.<set-subset>|<set-subset>(kotlin.String?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Key|null[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Key.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Key.subset.<get-subset>|<get-subset>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.content/ContentSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var clearStack // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.clearStack|{}clearStack[0]
            final fun <get-clearStack>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.clearStack.<get-clearStack>|<get-clearStack>(){}[0]
            final fun <set-clearStack>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.clearStack.<set-clearStack>|<set-clearStack>(kotlin.Boolean?){}[0]
        final var popupTo // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.popupTo|{}popupTo[0]
            final fun <get-popupTo>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.popupTo.<get-popupTo>|<get-popupTo>(){}[0]
            final fun <set-popupTo>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.popupTo.<set-popupTo>|<set-popupTo>(kotlinx.serialization.json.JsonObject?){}[0]
        final var reuse // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.reuse|{}reuse[0]
            final fun <get-reuse>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.reuse.<get-reuse>|<get-reuse>(){}[0]
            final fun <set-reuse>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.reuse.<set-reuse>|<set-reuse>(kotlin.String?){}[0]
        final var single // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.single|{}single[0]
            final fun <get-single>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.single.<get-single>|<get-single>(){}[0]
            final fun <set-single>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Scope.single.<set-single>|<set-single>(kotlin.Boolean?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key|null[0]
        final const val clearStack // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key.clearStack|{}clearStack[0]
            final fun <get-clearStack>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key.clearStack.<get-clearStack>|<get-clearStack>(){}[0]
        final const val popupTo // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key.popupTo|{}popupTo[0]
            final fun <get-popupTo>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key.popupTo.<get-popupTo>|<get-popupTo>(){}[0]
        final const val reuse // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key.reuse|{}reuse[0]
            final fun <get-reuse>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key.reuse.<get-reuse>|<get-reuse>(){}[0]
        final const val single // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key.single|{}single[0]
            final fun <get-single>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Key.single.<get-single>|<get-single>(){}[0]
    }

    final object PopUpTo { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo|null[0]
        final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.root.<get-root>|<get-root>(){}[0]

        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.root|{}root[0]
                final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.root.<get-root>|<get-root>(){}[0]

            final var greedy // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.greedy|{}greedy[0]
                final fun <get-greedy>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.greedy.<get-greedy>|<get-greedy>(){}[0]
                final fun <set-greedy>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.greedy.<set-greedy>|<set-greedy>(kotlin.Boolean?){}[0]
            final var inclusive // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.inclusive|{}inclusive[0]
                final fun <get-inclusive>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.inclusive.<get-inclusive>|<get-inclusive>(){}[0]
                final fun <set-inclusive>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.inclusive.<set-inclusive>|<set-inclusive>(kotlin.Boolean?){}[0]
            final var url // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.url|{}url[0]
                final fun <get-url>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.url.<get-url>|<get-url>(){}[0]
                final fun <set-url>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Scope.url.<set-url>|<set-url>(kotlin.String?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Key|null[0]
            final const val greedy // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Key.greedy|{}greedy[0]
                final fun <get-greedy>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Key.greedy.<get-greedy>|<get-greedy>(){}[0]
            final const val inclusive // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Key.inclusive|{}inclusive[0]
                final fun <get-inclusive>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Key.inclusive.<get-inclusive>|<get-inclusive>(){}[0]
            final const val url // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Key.url|{}url[0]
                final fun <get-url>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.PopUpTo.Key.url.<get-url>|<get-url>(){}[0]
        }
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Value|null[0]
        final object Reuse { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Value.Reuse|null[0]
            final const val first // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Value.Reuse.first|{}first[0]
                final fun <get-first>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Value.Reuse.first.<get-first>|<get-first>(){}[0]
            final const val last // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Value.Reuse.last|{}last[0]
                final fun <get-last>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationOptionSchema.Value.Reuse.last.<get-last>|<get-last>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var definition // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.definition|{}definition[0]
            final fun <get-definition>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.definition.<get-definition>|<get-definition>(){}[0]
            final fun <set-definition>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.definition.<set-definition>|<set-definition>(kotlinx.serialization.json.JsonArray?){}[0]
        final var extra // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.extra|{}extra[0]
            final fun <get-extra>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.extra.<get-extra>|<get-extra>(){}[0]
            final fun <set-extra>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Scope.extra.<set-extra>|<set-extra>(kotlinx.serialization.json.JsonObject?){}[0]
    }

    final object Definition { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition|null[0]
        final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.root.<get-root>|<get-root>(){}[0]

        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.root|{}root[0]
                final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.root.<get-root>|<get-root>(){}[0]

            final var option // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.option|{}option[0]
                final fun <get-option>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.option.<get-option>|<get-option>(){}[0]
                final fun <set-option>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.option.<set-option>|<set-option>(kotlinx.serialization.json.JsonObject?){}[0]
            final var selector // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.selector|{}selector[0]
                final fun <get-selector>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.selector.<get-selector>|<get-selector>(){}[0]
                final fun <set-selector>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.selector.<set-selector>|<set-selector>(kotlinx.serialization.json.JsonObject?){}[0]
            final var transition // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.transition|{}transition[0]
                final fun <get-transition>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.transition.<get-transition>|<get-transition>(){}[0]
                final fun <set-transition>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Scope.transition.<set-transition>|<set-transition>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Key|null[0]
            final const val option // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Key.option|{}option[0]
                final fun <get-option>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Key.option.<get-option>|<get-option>(){}[0]
            final const val selector // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Key.selector|{}selector[0]
                final fun <get-selector>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Key.selector.<get-selector>|<get-selector>(){}[0]
            final const val transition // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Key.transition|{}transition[0]
                final fun <get-transition>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Definition.Key.transition.<get-transition>|<get-transition>(){}[0]
        }
    }

    final object Extra { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra|null[0]
        final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.root.<get-root>|<get-root>(){}[0]

        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Scope.root|{}root[0]
                final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Scope.root.<get-root>|<get-root>(){}[0]

            final var isBackgroundSolid // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Scope.isBackgroundSolid|{}isBackgroundSolid[0]
                final fun <get-isBackgroundSolid>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Scope.isBackgroundSolid.<get-isBackgroundSolid>|<get-isBackgroundSolid>(){}[0]
                final fun <set-isBackgroundSolid>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Scope.isBackgroundSolid.<set-isBackgroundSolid>|<set-isBackgroundSolid>(kotlin.Boolean?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Key|null[0]
            final const val isBackgroundSolid // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Key.isBackgroundSolid|{}isBackgroundSolid[0]
                final fun <get-isBackgroundSolid>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Extra.Key.isBackgroundSolid.<get-isBackgroundSolid>|<get-isBackgroundSolid>(){}[0]
        }
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Key|null[0]
        final const val definition // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Key.definition|{}definition[0]
            final fun <get-definition>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Key.definition.<get-definition>|<get-definition>(){}[0]
        final const val extra // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Key.extra|{}extra[0]
            final fun <get-extra>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSchema.Key.extra.<get-extra>|<get-extra>(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.type.<set-type>|<set-type>(kotlin.String?){}[0]
        final var values // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.values|{}values[0]
            final fun <get-values>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.values.<get-values>|<get-values>(){}[0]
            final fun <set-values>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Scope.values.<set-values>|<set-values>(kotlinx.serialization.json.JsonArray?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Key|null[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Key.type.<get-type>|<get-type>(){}[0]
        final const val value // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Key.value|{}value[0]
            final fun <get-value>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Key.value.<get-value>|<get-value>(){}[0]
        final const val values // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Key.values|{}values[0]
            final fun <get-values>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Key.values.<get-values>|<get-values>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Value|null[0]
        final object Type { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Value.Type|null[0]
            final const val pageBreadCrumb // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Value.Type.pageBreadCrumb|{}pageBreadCrumb[0]
                final fun <get-pageBreadCrumb>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component.navigationSchema/ComponentSettingNavigationSelectorSchema.Value.Type.pageBreadCrumb.<get-pageBreadCrumb>|<get-pageBreadCrumb>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
    }

    open class <#A1: com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope<#A1>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.root.<get-root>|<get-root>(){}[0]

        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Key|null[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Root { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var navigation // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope.navigation|{}navigation[0]
                final fun <get-navigation>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope.navigation.<get-navigation>|<get-navigation>(){}[0]
                final fun <set-navigation>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope.navigation.<set-navigation>|<set-navigation>(kotlinx.serialization.json.JsonObject?){}[0]
            final var shadower // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope.shadower|{}shadower[0]
                final fun <get-shadower>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope.shadower.<get-shadower>|<get-shadower>(){}[0]
                final fun <set-shadower>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Scope.shadower.<set-shadower>|<set-shadower>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Key|null[0]
            final const val navigation // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Key.navigation|{}navigation[0]
                final fun <get-navigation>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Key.navigation.<get-navigation>|<get-navigation>(){}[0]
            final const val shadower // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Key.shadower|{}shadower[0]
                final fun <get-shadower>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.Root.Key.shadower.<get-shadower>|<get-shadower>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var navigateBackward // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.navigateBackward|{}navigateBackward[0]
            final fun <get-navigateBackward>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.navigateBackward.<get-navigateBackward>|<get-navigateBackward>(){}[0]
            final fun <set-navigateBackward>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.navigateBackward.<set-navigateBackward>|<set-navigateBackward>(kotlinx.serialization.json.JsonObject?){}[0]
        final var navigateForward // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.navigateForward|{}navigateForward[0]
            final fun <get-navigateForward>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.navigateForward.<get-navigateForward>|<get-navigateForward>(){}[0]
            final fun <set-navigateForward>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Scope.navigateForward.<set-navigateForward>|<set-navigateForward>(kotlinx.serialization.json.JsonObject?){}[0]
    }

    final object Contextual { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var url // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Scope.url|{}url[0]
                final fun <get-url>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Scope.url.<get-url>|<get-url>(){}[0]
                final fun <set-url>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Scope.url.<set-url>|<set-url>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Key|null[0]
            final const val url // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Key.url|{}url[0]
                final fun <get-url>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Contextual.Key.url.<get-url>|<get-url>(){}[0]
        }
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Key|null[0]
        final const val navigateBackward // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Key.navigateBackward|{}navigateBackward[0]
            final fun <get-navigateBackward>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Key.navigateBackward.<get-navigateBackward>|<get-navigateBackward>(){}[0]
        final const val navigateForward // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Key.navigateForward|{}navigateForward[0]
            final fun <get-navigateForward>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Key.navigateForward.<get-navigateForward>|<get-navigateForward>(){}[0]
    }

    final object Navigate { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate|null[0]
        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/ComponentSettingSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final var enable // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope.enable|{}enable[0]
                final fun <get-enable>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope.enable.<get-enable>|<get-enable>(){}[0]
                final fun <set-enable>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope.enable.<set-enable>|<set-enable>(kotlin.Boolean?){}[0]
            final var waitDoneToRender // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope.waitDoneToRender|{}waitDoneToRender[0]
                final fun <get-waitDoneToRender>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope.waitDoneToRender.<get-waitDoneToRender>|<get-waitDoneToRender>(){}[0]
                final fun <set-waitDoneToRender>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Scope.waitDoneToRender.<set-waitDoneToRender>|<set-waitDoneToRender>(kotlin.Boolean?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Key|null[0]
            final const val enable // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Key.enable|{}enable[0]
                final fun <get-enable>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Key.enable.<get-enable>|<get-enable>(){}[0]
            final const val waitDoneToRender // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Key.waitDoneToRender|{}waitDoneToRender[0]
                final fun <get-waitDoneToRender>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.component/SettingComponentShadowerSchema.Navigate.Key.waitDoneToRender.<get-waitDoneToRender>|<get-waitDoneToRender>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var ttl // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.ttl|{}ttl[0]
            final fun <get-ttl>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.ttl.<get-ttl>|<get-ttl>(){}[0]
            final fun <set-ttl>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.ttl.<set-ttl>|<set-ttl>(kotlinx.serialization.json.JsonObject?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Scope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Key|null[0]
        final const val ttl // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Key.ttl|{}ttl[0]
            final fun <get-ttl>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Key.ttl.<get-ttl>|<get-ttl>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Ttl { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl|null[0]
        final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.root.<get-root>|<get-root>(){}[0]

        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.root|{}root[0]
                final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.root.<get-root>|<get-root>(){}[0]

            final var strategy // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.strategy|{}strategy[0]
                final fun <get-strategy>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.strategy.<get-strategy>|<get-strategy>(){}[0]
                final fun <set-strategy>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.strategy.<set-strategy>|<set-strategy>(kotlin.String?){}[0]
            final var transientValue // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.transientValue|{}transientValue[0]
                final fun <get-transientValue>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.transientValue.<get-transientValue>|<get-transientValue>(){}[0]
                final fun <set-transientValue>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Scope.transientValue.<set-transientValue>|<set-transientValue>(kotlin.String?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Key|null[0]
            final const val strategy // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Key.strategy|{}strategy[0]
                final fun <get-strategy>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Key.strategy.<get-strategy>|<get-strategy>(){}[0]
            final const val transientValue // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Key.transientValue|{}transientValue[0]
                final fun <get-transientValue>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Key.transientValue.<get-transientValue>|<get-transientValue>(){}[0]
        }

        final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Value|null[0]
            final object Strategy { // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Value.Strategy|null[0]
                final const val singleUse // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Value.Strategy.singleUse|{}singleUse[0]
                    final fun <get-singleUse>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Value.Strategy.singleUse.<get-singleUse>|<get-singleUse>(){}[0]
                final const val transient // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Value.Strategy.transient|{}transient[0]
                    final fun <get-transient>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material.setting.page/PageSettingSchema.Ttl.Value.Strategy.transient.<get-transient>|<get-transient>(){}[0]
            }
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var default // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.default|{}default[0]
            final fun <get-default>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.default.<get-default>|<get-default>(){}[0]
            final fun <set-default>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.default.<set-default>|<set-default>(kotlin.String?){}[0]
        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Scope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Key|null[0]
        final const val default // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Key.default|{}default[0]
            final fun <get-default>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Key.default.<get-default>|<get-default>(){}[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
            final const val palette // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Value.Group.palette|{}palette[0]
                final fun <get-palette>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ColorSchema.Value.Group.palette.<get-palette>|<get-palette>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema|null[0]
    final val contentOrNull // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.contentOrNull|@kotlinx.serialization.json.JsonObject{}contentOrNull[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-contentOrNull>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.contentOrNull.<get-contentOrNull>|<get-contentOrNull>@kotlinx.serialization.json.JsonObject(){}[0]
    final val messageOrNull // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.messageOrNull|@kotlinx.serialization.json.JsonObject{}messageOrNull[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-messageOrNull>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.messageOrNull.<get-messageOrNull>|<get-messageOrNull>@kotlinx.serialization.json.JsonObject(){}[0]
    final val optionOrNull // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.optionOrNull|@kotlinx.serialization.json.JsonObject{}optionOrNull[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-optionOrNull>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.optionOrNull.<get-optionOrNull>|<get-optionOrNull>@kotlinx.serialization.json.JsonObject(){}[0]
    final val stateOrNull // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.stateOrNull|@kotlinx.serialization.json.JsonObject{}stateOrNull[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-stateOrNull>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.stateOrNull.<get-stateOrNull>|<get-stateOrNull>@kotlinx.serialization.json.JsonObject(){}[0]
    final val styleOrNull // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.styleOrNull|@kotlinx.serialization.json.JsonObject{}styleOrNull[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-styleOrNull>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.styleOrNull.<get-styleOrNull>|<get-styleOrNull>@kotlinx.serialization.json.JsonObject(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
    }

    open class <#A1: com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope<#A1>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.root.<get-root>|<get-root>(){}[0]

        final var content // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.content|{}content[0]
            final fun <get-content>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.content.<get-content>|<get-content>(){}[0]
            final fun <set-content>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.content.<set-content>|<set-content>(kotlinx.serialization.json.JsonObject?){}[0]
        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var message // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.message|{}message[0]
            final fun <get-message>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.message.<get-message>|<get-message>(){}[0]
            final fun <set-message>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.message.<set-message>|<set-message>(kotlinx.serialization.json.JsonObject?){}[0]
        final var option // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.option|{}option[0]
            final fun <get-option>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.option.<get-option>|<get-option>(){}[0]
            final fun <set-option>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.option.<set-option>|<set-option>(kotlinx.serialization.json.JsonObject?){}[0]
        final var setting // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.setting|{}setting[0]
            final fun <get-setting>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.setting.<get-setting>|<get-setting>(){}[0]
            final fun <set-setting>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.setting.<set-setting>|<set-setting>(kotlinx.serialization.json.JsonObject?){}[0]
        final var state // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.state|{}state[0]
            final fun <get-state>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.state.<get-state>|<get-state>(){}[0]
            final fun <set-state>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.state.<set-state>|<set-state>(kotlinx.serialization.json.JsonObject?){}[0]
        final var style // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.style|{}style[0]
            final fun <get-style>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.style.<get-style>|<get-style>(){}[0]
            final fun <set-style>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.style.<set-style>|<set-style>(kotlinx.serialization.json.JsonObject?){}[0]
        final var subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.subset.<get-subset>|<get-subset>(){}[0]
            final fun <set-subset>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.subset.<set-subset>|<set-subset>(kotlin.String?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key|null[0]
        final const val content // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.content|{}content[0]
            final fun <get-content>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.content.<get-content>|<get-content>(){}[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val message // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.message|{}message[0]
            final fun <get-message>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.message.<get-message>|<get-message>(){}[0]
        final const val option // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.option|{}option[0]
            final fun <get-option>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.option.<get-option>|<get-option>(){}[0]
        final const val setting // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.setting|{}setting[0]
            final fun <get-setting>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.setting.<get-setting>|<get-setting>(){}[0]
        final const val state // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.state|{}state[0]
            final fun <get-state>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.state.<get-state>|<get-state>(){}[0]
        final const val style // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.style|{}style[0]
            final fun <get-style>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.style.<get-style>|<get-style>(){}[0]
        final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.subset.<get-subset>|<get-subset>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/ComponentSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var default // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.default|{}default[0]
            final fun <get-default>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.default.<get-default>|<get-default>(){}[0]
            final fun <set-default>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.default.<set-default>|<set-default>(kotlin.String?){}[0]
        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Scope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Key|null[0]
        final const val default // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Key.default|{}default[0]
            final fun <get-default>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Key.default.<get-default>|<get-default>(){}[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
            final const val font // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Value.Group.font|{}font[0]
                final fun <get-font>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Value.Group.font.<get-font>|<get-font>(){}[0]
            final const val padding // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Value.Group.padding|{}padding[0]
                final fun <get-padding>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/DimensionSchema.Value.Group.padding.<get-padding>|<get-padding>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.root.<get-root>|<get-root>(){}[0]

    final val idSourceOrNull // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.idSourceOrNull|@kotlinx.serialization.json.JsonObject{}idSourceOrNull[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-idSourceOrNull>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.idSourceOrNull.<get-idSourceOrNull>|<get-idSourceOrNull>@kotlinx.serialization.json.JsonObject(){}[0]
    final val idValue // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.idValue|@kotlinx.serialization.json.JsonObject{}idValue[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-idValue>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.idValue.<get-idValue>|<get-idValue>@kotlinx.serialization.json.JsonObject(){}[0]
    final val isRef // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.isRef|@kotlin.String{}isRef[0]
        final fun (kotlin/String).<get-isRef>(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.isRef.<get-isRef>|<get-isRef>@kotlin.String(){}[0]

    final fun (kotlin/String).addGroup(kotlin/String): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.addGroup|addGroup@kotlin.String(kotlin.String){}[0]
    final fun (kotlin/String).hasGroup(): kotlin/Boolean // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.hasGroup|hasGroup@kotlin.String(){}[0]
    final fun (kotlin/String).requireIsRef(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.requireIsRef|requireIsRef@kotlin.String(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var idAutoGenerated // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.idAutoGenerated|{}idAutoGenerated[0]
            final fun <get-idAutoGenerated>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.idAutoGenerated.<get-idAutoGenerated>|<get-idAutoGenerated>(){}[0]
            final fun <set-idAutoGenerated>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.idAutoGenerated.<set-idAutoGenerated>|<set-idAutoGenerated>(kotlin.Boolean?){}[0]
        final var self // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.self|{}self[0]
            final fun <get-self>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.self.<get-self>|<get-self>(){}[0]
            final fun <set-self>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.self.<set-self>|<set-self>(kotlinx.serialization.json.JsonElement?){}[0]
        final var source // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.source|{}source[0]
            final fun <get-source>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.source.<get-source>|<get-source>(){}[0]
            final fun <set-source>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.source.<set-source>|<set-source>(kotlin.String?){}[0]
        final var urlSource // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.urlSource|{}urlSource[0]
            final fun <get-urlSource>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.urlSource.<get-urlSource>|<get-urlSource>(){}[0]
            final fun <set-urlSource>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.urlSource.<set-urlSource>|<set-urlSource>(kotlinx.serialization.json.JsonObject?){}[0]
        final var value // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.value|{}value[0]
            final fun <get-value>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.value.<get-value>|<get-value>(){}[0]
            final fun <set-value>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Scope.value.<set-value>|<set-value>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key|null[0]
        final const val id_auto_generated // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key.id_auto_generated|{}id_auto_generated[0]
            final fun <get-id_auto_generated>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key.id_auto_generated.<get-id_auto_generated>|<get-id_auto_generated>(){}[0]
        final const val source // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key.source|{}source[0]
            final fun <get-source>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key.source.<get-source>|<get-source>(){}[0]
        final const val urlSource // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key.urlSource|{}urlSource[0]
            final fun <get-urlSource>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key.urlSource.<get-urlSource>|<get-urlSource>(){}[0]
        final const val value // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key.value|{}value[0]
            final fun <get-value>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/IdSchema.Key.value.<get-value>|<get-value>(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema|null[0]
    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final var actions // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.actions|{}actions[0]
            final fun <get-actions>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.actions.<get-actions>|<get-actions>(){}[0]
            final fun <set-actions>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.actions.<set-actions>|<set-actions>(kotlinx.serialization.json.JsonElement?){}[0]
        final var colors // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.colors|{}colors[0]
            final fun <get-colors>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.colors.<get-colors>|<get-colors>(){}[0]
            final fun <set-colors>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.colors.<set-colors>|<set-colors>(kotlinx.serialization.json.JsonElement?){}[0]
        final var components // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.components|{}components[0]
            final fun <get-components>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.components.<get-components>|<get-components>(){}[0]
            final fun <set-components>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.components.<set-components>|<set-components>(kotlinx.serialization.json.JsonElement?){}[0]
        final var contents // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.contents|{}contents[0]
            final fun <get-contents>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.contents.<get-contents>|<get-contents>(){}[0]
            final fun <set-contents>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.contents.<set-contents>|<set-contents>(kotlinx.serialization.json.JsonElement?){}[0]
        final var dimensions // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.dimensions|{}dimensions[0]
            final fun <get-dimensions>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.dimensions.<get-dimensions>|<get-dimensions>(){}[0]
            final fun <set-dimensions>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.dimensions.<set-dimensions>|<set-dimensions>(kotlinx.serialization.json.JsonElement?){}[0]
        final var options // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.options|{}options[0]
            final fun <get-options>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.options.<get-options>|<get-options>(){}[0]
            final fun <set-options>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.options.<set-options>|<set-options>(kotlinx.serialization.json.JsonElement?){}[0]
        final var pageSetting // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.pageSetting|{}pageSetting[0]
            final fun <get-pageSetting>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.pageSetting.<get-pageSetting>|<get-pageSetting>(){}[0]
            final fun <set-pageSetting>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.pageSetting.<set-pageSetting>|<set-pageSetting>(kotlinx.serialization.json.JsonObject?){}[0]
        final var rootComponent // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.rootComponent|{}rootComponent[0]
            final fun <get-rootComponent>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.rootComponent.<get-rootComponent>|<get-rootComponent>(){}[0]
            final fun <set-rootComponent>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.rootComponent.<set-rootComponent>|<set-rootComponent>(kotlinx.serialization.json.JsonObject?){}[0]
        final var states // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.states|{}states[0]
            final fun <get-states>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.states.<get-states>|<get-states>(){}[0]
            final fun <set-states>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.states.<set-states>|<set-states>(kotlinx.serialization.json.JsonElement?){}[0]
        final var styles // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.styles|{}styles[0]
            final fun <get-styles>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.styles.<get-styles>|<get-styles>(){}[0]
            final fun <set-styles>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.styles.<set-styles>|<set-styles>(kotlinx.serialization.json.JsonElement?){}[0]
        final var texts // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.texts|{}texts[0]
            final fun <get-texts>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.texts.<get-texts>|<get-texts>(){}[0]
            final fun <set-texts>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Scope.texts.<set-texts>|<set-texts>(kotlinx.serialization.json.JsonElement?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key|null[0]
        final const val actions // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.actions|{}actions[0]
            final fun <get-actions>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.actions.<get-actions>|<get-actions>(){}[0]
        final const val colors // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.colors|{}colors[0]
            final fun <get-colors>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.colors.<get-colors>|<get-colors>(){}[0]
        final const val components // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.components|{}components[0]
            final fun <get-components>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.components.<get-components>|<get-components>(){}[0]
        final const val contents // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.contents|{}contents[0]
            final fun <get-contents>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.contents.<get-contents>|<get-contents>(){}[0]
        final const val dimensions // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.dimensions|{}dimensions[0]
            final fun <get-dimensions>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.dimensions.<get-dimensions>|<get-dimensions>(){}[0]
        final const val options // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.options|{}options[0]
            final fun <get-options>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.options.<get-options>|<get-options>(){}[0]
        final const val pageSetting // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.pageSetting|{}pageSetting[0]
            final fun <get-pageSetting>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.pageSetting.<get-pageSetting>|<get-pageSetting>(){}[0]
        final const val rootComponent // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.rootComponent|{}rootComponent[0]
            final fun <get-rootComponent>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.rootComponent.<get-rootComponent>|<get-rootComponent>(){}[0]
        final const val states // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.states|{}states[0]
            final fun <get-states>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.states.<get-states>|<get-states>(){}[0]
        final const val styles // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.styles|{}styles[0]
            final fun <get-styles>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.styles.<get-styles>|<get-styles>(){}[0]
        final const val texts // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.texts|{}texts[0]
            final fun <get-texts>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MaterialSchema.Key.texts.<get-texts>|<get-texts>(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
    }

    open class <#A1: com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope<#A1>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.root.<get-root>|<get-root>(){}[0]

        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.subset.<get-subset>|<get-subset>(){}[0]
            final fun <set-subset>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.subset.<set-subset>|<set-subset>(kotlin.String?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Key|null[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Key.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Key.subset.<get-subset>|<get-subset>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/MessageSchema.Key.type.<get-type>|<get-type>(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
    }

    open class <#A1: com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope<#A1>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.root.<get-root>|<get-root>(){}[0]

        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.subset.<get-subset>|<get-subset>(){}[0]
            final fun <set-subset>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.subset.<set-subset>|<set-subset>(kotlin.String?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Key|null[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Key.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Key.subset.<get-subset>|<get-subset>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/OptionSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/Shadower { // com.tezov.tuucho.core.domain.business.jsonSchema.material/Shadower|null[0]
    final object Contextual { // com.tezov.tuucho.core.domain.business.jsonSchema.material/Shadower.Contextual|null[0]
        final fun (kotlin/String).replaceUrlOriginToken(kotlin/String): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/Shadower.Contextual.replaceUrlOriginToken|replaceUrlOriginToken@kotlin.String(kotlin.String){}[0]
        final fun defaultUrl(kotlin/String): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/Shadower.Contextual.defaultUrl|defaultUrl(kotlin.String){}[0]
    }

    final object Type { // com.tezov.tuucho.core.domain.business.jsonSchema.material/Shadower.Type|null[0]
        final const val contextual // com.tezov.tuucho.core.domain.business.jsonSchema.material/Shadower.Type.contextual|{}contextual[0]
            final fun <get-contextual>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/Shadower.Type.contextual.<get-contextual>|<get-contextual>(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
    }

    open class <#A1: com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope<#A1>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.root.<get-root>|<get-root>(){}[0]

        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.subset.<get-subset>|<get-subset>(){}[0]
            final fun <set-subset>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.subset.<set-subset>|<set-subset>(kotlin.String?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Key|null[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Key.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Key.subset.<get-subset>|<get-subset>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StateSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]
    }

    open class <#A1: com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope<#A1>> OpenScope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A1> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.root.<get-root>|<get-root>(){}[0]

        final var height // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.height|{}height[0]
            final fun <get-height>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.height.<get-height>|<get-height>(){}[0]
            final fun <set-height>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.height.<set-height>|<set-height>(kotlinx.serialization.json.JsonObject?){}[0]
        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.subset.<get-subset>|<get-subset>(){}[0]
            final fun <set-subset>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.subset.<set-subset>|<set-subset>(kotlin.String?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.type.<set-type>|<set-type>(kotlin.String?){}[0]
        final var width // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.width|{}width[0]
            final fun <get-width>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.width.<get-width>|<get-width>(){}[0]
            final fun <set-width>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.OpenScope.width.<set-width>|<set-width>(kotlinx.serialization.json.JsonObject?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key|null[0]
        final const val height // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.height|{}height[0]
            final fun <get-height>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.height.<get-height>|<get-height>(){}[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val subset // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.subset|{}subset[0]
            final fun <get-subset>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.subset.<get-subset>|<get-subset>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.type.<get-type>|<get-type>(){}[0]
        final const val width // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.width|{}width[0]
            final fun <get-width>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Key.width.<get-width>|<get-width>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/StyleSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var self // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Scope.self|{}self[0]
            final fun <get-self>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Scope.self.<get-self>|<get-self>(){}[0]
            final fun <set-self>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Scope.self.<set-self>|<set-self>(kotlin.String?){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value|null[0]
        final const val button // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.button|{}button[0]
            final fun <get-button>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.button.<get-button>|<get-button>(){}[0]
        final const val field // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.field|{}field[0]
            final fun <get-field>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.field.<get-field>|<get-field>(){}[0]
        final const val label // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.label|{}label[0]
            final fun <get-label>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.label.<get-label>|<get-label>(){}[0]
        final const val layoutLinear // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.layoutLinear|{}layoutLinear[0]
            final fun <get-layoutLinear>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.layoutLinear.<get-layoutLinear>|<get-layoutLinear>(){}[0]
        final const val spacer // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.spacer|{}spacer[0]
            final fun <get-spacer>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.spacer.<get-spacer>|<get-spacer>(){}[0]
        final const val unknown // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.unknown|{}unknown[0]
            final fun <get-unknown>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/SubsetSchema.Value.unknown.<get-unknown>|<get-unknown>(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.root.<get-root>|<get-root>(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var default // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.default|{}default[0]
            final fun <get-default>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.default.<get-default>|<get-default>(){}[0]
            final fun <set-default>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.default.<set-default>|<set-default>(kotlin.String?){}[0]
        final var id // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.id|{}id[0]
            final fun <get-id>(): kotlinx.serialization.json/JsonElement? // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.id.<get-id>|<get-id>(){}[0]
            final fun <set-id>(kotlinx.serialization.json/JsonElement?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.id.<set-id>|<set-id>(kotlinx.serialization.json.JsonElement?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Scope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Key|null[0]
        final const val default // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Key.default|{}default[0]
            final fun <get-default>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Key.default.<get-default>|<get-default>(){}[0]
        final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Key.id|{}id[0]
            final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Key.id.<get-id>|<get-id>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Key.type.<get-type>|<get-type>(){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Value|null[0]
        final object Group { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Value.Group|null[0]
            final const val common // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Value.Group.common|{}common[0]
                final fun <get-common>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TextSchema.Value.Group.common.<get-common>|<get-common>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.root.<get-root>|<get-root>(){}[0]

    final val type // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.type|@kotlinx.serialization.json.JsonObject{}type[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.type.<get-type>|<get-type>@kotlinx.serialization.json.JsonObject(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var self // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Scope.self|{}self[0]
            final fun <get-self>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Scope.self.<get-self>|<get-self>(){}[0]
            final fun <set-self>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Scope.self.<set-self>|<set-self>(kotlin.String?){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value|null[0]
        final const val action // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.action|{}action[0]
            final fun <get-action>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.action.<get-action>|<get-action>(){}[0]
        final const val color // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.color|{}color[0]
            final fun <get-color>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.color.<get-color>|<get-color>(){}[0]
        final const val component // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.component|{}component[0]
            final fun <get-component>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.component.<get-component>|<get-component>(){}[0]
        final const val content // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.content|{}content[0]
            final fun <get-content>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.content.<get-content>|<get-content>(){}[0]
        final const val dimension // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.dimension|{}dimension[0]
            final fun <get-dimension>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.dimension.<get-dimension>|<get-dimension>(){}[0]
        final const val message // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.message|{}message[0]
            final fun <get-message>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.message.<get-message>|<get-message>(){}[0]
        final const val option // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.option|{}option[0]
            final fun <get-option>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.option.<get-option>|<get-option>(){}[0]
        final const val state // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.state|{}state[0]
            final fun <get-state>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.state.<get-state>|<get-state>(){}[0]
        final const val style // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.style|{}style[0]
            final fun <get-style>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.style.<get-style>|<get-style>(){}[0]
        final const val text // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.text|{}text[0]
            final fun <get-text>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.text.<get-text>|<get-text>(){}[0]

        final object Setting { // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.Setting|null[0]
            final const val component // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.Setting.component|{}component[0]
                final fun <get-component>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.Setting.component.<get-component>|<get-component>(){}[0]
            final const val page // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.Setting.page|{}page[0]
                final fun <get-page>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.Setting.page.<get-page>|<get-page>(){}[0]
            final const val prefix // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.Setting.prefix|{}prefix[0]
                final fun <get-prefix>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.material/TypeSchema.Value.Setting.prefix.<get-prefix>|<get-prefix>(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema|null[0]
    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final var action // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.action|{}action[0]
            final fun <get-action>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.action.<get-action>|<get-action>(){}[0]
            final fun <set-action>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.action.<set-action>|<set-action>(kotlinx.serialization.json.JsonObject?){}[0]
        final var allSucceed // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.allSucceed|{}allSucceed[0]
            final fun <get-allSucceed>(): kotlin/Boolean? // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.allSucceed.<get-allSucceed>|<get-allSucceed>(){}[0]
            final fun <set-allSucceed>(kotlin/Boolean?) // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.allSucceed.<set-allSucceed>|<set-allSucceed>(kotlin.Boolean?){}[0]
        final var failureResult // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.failureResult|{}failureResult[0]
            final fun <get-failureResult>(): kotlinx.serialization.json/JsonArray? // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.failureResult.<get-failureResult>|<get-failureResult>(){}[0]
            final fun <set-failureResult>(kotlinx.serialization.json/JsonArray?) // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.failureResult.<set-failureResult>|<set-failureResult>(kotlinx.serialization.json.JsonArray?){}[0]
        final var type // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.type|{}type[0]
            final fun <get-type>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.type.<get-type>|<get-type>(){}[0]
            final fun <set-type>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Scope.type.<set-type>|<set-type>(kotlin.String?){}[0]
    }

    final object FailureResult { // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult|null[0]
        final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.root.<get-root>|<get-root>(){}[0]

        final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope|null[0]
            constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

            final val root // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.root|{}root[0]
                final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.root.<get-root>|<get-root>(){}[0]

            final var id // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.id|{}id[0]
                final fun <get-id>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.id.<get-id>|<get-id>(){}[0]
                final fun <set-id>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.id.<set-id>|<set-id>(kotlin.String?){}[0]
            final var reason // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.reason|{}reason[0]
                final fun <get-reason>(): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.reason.<get-reason>|<get-reason>(){}[0]
                final fun <set-reason>(kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Scope.reason.<set-reason>|<set-reason>(kotlinx.serialization.json.JsonObject?){}[0]
        }

        final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Key|null[0]
            final const val id // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Key.id|{}id[0]
                final fun <get-id>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Key.id.<get-id>|<get-id>(){}[0]
            final const val reason // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Key.reason|{}reason[0]
                final fun <get-reason>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.FailureResult.Key.reason.<get-reason>|<get-reason>(){}[0]
        }
    }

    final object Key { // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key|null[0]
        final const val action // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key.action|{}action[0]
            final fun <get-action>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key.action.<get-action>|<get-action>(){}[0]
        final const val allSucceed // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key.allSucceed|{}allSucceed[0]
            final fun <get-allSucceed>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key.allSucceed.<get-allSucceed>|<get-allSucceed>(){}[0]
        final const val failureResult // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key.failureResult|{}failureResult[0]
            final fun <get-failureResult>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key.failureResult.<get-failureResult>|<get-failureResult>(){}[0]
        final const val type // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key.type|{}type[0]
            final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/FormSendResponseSchema.Key.type.<get-type>|<get-type>(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema { // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema|null[0]
    final const val root // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.root|{}root[0]
        final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.root.<get-root>|<get-root>(){}[0]

    final val type // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.type|@kotlinx.serialization.json.JsonObject{}type[0]
        final fun (kotlinx.serialization.json/JsonObject).<get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.type.<get-type>|<get-type>@kotlinx.serialization.json.JsonObject(){}[0]

    final class Scope : com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Scope> { // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Scope|null[0]
        constructor <init>(com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument) // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Scope.<init>|<init>(com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument){}[0]

        final val root // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Scope.root|{}root[0]
            final fun <get-root>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Scope.root.<get-root>|<get-root>(){}[0]

        final var self // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Scope.self|{}self[0]
            final fun <get-self>(): kotlin/String? // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Scope.self.<get-self>|<get-self>(){}[0]
            final fun <set-self>(kotlin/String?) // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Scope.self.<set-self>|<set-self>(kotlin.String?){}[0]
    }

    final object Value { // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Value|null[0]
        final const val form // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Value.form|{}form[0]
            final fun <get-form>(): kotlin/String // com.tezov.tuucho.core.domain.business.jsonSchema.response/TypeResponseSchema.Value.form.<get-form>|<get-form>(){}[0]
    }
}

final object com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware { // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware|null[0]
    abstract fun interface Back : com.tezov.tuucho.core.domain.business.middleware/MiddlewareProtocol<com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context> { // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back|null[0]
        final class Context { // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context|null[0]
            constructor <init>(kotlin/String, kotlin/String?, kotlin/Function3<kotlin/Throwable, com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>?) // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.<init>|<init>(kotlin.String;kotlin.String?;kotlin.Function3<kotlin.Throwable,com.tezov.tuucho.core.domain.business.middleware.NavigationMiddleware.Back.Context,kotlin.coroutines.SuspendFunction0<kotlin.Unit>,kotlin.Unit>?){}[0]

            final val currentUrl // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.currentUrl|{}currentUrl[0]
                final fun <get-currentUrl>(): kotlin/String // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.currentUrl.<get-currentUrl>|<get-currentUrl>(){}[0]
            final val nextUrl // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.nextUrl|{}nextUrl[0]
                final fun <get-nextUrl>(): kotlin/String? // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.nextUrl.<get-nextUrl>|<get-nextUrl>(){}[0]
            final val onShadowerException // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.onShadowerException|{}onShadowerException[0]
                final fun <get-onShadowerException>(): kotlin/Function3<kotlin/Throwable, com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>? // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.onShadowerException.<get-onShadowerException>|<get-onShadowerException>(){}[0]

            final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.component1|component1(){}[0]
            final fun component2(): kotlin/String? // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.component2|component2(){}[0]
            final fun component3(): kotlin/Function3<kotlin/Throwable, com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>? // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.component3|component3(){}[0]
            final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/Function3<kotlin/Throwable, com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>? = ...): com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.copy|copy(kotlin.String;kotlin.String?;kotlin.Function3<kotlin.Throwable,com.tezov.tuucho.core.domain.business.middleware.NavigationMiddleware.Back.Context,kotlin.coroutines.SuspendFunction0<kotlin.Unit>,kotlin.Unit>?){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.Back.Context.toString|toString(){}[0]
        }
    }

    abstract fun interface ToUrl : com.tezov.tuucho.core.domain.business.middleware/MiddlewareProtocol<com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context> { // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl|null[0]
        final class Context { // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context|null[0]
            constructor <init>(kotlin/String?, com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input, kotlin.coroutines/SuspendFunction3<kotlin/Throwable, com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>?) // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.<init>|<init>(kotlin.String?;com.tezov.tuucho.core.domain.business.usecase.withNetwork.NavigateToUrlUseCase.Input;kotlin.coroutines.SuspendFunction3<kotlin.Throwable,com.tezov.tuucho.core.domain.business.middleware.NavigationMiddleware.ToUrl.Context,kotlin.coroutines.SuspendFunction0<kotlin.Unit>,kotlin.Unit>?){}[0]

            final val currentUrl // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.currentUrl|{}currentUrl[0]
                final fun <get-currentUrl>(): kotlin/String? // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.currentUrl.<get-currentUrl>|<get-currentUrl>(){}[0]
            final val input // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.input|{}input[0]
                final fun <get-input>(): com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.input.<get-input>|<get-input>(){}[0]
            final val onShadowerException // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.onShadowerException|{}onShadowerException[0]
                final fun <get-onShadowerException>(): kotlin.coroutines/SuspendFunction3<kotlin/Throwable, com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>? // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.onShadowerException.<get-onShadowerException>|<get-onShadowerException>(){}[0]

            final fun component1(): kotlin/String? // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.component1|component1(){}[0]
            final fun component2(): com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.component2|component2(){}[0]
            final fun component3(): kotlin.coroutines/SuspendFunction3<kotlin/Throwable, com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>? // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.component3|component3(){}[0]
            final fun copy(kotlin/String? = ..., com.tezov.tuucho.core.domain.business.usecase.withNetwork/NavigateToUrlUseCase.Input = ..., kotlin.coroutines/SuspendFunction3<kotlin/Throwable, com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context, kotlin.coroutines/SuspendFunction0<kotlin/Unit>, kotlin/Unit>? = ...): com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.copy|copy(kotlin.String?;com.tezov.tuucho.core.domain.business.usecase.withNetwork.NavigateToUrlUseCase.Input;kotlin.coroutines.SuspendFunction3<kotlin.Throwable,com.tezov.tuucho.core.domain.business.middleware.NavigationMiddleware.ToUrl.Context,kotlin.coroutines.SuspendFunction0<kotlin.Unit>,kotlin.Unit>?){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.middleware/NavigationMiddleware.ToUrl.Context.toString|toString(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.model/Action { // com.tezov.tuucho.core.domain.business.model/Action|null[0]
    final object Form { // com.tezov.tuucho.core.domain.business.model/Action.Form|null[0]
        final const val command // com.tezov.tuucho.core.domain.business.model/Action.Form.command|{}command[0]
            final fun <get-command>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Form.command.<get-command>|<get-command>(){}[0]

        final object Send { // com.tezov.tuucho.core.domain.business.model/Action.Form.Send|null[0]
            final const val authority // com.tezov.tuucho.core.domain.business.model/Action.Form.Send.authority|{}authority[0]
                final fun <get-authority>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Form.Send.authority.<get-authority>|<get-authority>(){}[0]

            final object ActionLabel { // com.tezov.tuucho.core.domain.business.model/Action.Form.Send.ActionLabel|null[0]
                final const val denied // com.tezov.tuucho.core.domain.business.model/Action.Form.Send.ActionLabel.denied|{}denied[0]
                    final fun <get-denied>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Form.Send.ActionLabel.denied.<get-denied>|<get-denied>(){}[0]
                final const val validated // com.tezov.tuucho.core.domain.business.model/Action.Form.Send.ActionLabel.validated|{}validated[0]
                    final fun <get-validated>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Form.Send.ActionLabel.validated.<get-validated>|<get-validated>(){}[0]
            }
        }

        final object Update { // com.tezov.tuucho.core.domain.business.model/Action.Form.Update|null[0]
            final const val authority // com.tezov.tuucho.core.domain.business.model/Action.Form.Update.authority|{}authority[0]
                final fun <get-authority>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Form.Update.authority.<get-authority>|<get-authority>(){}[0]

            final object Target { // com.tezov.tuucho.core.domain.business.model/Action.Form.Update.Target|null[0]
                final const val error // com.tezov.tuucho.core.domain.business.model/Action.Form.Update.Target.error|{}error[0]
                    final fun <get-error>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Form.Update.Target.error.<get-error>|<get-error>(){}[0]
            }
        }
    }

    final object Navigate { // com.tezov.tuucho.core.domain.business.model/Action.Navigate|null[0]
        final const val command // com.tezov.tuucho.core.domain.business.model/Action.Navigate.command|{}command[0]
            final fun <get-command>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Navigate.command.<get-command>|<get-command>(){}[0]

        final object LocalDestination { // com.tezov.tuucho.core.domain.business.model/Action.Navigate.LocalDestination|null[0]
            final const val authority // com.tezov.tuucho.core.domain.business.model/Action.Navigate.LocalDestination.authority|{}authority[0]
                final fun <get-authority>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Navigate.LocalDestination.authority.<get-authority>|<get-authority>(){}[0]

            final object Target { // com.tezov.tuucho.core.domain.business.model/Action.Navigate.LocalDestination.Target|null[0]
                final const val back // com.tezov.tuucho.core.domain.business.model/Action.Navigate.LocalDestination.Target.back|{}back[0]
                    final fun <get-back>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Navigate.LocalDestination.Target.back.<get-back>|<get-back>(){}[0]
                final const val finish // com.tezov.tuucho.core.domain.business.model/Action.Navigate.LocalDestination.Target.finish|{}finish[0]
                    final fun <get-finish>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Navigate.LocalDestination.Target.finish.<get-finish>|<get-finish>(){}[0]
            }
        }

        final object Url { // com.tezov.tuucho.core.domain.business.model/Action.Navigate.Url|null[0]
            final const val authority // com.tezov.tuucho.core.domain.business.model/Action.Navigate.Url.authority|{}authority[0]
                final fun <get-authority>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Navigate.Url.authority.<get-authority>|<get-authority>(){}[0]
        }
    }

    final object Store { // com.tezov.tuucho.core.domain.business.model/Action.Store|null[0]
        final const val command // com.tezov.tuucho.core.domain.business.model/Action.Store.command|{}command[0]
            final fun <get-command>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Store.command.<get-command>|<get-command>(){}[0]

        final object KeyValue { // com.tezov.tuucho.core.domain.business.model/Action.Store.KeyValue|null[0]
            final const val authority // com.tezov.tuucho.core.domain.business.model/Action.Store.KeyValue.authority|{}authority[0]
                final fun <get-authority>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Store.KeyValue.authority.<get-authority>|<get-authority>(){}[0]

            final object Target { // com.tezov.tuucho.core.domain.business.model/Action.Store.KeyValue.Target|null[0]
                final const val remove // com.tezov.tuucho.core.domain.business.model/Action.Store.KeyValue.Target.remove|{}remove[0]
                    final fun <get-remove>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Store.KeyValue.Target.remove.<get-remove>|<get-remove>(){}[0]
                final const val save // com.tezov.tuucho.core.domain.business.model/Action.Store.KeyValue.Target.save|{}save[0]
                    final fun <get-save>(): kotlin/String // com.tezov.tuucho.core.domain.business.model/Action.Store.KeyValue.Target.save.<get-save>|<get-save>(){}[0]
            }
        }
    }
}

final object com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol { // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol|null[0]
    abstract interface RefreshCache { // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.RefreshCache|null[0]
        abstract suspend fun process(kotlin/String) // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.RefreshCache.process|process(kotlin.String){}[0]
    }

    abstract interface Retrieve { // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Retrieve|null[0]
        abstract suspend fun process(kotlin/String): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Retrieve.process|process(kotlin.String){}[0]
    }

    abstract interface SendDataAndRetrieve { // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.SendDataAndRetrieve|null[0]
        abstract suspend fun process(kotlin/String, kotlinx.serialization.json/JsonObject): kotlinx.serialization.json/JsonObject? // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.SendDataAndRetrieve.process|process(kotlin.String;kotlinx.serialization.json.JsonObject){}[0]
    }

    abstract interface Shadower { // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower|null[0]
        abstract suspend fun process(kotlin/String, kotlinx.serialization.json/JsonObject, kotlin.collections/List<kotlin/String>): kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output> // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.process|process(kotlin.String;kotlinx.serialization.json.JsonObject;kotlin.collections.List<kotlin.String>){}[0]

        final class Output { // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output|null[0]
            constructor <init>(kotlin/String, kotlin/String, kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.<init>|<init>(kotlin.String;kotlin.String;kotlinx.serialization.json.JsonObject){}[0]

            final val jsonObject // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.jsonObject|{}jsonObject[0]
                final fun <get-jsonObject>(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.jsonObject.<get-jsonObject>|<get-jsonObject>(){}[0]
            final val type // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.type|{}type[0]
                final fun <get-type>(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.type.<get-type>|<get-type>(){}[0]
            final val url // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.url|{}url[0]
                final fun <get-url>(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.url.<get-url>|<get-url>(){}[0]

            final fun component1(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.component1|component1(){}[0]
            final fun component2(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.component2|component2(){}[0]
            final fun component3(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.component3|component3(){}[0]
            final fun copy(kotlin/String = ..., kotlin/String = ..., kotlinx.serialization.json/JsonObject = ...): com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.copy|copy(kotlin.String;kotlin.String;kotlinx.serialization.json.JsonObject){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/MaterialRepositoryProtocol.Shadower.Output.toString|toString(){}[0]
        }
    }
}

final object com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol|null[0]
    abstract interface StackRoute { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute|null[0]
        abstract suspend fun backward(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url? // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute.backward|backward(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute){}[0]
        abstract suspend fun currentRoute(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url? // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute.currentRoute|currentRoute(){}[0]
        abstract suspend fun forward(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, kotlinx.serialization.json/JsonObject?): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url? // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute.forward|forward(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;kotlinx.serialization.json.JsonObject?){}[0]
        abstract suspend fun priorRoute(): com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url? // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute.priorRoute|priorRoute(){}[0]
        abstract suspend fun routes(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackRoute.routes|routes(){}[0]
    }

    abstract interface StackScreen { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen|null[0]
        abstract suspend fun backward(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>) // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen.backward|backward(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]
        abstract suspend fun forward(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url, kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen.forward|forward(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url;kotlinx.serialization.json.JsonObject){}[0]
        abstract suspend fun getScreenOrNull(com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url): com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol? // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen.getScreenOrNull|getScreenOrNull(com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url){}[0]
        abstract suspend fun getScreens(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>): kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen.getScreens|getScreens(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]
        abstract suspend fun getScreensOrNull(kotlin/String): kotlin.collections/List<com.tezov.tuucho.core.domain.business.protocol.screen/ScreenProtocol>? // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen.getScreensOrNull|getScreensOrNull(kotlin.String){}[0]
        abstract suspend fun routes(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackScreen.routes|routes(){}[0]
    }

    abstract interface StackTransition { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition|null[0]
        abstract val events // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.events|{}events[0]
            abstract fun <get-events>(): com.tezov.tuucho.core.domain.tool.async/Notifier.Collector<com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.events.<get-events>|<get-events>(){}[0]

        abstract suspend fun backward(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>) // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.backward|backward(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]
        abstract suspend fun forward(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>, kotlinx.serialization.json/JsonObject?, kotlinx.serialization.json/JsonObject?) // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.forward|forward(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>;kotlinx.serialization.json.JsonObject?;kotlinx.serialization.json.JsonObject?){}[0]
        abstract suspend fun notifyTransitionCompleted() // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.notifyTransitionCompleted|notifyTransitionCompleted(){}[0]
        abstract suspend fun routes(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.routes|routes(){}[0]

        sealed class Event { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event|null[0]
            final class Idle : com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle|null[0]
                constructor <init>(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>) // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle.<init>|<init>(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]

                final val routes // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle.routes|{}routes[0]
                    final fun <get-routes>(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle.routes.<get-routes>|<get-routes>(){}[0]

                final fun component1(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle.component1|component1(){}[0]
                final fun copy(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> = ...): com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle.copy|copy(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>){}[0]
                final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle.hashCode|hashCode(){}[0]
                final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.Idle.toString|toString(){}[0]
            }

            final class RequestTransition : com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition|null[0]
                constructor <init>(com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group, com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group) // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.<init>|<init>(com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group){}[0]

                final val backgroundGroup // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.backgroundGroup|{}backgroundGroup[0]
                    final fun <get-backgroundGroup>(): com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.backgroundGroup.<get-backgroundGroup>|<get-backgroundGroup>(){}[0]
                final val foregroundGroup // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.foregroundGroup|{}foregroundGroup[0]
                    final fun <get-foregroundGroup>(): com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.foregroundGroup.<get-foregroundGroup>|<get-foregroundGroup>(){}[0]

                final fun component1(): com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.component1|component1(){}[0]
                final fun component2(): com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.component2|component2(){}[0]
                final fun copy(com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group = ..., com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group = ...): com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.copy|copy(com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group;com.tezov.tuucho.core.domain.business.protocol.repository.NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group){}[0]
                final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.hashCode|hashCode(){}[0]
                final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.toString|toString(){}[0]

                final class Group { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group|null[0]
                    constructor <init>(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url>, kotlinx.serialization.json/JsonObject) // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.<init>|<init>(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>;kotlinx.serialization.json.JsonObject){}[0]

                    final val routes // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.routes|{}routes[0]
                        final fun <get-routes>(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.routes.<get-routes>|<get-routes>(){}[0]
                    final val transitionSpecObject // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.transitionSpecObject|{}transitionSpecObject[0]
                        final fun <get-transitionSpecObject>(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.transitionSpecObject.<get-transitionSpecObject>|<get-transitionSpecObject>(){}[0]

                    final fun component1(): kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.component1|component1(){}[0]
                    final fun component2(): kotlinx.serialization.json/JsonObject // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.component2|component2(){}[0]
                    final fun copy(kotlin.collections/List<com.tezov.tuucho.core.domain.business.interaction.navigation/NavigationRoute.Url> = ..., kotlinx.serialization.json/JsonObject = ...): com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.copy|copy(kotlin.collections.List<com.tezov.tuucho.core.domain.business.interaction.navigation.NavigationRoute.Url>;kotlinx.serialization.json.JsonObject){}[0]
                    final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.equals|equals(kotlin.Any?){}[0]
                    final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.hashCode|hashCode(){}[0]
                    final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.RequestTransition.Group.toString|toString(){}[0]
                }
            }

            final object PrepareTransition : com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.PrepareTransition|null[0]
                final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.PrepareTransition.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.PrepareTransition.hashCode|hashCode(){}[0]
                final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.PrepareTransition.toString|toString(){}[0]
            }

            final object TransitionComplete : com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event { // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.TransitionComplete|null[0]
                final fun equals(kotlin/Any?): kotlin/Boolean // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.TransitionComplete.equals|equals(kotlin.Any?){}[0]
                final fun hashCode(): kotlin/Int // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.TransitionComplete.hashCode|hashCode(){}[0]
                final fun toString(): kotlin/String // com.tezov.tuucho.core.domain.business.protocol.repository/NavigationRepositoryProtocol.StackTransition.Event.TransitionComplete.toString|toString(){}[0]
            }
        }
    }
}

final fun <#A: com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A>> (kotlinx.serialization.json/JsonElement).com.tezov.tuucho.core.domain.business.jsonSchema._system/onScope(kotlin/Function1<com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument, #A>): #A // com.tezov.tuucho.core.domain.business.jsonSchema._system/onScope|onScope@kotlinx.serialization.json.JsonElement(kotlin.Function1<com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument,0:0>){0ยง<com.tezov.tuucho.core.domain.business.jsonSchema._system.OpenSchemaScope<0:0>>}[0]
final fun <#A: com.tezov.tuucho.core.domain.business.jsonSchema._system/OpenSchemaScope<#A>> (kotlinx.serialization.json/JsonElement).com.tezov.tuucho.core.domain.business.jsonSchema._system/withScope(kotlin/Function1<com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeArgument, #A>, com.tezov.tuucho.core.domain.business.jsonSchema._system/SchemaScopeMapOperator? = ...): #A // com.tezov.tuucho.core.domain.business.jsonSchema._system/withScope|withScope@kotlinx.serialization.json.JsonElement(kotlin.Function1<com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeArgument,0:0>;com.tezov.tuucho.core.domain.business.jsonSchema._system.SchemaScopeMapOperator?){0ยง<com.tezov.tuucho.core.domain.business.jsonSchema._system.OpenSchemaScope<0:0>>}[0]

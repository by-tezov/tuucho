{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TUUCHO - \u0e15\u0e39\u0e49\u0e42\u0e0a\u0e27\u0e4c - Rendering Engine","text":"<p>Documentation in Progress \u2014 Early stage of development</p>"},{"location":"#overview","title":"Overview","text":"<p>TUUCHO is a dynamic UI rendering engine driven by JSON-based layouts. It interprets a flexible JSON structure describing the entire UI, behaviors and renders the application interface accordingly.</p> <p>\ud83d\ude80 It is available on Android and iOS thanks to Kotlin Multiplatform Mobile (KMM).</p>"},{"location":"#supported-features","title":"Supported Features","text":"<ul> <li> <p>Json Content</p> <ul> <li>100% of the application is driven by the server</li> <li>Definable components with unique IDs allowing shared references to reduce JSON payload size. This applies to content, styles, text, and more.</li> <li>Intelligent caching: JSON objects are cached locally to minimize repeated network requests. Content is fetched over the network only when necessary.</li> <li>Dynamic context data fetch asynchronously with TTL capabilities</li> </ul> </li> <li> <p>Navigation Stack   TUUCHO provides its own navigation stack and supports all capabilities offered by Compose Navigation, including:</p> <ul> <li>Clear Stack</li> <li>Single Top</li> <li>Reuse (do not create a new one, bring back an existing one)</li> <li>PopUpTo (inclusive or not)</li> </ul> </li> <li> <p>Transition Animations   TUUCHO supports transition animations between screens:</p> <ul> <li>Fade</li> <li>Slide Vertically</li> <li>Slide Horizontally</li> </ul> </li> <li> <p>Cache control</p> <ul> <li>Time To Live components, contents and texts group and individual</li> </ul> </li> <li> <p>Form submission</p> <ul> <li>Local validator and remote controls with user feedback</li> <li>Custom command on success or failure</li> </ul> </li> </ul>"},{"location":"#supported-components","title":"Supported Components","text":"<ul> <li>Linear Layout (vertical or horizontal orientation)</li> <li>Button with built-in actions:<ul> <li>Navigation</li> <li>Form submission</li> </ul> </li> <li>Label</li> <li>Input Field (form element)</li> <li>Spacer</li> </ul> <p>More to come... For detailed future plans and roadmap, see Roadmap.</p>"},{"location":"#json-processing-workflow","title":"Json Processing Workflow","text":"<ol> <li> <p>Configuration Fetching    The application starts by downloading a JSON configuration file containing a list of URLs and version information.</p> </li> <li> <p>Content Retrieval    Each URL in the configuration is checked against the local cache. If missing, the corresponding JSON content is fetched from the network.</p> </li> <li> <p>Rectification    Retrieved JSON data passes through the Rectifier, a process that validates and adjusts the JSON structure for compatibility with the rendering engine.</p> </li> <li> <p>Breaking Down    The rectified JSON is fragmented into smaller components by the Breaker process. These components are then stored in the local database.</p> </li> <li> <p>Home Screen Initialization    When displaying a screen (e.g., <code>FooScreen</code>):</p> </li> <li>If components for <code>FooScreen</code> exist in the database, they are retrieved.<ul> <li>The Assembler reconstructs the full JSON page from these components, including only what is necessary.</li> <li>The final JSON is passed to the Renderer which draws the UI.</li> </ul> </li> <li> <p>If components for <code>FooScreen</code> doesn't exist in the database, they are fetched, saved in database. Then the rendering process is done.</p> </li> <li> <p>Contextual content</p> </li> <li>If the <code>FooScreen</code> contains some contextual data (user context data), it is retrieved in the asynchronously (or synchronously) and the FooScreen is updated on the fly.</li> </ol>"},{"location":"#json-parsing-diagram","title":"Json Parsing Diagram","text":"<pre><code>flowchart TD\n  A[Launch Application] --&gt; B[/Request **config.json**/]\n  B --&gt; C[[For each **url** in config: Check cache]]\n  C --&gt; C1{In Database?}\n  C1 -- No --&gt; D[/Request **url** JSON/]\n  D --&gt; E[Rectifier: make JSON engine-compatible]\n  E --&gt; F[Breaker: split into parts]\n  F --&gt; G[(Store parts in DB)]\n  C1 -- Yes --&gt; H\n  G --&gt; H[Application want show 'FooScreen' URL]\n  H --&gt; H1{Is in DB?}\n  H1 -- Yes --&gt; I[(Retrieve parts from DB)]\n  I --&gt; J[Assembler: Rebuild Page]\n  J --&gt; K[Renderer: Create all UI part]\n  K --&gt; L((('FooScreen' is visible)))\n  H1 -- No --&gt; D\n  J --&gt; S[Shadower: Dynamic update context data]\n  S --&gt; M[(Save parts in Transient DB)]\n  S --&gt; L\n</code></pre>"},{"location":"#json-file-structure","title":"Json File Structure","text":"<pre><code>{\n  \"setting\": { /* page setting */ },\n  \"root\": { /* component */ },\n  \"components\": [ /* component */ ],\n  \"styles\": [ /* style */ ],\n  \"options\": [ /* option */ ],\n  \"contents\": [ /* content */ ],\n  \"texts\": [ /* text */ ],\n  \"colors\": [ /* color */ ],\n  \"dimensions\": [ /* dimension */ ]\n}\n</code></pre> <p>Each PAGE and TEMPLATE must include a <code>root</code> key, which defines the top-level component of the screen. Other keys such as <code>components</code>, <code>contents</code>, <code>styles</code>, <code>options</code>, <code>texts</code>, <code>colors</code>, and <code>dimensions</code> are optional. Note that the <code>root</code> key is not required for SUBS content.</p> <ul> <li>PAGE represents a full-screen rendered component.</li> <li>TEMPLATE represents a full-screen rendered component with no content. They can be used multiple times with different contents</li> <li>SUBS are shared objects that can be referenced by their ID, which always starts with <code>*</code>.</li> </ul> <p>Any ID starting with <code>*</code> is treated as a reference. When the parser encounters such a reference, it first searches within the current PAGE; if not found, it then looks inside the SUBS.</p>"},{"location":"#more-about-subs","title":"More about SUBS","text":"<p>Subs are shared libraries loaded by the application before rendering any page (at launch and/or after successful loading).</p> <ul> <li>They enable sharing of common components, styles, texts, and other assets across multiple pages.</li> <li>References to shared objects use the <code>*</code> prefix notation.</li> <li>Shared components can be either global or local to a page. If the parser does not find a reference locally, it will look for it in the shared library.</li> <li>In certain cases, components on a page depend on dynamic data that is not included in the local page definition or cached globally in SUBS. When such components are encountered during the assembly phase, the system handles them intelligently to maintain a smooth user experience.</li> </ul> <p>Many self-explanatory examples are provided throughout this documentation. To make the best use of Subs, it is important to understand how to assign IDs to your elements. </p> <p>For more details, please refer to the ID page or Subs </p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>When the Assembler encounters a component with a reference to an object that is not locally or globally available, such as:</p> <pre><code>{\n  \"id\": {\n    \"value\": \"hobbies\",\n    \"source\": \"*input-field-on-demand\"\n  },\n  \"subset\": \"field\"\n}\n</code></pre> <p>it recognizes that additional data is required to fully render the component.</p>"},{"location":"#background-fetch-process","title":"Background Fetch Process","text":"<ol> <li>The Shadower gathers all missing objects (e.g., components, contents, texts) required to render the page entirely.</li> <li>It initiates a background request to the corresponding dynamic URL: {url-origin}-contextual. This URL is expected to return all the necessary missing elements. You can define custom url also.</li> <li>Once the data is received:<ul> <li>The Shadower step dynamically injects the new objects into the existing view structure and the transient cache database.</li> <li>The affected UI sections are updated in place, without requiring a full reload.</li> </ul> </li> </ol>"},{"location":"#placeholder-rendering","title":"Placeholder Rendering","text":"<p>While waiting for the missing data, the renderer shows placeholder UI elements (aka skimmers) in place of the missing content. These serve as visual indicators to users that the data is being loaded.</p> <p>This ensures: - Fast initial rendering of all available UI. - Smooth transition as dynamic data becomes available. - Flexible modular content delivery that doesn\u2019t block page rendering due to partial data.</p> <p>In the setting, you can also make all this process synchronous and wait all data available before to render.</p>"},{"location":"cache/","title":"Cache","text":"<p>All JSON resources managed by TUUCHO can be cached to avoid unnecessary network requests and improve performance. The cache system is controlled through two main mechanisms:</p> <ul> <li><code>ttl</code> (Time-To-Live), defined in Page Setting</li> <li><code>validity-key</code>, defined in Config</li> </ul>"},{"location":"cache/#1-validity-key","title":"1. Validity Key","text":"<p>The <code>validity-key</code> is an string attached to a resource in the config.</p> <ul> <li>When the key changes, the cached version is immediately invalidated and replaced on next application start.</li> <li>Works best for resources that are expected to persist for long periods but may be updated occasionally.</li> <li>Recommended for global and local resources when no ttl are defined</li> </ul> <p>Example:</p> <pre><code>{\n  \"material-resource\": {\n    \"global\": {\n      \"templates\": [\n        {\n          \"validity-key\": \"v2\",\n          \"url\": \"templates/template-page-default\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>See Config for more details.</p>"},{"location":"cache/#2-ttl-time-to-live","title":"2. TTL (Time-To-Live)","text":"<p>The <code>ttl</code> setting defines how long a resource remains valid in the cache before being re-fetched. It is configured inside the resource\u2019s <code>\"setting\"</code> block.</p> <p>Two strategies are available:</p> <ul> <li>transient \u2192 expires after a duration or at a given date/time.</li> <li>single-use \u2192 removed immediately after first access.</li> </ul> <p>Example:</p> <pre><code>\"setting\": {\n  \"ttl\": {\n    \"strategy\": \"transient\",\n    \"transient-value\": \"5mn\"\n  }\n}\n</code></pre> <p>See Page Setting for the complete list of options.</p> <p>Longer-lived resources (e.g. days, weeks, months TTL):   It is highly recommended to add a <code>validity-key</code>.   Without it, the only expiration will be TTL \u2014 and if TTL is long, there will be no way to force invalidation if the resource changes unexpectedly.</p>"},{"location":"cache/#4-default-rules","title":"4. Default Rules","text":"<ul> <li> <p>If <code>ttl</code> is absent:</p> <ul> <li>Global and Local resources \u2192 cached indefinitely, until <code>validity-key</code> changes.</li> <li>Contextual resources \u2192 default to single-use.</li> </ul> </li> <li> <p>If <code>ttl</code> is defined:</p> <ul> <li>Cache follows the configured strategy (<code>transient</code> or <code>single-use</code>).</li> </ul> </li> </ul>"},{"location":"changelog/","title":"Change Log","text":"<p>This changelog documents the main milestones and updates in the TUUCHO rendering engine development.</p>"},{"location":"changelog/#001-alpha10-2025-09-14","title":"0.0.1-alpha10 - 2025-09-14","text":"<ul> <li>Add TTL cache + auto-purge with validity key for Local, GLobal and Contextual data.</li> <li>Add CI pipeline, Unit Tests, End To End test + visual regression check.</li> <li>Add custom contextual url capabilities</li> </ul>"},{"location":"changelog/#001-alpha7-2025-08-01","title":"0.0.1-alpha7 - 2025-08-01","text":"<ul> <li>Navigation Stack + Transition Animations.</li> </ul>"},{"location":"changelog/#001-alpha6-2025-07-01","title":"0.0.1-alpha6 - 2025-07-01","text":"<ul> <li>Context Data Support completed allowing context data live update in background.</li> </ul>"},{"location":"changelog/#001-alpha4-2025-06-01","title":"0.0.1-alpha4 - 2025-06-01","text":"<ul> <li>Initial KMM integration completed.</li> <li>Early work state established for Kotlin Multiplatform Mobile (KMM) foundation, enabling shared UI logic across iOS and Android.</li> </ul>"},{"location":"contact/","title":"\ud83d\udcec Contact","text":"<p>Whether you have a question, a suggestion, a collaboration idea, or just want to say hi \u2014 feel free to reach out!</p> <p>I\u2019m always open to discussing exciting projects, solving challenging problems, or simply connecting with like-minded developers and creators.</p>"},{"location":"contact/#email","title":"\ud83d\udce7 Email","text":"<p>tezov.app@gmail.com Drop me a line anytime. I usually respond fast \u2014 unless I\u2019m deep in debugging or enjoying a good espresso \u2615.</p>"},{"location":"contact/#linkedin","title":"\ud83d\udd17 LinkedIn","text":"<p>linkedin.com/in/tezov Let\u2019s connect professionally \u2014 or at least pretend to! \ud83d\ude09 Follow me for updates on TUUCHO, dev insights, or tech ramblings.</p> <p>Thanks for your interest in the project. Looking forward to hearing from you! \ud83d\udc4b</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This roadmap outlines the planned evolution of the TUUCHO rendering engine. It highlights upcoming features and improvements aimed at making the library robust, scalable, and production-ready.</p>"},{"location":"roadmap/#current-focus","title":"\ud83d\udea7 Current Focus","text":"<p>Work in progress:</p> <ul> <li> <p>Data store   Add a way for the server to record data key/value on device and use them.</p> </li> <li> <p>Images / Assets store   Add a way for the server to add cache images and use them (or remote assets)</p> </li> </ul>"},{"location":"roadmap/#medium-term-goals","title":"\ud83c\udfaf Medium-Term Goals","text":"<ul> <li> <p>Configuration File Support   Complete support for configuration files to allow application-wide settings.</p> </li> <li> <p>Real time Data Support   Introduce bi-directional communication to enable real-time content updates within the UI.</p> </li> <li> <p>Advanced UI Components   Add comprehensive, fully tested UI components to cover a wider range of application needs.</p> </li> <li> <p>Actions, Validators, Navigation, Settings, other useful solvable by pointer </p> </li> <li> <p>Exception handlers / Loader Screen</p> </li> <li> <p>Add useful device feature (gps, permissions, ...)</p> </li> </ul>"},{"location":"roadmap/#long-term-vision","title":"\ud83d\ude80 Long-Term Vision","text":"<ul> <li> <p>Behavior &amp; Animation System   Implement an extensible behavior module to handle animations and interactive UI elements.</p> </li> <li> <p>Modular UI Components   Support UI components as independent modules for easier customization and extensibility.</p> </li> <li> <p>Accessibility Enhancements   Improve accessibility features to meet modern standards and ensure inclusivity.</p> </li> <li> <p>Improved JSON Parsing Feedback   Provide detailed, user-friendly warnings and errors to simplify troubleshooting of JSON input.</p> </li> <li> <p>Parser Efficiency Optimizations   Explore cache indexing, metadata, or other innovative techniques to accelerate JSON parsing and rendering.</p> </li> <li> <p>Unit Tests + E2E Tests   Add as many and meaningful tests before production validation to protect from any regression.</p> </li> <li> <p>Documentation   Add developer documentation for creating user modules and custom components.</p> </li> </ul>"},{"location":"roadmap/#realized","title":"\u2705 Realized","text":"<ul> <li> <p>Cache Management Enhancements (2025-08)</p> <ul> <li>Add TTL (time-to-live) options to avoid indefinite cache persistence.</li> <li>Implement versioning and automatic cache purging for consistency and efficiency.</li> </ul> </li> <li> <p>Add CI Jenkins pipeline (2025-08)</p> <ul> <li>unit testing</li> <li>end to end testing</li> <li>visual regression testing</li> <li>all command accessible through github description + statuses feedback on pull request</li> </ul> </li> <li> <p>Navigation Stack Implementation (2025-08)</p> <ul> <li>Enhance navigation capabilities with a robust stack system to manage screen transitions.</li> </ul> </li> <li> <p>Contextual Data Support (2025-07)</p> <ul> <li>Introduce dynamic data binding to enable context content resolution within the UI.</li> </ul> </li> <li> <p>KMM Integration &amp; iOS Support (2025-06)</p> <ul> <li>Full Kotlin Multiplatform Mobile support implemented.</li> </ul> </li> </ul> <p>We continuously update this roadmap as TUUCHO evolves. For the latest updates and detailed planning, stay tuned to this documentation.</p> <p>Contributions, feedback, and investor interest are highly welcomed to help shape the future of TUUCHO.</p>"},{"location":"shadower-contextual/","title":"Dynamic Loading for Contextual Data","text":"<p>When a reference resolver cannot resolve a reference because the data is not present in the cache, the Shadower assumes it is contextual data and will request it automatically.</p> <ul> <li> <p>Default behavior:   If no explicit URL is defined, the system will try <code>\"${current-page}-contextual\"</code> as the endpoint for contextual data.</p> </li> <li> <p>Loading mode:   Contextual data can be loaded synchronously (blocking render until data is ready) or asynchronously (default, render immediately and update when data arrives).</p> </li> </ul>"},{"location":"shadower-contextual/#enabling-the-shadower","title":"Enabling the Shadower","text":"<p>Contextual loading is only active if the Shadower is explicitly enabled:</p> <ul> <li>At minimum, enable it on navigation forward.</li> <li>You can configure this in Component Setting.</li> </ul> <p>Example:</p> <pre><code>\"shadower\": {\n  \"navigate-forward\": {\n    \"enable\": true,\n    \"wait-done-to-render\": false\n  }\n}\n</code></pre>"},{"location":"shadower-contextual/#defining-contextual-urls","title":"Defining Contextual URLs","text":"<p>You can control where contextual data is loaded from:</p> <ol> <li> <p>Page-level setting    Define URLs for <code>component</code>, <code>content</code>, or <code>text</code> by the page\u2019s. See Component Setting.</p> </li> <li> <p>Object-level setting    Define URLs directly on objects through the ID Object. See ID Object.</p> </li> </ol> <p>If no explicit URL is provided, the system falls back to <code>${current-page}-contextual</code>.</p>"},{"location":"shadower-contextual/#contextual-json-structure","title":"Contextual JSON Structure","text":"<p>Contextual JSON files are structured exactly like Subs. See Subs Definition for details.</p> <ul> <li>They may include any combination of <code>texts</code>, <code>contents</code>, <code>components</code>, etc.</li> <li>They can also declare a TTL in Page setting to control caching.</li> </ul>"},{"location":"shadower-contextual/#example","title":"Example","text":"<p>This example defines contextual data with a 10-second TTL, loaded synchronously (the page waits for it before rendering):</p> <pre><code>{\n  \"setting\": {\n    \"ttl\": {\n      \"strategy\": \"transient\",\n      \"transient-value\": \"10s\"\n    }\n  },\n  \"texts\": {\n    \"common\": {\n      \"title-body\": \"contextual data with 10s TTL and wait all available before to render\"\n    }\n  }\n}\n</code></pre>"},{"location":"test/","title":"Test","text":"<pre><code>flowchart TD\n  Start --&gt; Step1[Process Step 1]\n  Step1 --&gt; Step2[Process Step 2]\n  Step2 --&gt; End[Finish]\n</code></pre> <pre><code>sequenceDiagram\n  participant User\n  participant App\n  participant Server\n\n  User-&gt;&gt;App: Click \"Submit\"\n  App-&gt;&gt;Server: POST /data\n  Server--&gt;&gt;App: 200 OK\n  App--&gt;&gt;User: Success message\n</code></pre> <pre><code>classDiagram\n  class User {\n    +String name\n    +login()\n    +logout()\n  }\n\n  class Admin {\n    +banUser()\n  }\n\n  User &lt;|-- Admin\n</code></pre> <pre><code>erDiagram\n  USERS ||--o{ POSTS : has\n  USERS {\n    string id\n    string name\n  }\n  POSTS {\n    string id\n    string title\n    string user_id\n  }\n</code></pre> <pre><code>stateDiagram-v2\n  [*] --&gt; Idle\n  Idle --&gt; Loading : start()\n  Loading --&gt; Success : success()\n  Loading --&gt; Error : fail()\n  Error --&gt; Idle : retry()\n</code></pre> <pre><code>gantt\n  title Project Plan\n  dateFormat  YYYY-MM-DD\n  section Development\n  Setup       :done, 2025-07-01, 2d\n  Backend     :active, 2025-07-03, 5d\n  Frontend    : 2025-07-05, 4d\n</code></pre> <pre><code>pie\n  title Market Share\n  \"Chrome\" : 60\n  \"Firefox\" : 20\n  \"Safari\" : 10\n  \"Others\" : 10\n</code></pre> <pre><code>mindmap\n  root((Project))\n    Planning\n      Goals\n      Timeline\n    Development\n      Backend\n      Frontend\n    Testing\n      Unit\n      Integration\n</code></pre> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  CUSTOMER {\n    id PK\n    name\n  }\n  ORDER {\n    id PK\n    customer_id FK\n    total\n  }\n</code></pre> <pre><code>journey\n  title User onboarding\n  section Landing\n    Visit Homepage: 5: Anonymous\n    Click \u201cSign up\u201d: 4: Anonymous\n  section Signup\n    Fill form: 3: Anonymous\n    Submit: 2: Registered\n  section Complete\n    Welcome email: 1: Registered\n</code></pre> <pre><code>gitGraph\n  commit\n  branch feature\n  checkout feature\n  commit\n  checkout main\n  merge feature\n  commit\n</code></pre> <pre><code>quadrantChart\n  title Reach vs Engagement\n  x-axis Low Reach --&gt; High Reach\n  y-axis Low Engagement --&gt; High Engagement\n  quadrant-1 Expand Strategy\n  quadrant-2 Promote More\n  \"Campaign A\": [0.3, 0.5]\n  \"Campaign B\": [0.7, 0.2]\n</code></pre> <pre><code>xychart-beta\n  title Sales vs Time\n  x-axis [Jan, Feb, Mar]\n  y-axis \"Sales ($)\" 0 --&gt; 10000\n  bar [5000, 7000, 8500]\n  line [4500, 6500, 8000]\n</code></pre> <pre><code>timeline\n  2025-01-01 : Project Kickoff\n  2025-02-10 : Alpha Release\n  2025-05-20 : Beta Release\n  2025-07-01 : Public Launch\n</code></pre> <pre><code>graph LR\n  A([Database])\n  B([API Server])\n  C([Web Client])\n  C --&gt; B --&gt; A\n</code></pre> <pre><code>C4Context\n  Person(user, \"User\")\n  System(system, \"Web App\")\n  user --&gt; system : \"Uses\"\n</code></pre> <pre><code>flowchart TD\n  %% === Start Phase ===\n  A([Start Application]) --&gt; B[Request config.json]\n  B --&gt; C[For each url in config \u2192 Check cache]\n\n  %% === Cache Check ===\n  C --&gt; C1{In Database?}\n  C1 -- No --&gt; D[Request url JSON]\n  C1 -- Yes --&gt; H[App wants to show Screen A]\n\n  %% === Process &amp; Store JSON ===\n  D --&gt; E[Rectifier:Make JSON engine-compatible]\n  E --&gt; F[Breaker:Split into parts]\n  F --&gt; G[Store parts in DB]\n  G --&gt; H\n\n  %% === Render Phase ===\n  H --&gt; H1{Is Screen A in DB?}\n  H1 -- Yes --&gt; I[Retrieve parts from DB]\n  H1 -- No --&gt; D\n  I --&gt; J[Assembler:Rebuild Page]\n  J --&gt; K[Renderer:Draw UI of Screen A]\n\n  %% === Grouping for Clarity ===\n  subgraph Network [\"\ud83d\udcbb Network Requests\"]\n    D --&gt; E --&gt; F\n  end\n\n  subgraph Storage [\"\ud83d\uddc4\ufe0f Local Database\"]\n    G\n    I\n  end\n\n  subgraph UI [\"\ud83d\udda5\ufe0f UI Rendering\"]\n    J --&gt; K\n  end\n</code></pre> <pre><code>flowchart TD\n  A[Start Application] --&gt; B[Request **config.json**]\n  B --&gt; C[For each **url** in config: Check cache]\n  C --&gt; C1{In Database?}\n  C1 -- No --&gt; D[Request **url** JSON]\n  D --&gt; E[Rectifier: make JSON engine-compatible]\n  E --&gt; F[Breaker: split into parts]\n  F --&gt; G[Store parts in DB]\n  C1 -- Yes --&gt; H\n  G --&gt; H[Application want show 'Screen A' URL]\n  H --&gt; H1{Is in DB?}\n  H1 -- Yes --&gt; I[Retrieve parts from DB]\n  I --&gt; J[Assembler: Rebuild Page]\n  J --&gt; K[Renderer: Draw UI of Screen A]\n  H1 -- No --&gt; D\n</code></pre>"},{"location":"components-definition/","title":"Components Definition","text":"<p>List of supported UI components:</p> <ul> <li>LayoutLinear (<code>subset</code>: <code>layout-linear</code>)</li> <li>Label (<code>subset</code>: <code>label</code>)</li> <li>Form</li> <li>Form-Field (<code>subset</code>: <code>form-field</code>)</li> <li>Button (<code>subset</code>: <code>button</code>)</li> <li>Spacer (<code>subset</code>: <code>spacer</code>)</li> </ul> <p>\u26a0\ufe0f This repository is currently under active development. More components and enhanced style capabilities will be added as soon as possible.</p> <p>For insights on upcoming features and planned improvements, please check the Roadmap.</p>"},{"location":"components-definition/button/","title":"Button Component","text":"<p>A <code>Button</code> is an interactive component that typically triggers an action when tapped. It displays a <code>Label</code> and is linked to an <code>Action</code>.</p>"},{"location":"components-definition/button/#example","title":"Example","text":"<pre><code>{\n  \"id\": /* id object */,\n  \"subset\": \"button\",\n  \"content\": {\n    \"label\": /* label component */,\n    \"action\": /* action object */\n  }\n}\n</code></pre>"},{"location":"components-definition/button/#keys","title":"\ud83d\udd11 Keys","text":""},{"location":"components-definition/button/#id","title":"<code>id</code>","text":"<ul> <li>Object ID: A unique identifier used to reference this component locally or externally.</li> <li>Optional if the object is inline and not meant for reuse.</li> </ul>"},{"location":"components-definition/button/#subset","title":"<code>subset</code>","text":"<ul> <li>MANDATORY: Must be exactly <code>\"button\"</code> to define the component type.</li> <li>MANDATORY if not resolved by another pointing reference (e.g., when the component is not coming from a resolved reference).</li> </ul>"},{"location":"components-definition/button/#content","title":"\ud83d\udcdd <code>content</code>","text":"<p>Defines the button\u2019s content including the displayed label and the triggered action.</p> <pre><code>\"content\": {\n    \"label\": /* label component */,\n    \"action\": /* action object */\n}\n</code></pre> <ul> <li><code>label</code>: A Label component used to render the button\u2019s text and style.</li> <li><code>action</code>: An Action object triggered on press.</li> </ul>"},{"location":"components-definition/button/#supported-action-commands","title":"\ud83d\udea6 Supported Action Commands","text":"<p>The button supports the following action command for navigation:</p> <ul> <li><code>navigate://url/{the_page_to_reach}</code> \u2014 Performs navigation to the specified page URL.</li> <li><code>form-send://url/{the_server_endpoint}</code> \u2014 Sends the form data to the server if the form is valid, waits for the server confirmation, then navigates to the page URL specified in the action's <code>params</code>.   Check Action object and Form Send action</li> </ul>"},{"location":"components-definition/label/","title":"Label Component","text":"<p>A <code>Label</code> is a basic component used to display text content. It supports some styling.</p>"},{"location":"components-definition/label/#example","title":"Example","text":"<pre><code>{\n  \"id\": /* id object */,\n  \"subset\": \"label\",\n  \"style\": {\n    \"id\": /* id object */,\n    \"font-size\": /* dimension object */,\n    \"font-color\": /* color object */\n  },\n  \"content\": {\n    \"value\": /* text object */\n  }\n}\n</code></pre>"},{"location":"components-definition/label/#keys","title":"\ud83d\udd11 Keys","text":""},{"location":"components-definition/label/#id","title":"<code>id</code>","text":"<ul> <li>Object ID: a unique identifier used to reference this component locally or externally.</li> <li>Optional if the object is inline and not meant for reuse.</li> </ul>"},{"location":"components-definition/label/#subset","title":"<code>subset</code>","text":"<ul> <li>MANDATORY: Must be exactly <code>\"label\"</code> to define the component type.</li> <li>MANDATORY if not resolved by another pointing reference (e.g., when the component is not coming from a resolved reference).</li> </ul>"},{"location":"components-definition/label/#style","title":"\ud83c\udfa8 <code>style</code>","text":"<p>Style defines visual aspects of the label like font size or color. You can reuse existing styles via the <code>id</code> key or define them inline.</p> <pre><code>\"style\": {\n    \"id\": /* id object */,\n    \"font-size\": /* dimension object */,\n    \"font-color\": /* color object */\n}\n</code></pre> <ul> <li><code>id</code>: Reference to a shared Style object.</li> <li><code>font-size</code>: Reference to a Dimension object.</li> <li><code>font-color</code>: Reference to a Color object.</li> </ul>"},{"location":"components-definition/label/#content","title":"\ud83d\udcdd <code>content</code>","text":"<p>The content key holds the text to display. You can define the value inline or reference an external or shared text object.</p> <pre><code>\"content\": {\n  \"value\": /* text object */\n}\n</code></pre> <ul> <li><code>value</code>: Reference to a Text object or inline text.</li> </ul>"},{"location":"components-definition/layout-linear/","title":"Layout-Linear Component","text":"<p>A <code>layout-linear</code> is a container component that arranges its child components in a linear sequence, either vertically or horizontally.</p>"},{"location":"components-definition/layout-linear/#example","title":"Example","text":"<pre><code>{\n  \"id\": /* id object */,\n  \"subset\": \"layout-linear\",\n  \"style\": {\n    \"orientation\": /* \"vertical\" or \"horizontal\" */,\n    \"background-color\": /* color object */,\n    \"fill-max-size\": /* boolean */,\n    \"fill-max-width\": /* boolean */\n  },\n  \"content\": {\n    \"items\": [\n      /* array of any components */\n    ]\n  }\n}\n</code></pre>"},{"location":"components-definition/layout-linear/#keys","title":"\ud83d\udd11 Keys","text":""},{"location":"components-definition/layout-linear/#id","title":"<code>id</code>","text":"<ul> <li>Object ID: A unique identifier used to reference this component locally or externally.</li> <li>Optional if the object is inline and not meant for reuse.</li> </ul>"},{"location":"components-definition/layout-linear/#subset","title":"<code>subset</code>","text":"<ul> <li>MANDATORY: Must be exactly <code>\"layout-linear\"</code> to define the component type.</li> <li>MANDATORY if not resolved by another pointing reference (e.g., when the component is not coming from a resolved reference).</li> </ul>"},{"location":"components-definition/layout-linear/#style","title":"\ud83c\udfa8 <code>style</code>","text":"<p>Defines layout styling properties.</p> <pre><code>\"style\": {\n  \"orientation\": /* string: \"vertical\" or \"horizontal\" */,\n  \"background-color\": /* color object */,\n  \"fill-max-size\": /* boolean */,\n  \"fill-max-width\": /* boolean */\n}\n</code></pre> <ul> <li><code>orientation</code>: Specifies the direction in which child components are arranged; either <code>\"vertical\"</code> or <code>\"horizontal\"</code>.</li> <li><code>background-color</code>: Reference to a Color object defining the background color.</li> <li><code>fill-max-size</code>: Boolean flag to fill the maximum available size in both width and height.</li> <li><code>fill-max-width</code>: Boolean flag to fill the maximum available width only.</li> </ul>"},{"location":"components-definition/layout-linear/#content","title":"\ud83d\udcdd <code>content</code>","text":"<p>The <code>items</code> array holds child components inside this linear layout.</p> <pre><code>\"content\": {\n  \"items\": [\n    /* components */\n  ]\n}\n</code></pre> <ul> <li><code>items</code>: An array of any components. See the full list in the Component Index.</li> </ul>"},{"location":"components-definition/spacer/","title":"Spacer Component","text":"<p>A <code>Spacer</code> is a layout component used to create flexible empty space between other components.</p>"},{"location":"components-definition/spacer/#example","title":"Example","text":"<pre><code>{\n  \"id\": /* id object */,\n  \"subset\": \"spacer\",\n  \"style\": {\n    \"weight\": /* dimension object */,\n    \"width\": /* dimension object */,\n    \"height\": /* dimension object */\n  }\n}\n</code></pre>"},{"location":"components-definition/spacer/#keys","title":"\ud83d\udd11 Keys","text":""},{"location":"components-definition/spacer/#id","title":"<code>id</code>","text":"<ul> <li>Object ID: A unique identifier used to reference this component locally or externally.</li> <li>Optional if the object is inline and not meant for reuse.</li> </ul>"},{"location":"components-definition/spacer/#subset","title":"<code>subset</code>","text":"<ul> <li>MANDATORY: Must be exactly <code>\"spacer\"</code> to define the component type.</li> <li>MANDATORY if not resolved by another pointing reference (e.g., when the component is not coming from a resolved reference).</li> </ul>"},{"location":"components-definition/spacer/#style","title":"\ud83c\udfa8 <code>style</code>","text":"<p>The style controls how the spacer allocates space.</p> <pre><code>\"style\": {\n  \"weight\": /* dimension object */,\n  \"width\": /* dimension object */,\n  \"height\": /* dimension object */\n}\n</code></pre> <ul> <li><code>weight</code>: A dimension defining flexible space allocation inside a <code>LayoutLinear</code> component. Cannot be used simultaneously with <code>width</code> or <code>height</code>.</li> <li><code>width</code>, <code>height</code>: A dimension defining fixed horizontal space. Cannot be used with <code>weight</code>.</li> </ul> <p>Check dimension object Dimension object</p>"},{"location":"components-definition/spacer/#usage-notes","title":"Usage Notes","text":"<ul> <li><code>weight</code> only applies when the spacer is inside a <code>LayoutLinear</code> component.</li> <li>Use <code>width</code> or <code>height</code> for fixed-sized spacers outside linear layouts.</li> </ul>"},{"location":"components-definition/form/","title":"Form Components Definition","text":"<p>List of supported Form UI components:</p> <ul> <li>Form-Field (<code>subset</code>: <code>form-field</code>)</li> </ul>"},{"location":"components-definition/form/#form-send-action","title":"Form Send Action","text":"<p>The <code>form-send</code> action is used to submit form data to a server endpoint. It is typically triggered by a <code>Button</code> component and only executes if all local field validations pass successfully.</p>"},{"location":"components-definition/form/#action-format","title":"\ud83d\udd27 Action Format","text":"<ul> <li><code>value</code>: <code>form-send://url/{the_server_endpoint}</code></li> <li><code>action-validated</code>: A follow-up action (commonly a navigation) to trigger after a successful server response.</li> <li><code>action-denied</code>: A follow-up action to trigger after a successful server response, by default if you don't defined denied action, the error user feedback will be shown. This field is useful only if you want define a custom behavior. ...Documentation do not explain how yet...</li> </ul>"},{"location":"components-definition/form/#example","title":"Example","text":"<p>Used in a <code>Button</code> component:</p> <pre><code>\"action\": {\n  \"value\": \"form-send://url/form-from-page-home\",\n  \"action-validated\": \"navigate://url/page-confirmation\"\n}\n</code></pre> <p>In this example:</p> <ul> <li>The form data is submitted to the server endpoint <code>form-from-page-home</code>.</li> <li>If the local validators succeed and the server confirms, the user is redirected to <code>page-confirmation</code>.</li> </ul>"},{"location":"components-definition/form/#data-sent-to-server","title":"\ud83d\udce8 Data Sent to Server","text":"<p>When triggered, and only if all validators succeed locally, the following data is sent as a POST payload to the server:</p> <pre><code>queries: \"version\" and \"url\",\n\nbody:\n{\n    \"fields\": {\n      \"age\": \"55\",\n      \"email\": \"my-email@gmail.com\",\n      \"comment\": \"mmm, no\",\n      \"hobies\": \"none\"\n    }\n}\n</code></pre> <ul> <li>The <code>fields</code> object includes all user-filled values from validated fields. Other components like toggle, checkbox, list,... will arrived.</li> </ul>"},{"location":"components-definition/form/#server-response","title":"\u2705 Server Response","text":"<p>The server must return one of the following:</p>"},{"location":"components-definition/form/#success-response","title":"Success Response","text":"<pre><code>{\n  \"type\": \"all-succeed\"\n}\n</code></pre> <ul> <li>Indicates that the form submission was accepted.</li> <li>Triggers the optional <code>action-validated</code> from the original action (e.g., navigating to a confirmation page).</li> </ul>"},{"location":"components-definition/form/#error-response","title":"Error Response","text":"<pre><code>{\n  \"type\": \"failure-result\",\n  \"content\": [\n    {\n      \"id\": \"id of invalid field\",\n      \"reason\": /* Text object */\n    },...\n  ]\n}\n</code></pre> <ul> <li>Indicates that the server rejected the submission, despite successful local validation.</li> <li><code>content</code>: a list of rejected inputs, each with an optional <code>reason</code> Text object that can be displayed in the UI to guide the user.</li> <li>If no <code>reason</code> is provided for an input that is locally valid, the application will ignore the server feedback for that input. Always provide a reason to ensure the user receives feedback about the error.</li> </ul> <p>For more on actions, see the Action object and Button component</p>"},{"location":"components-definition/form/field/","title":"Field Component","text":"<p>A <code>Field</code> component represents an input form field that supports validation rules and user guidance messages.</p>"},{"location":"components-definition/form/field/#example","title":"Example","text":"<pre><code>{\n  \"id\": /* id object */,\n  \"subset\": \"form-field\",\n  \"option\": {\n    \"form-validator\": /* validator object or array of validator objects */\n  },\n  \"content\": {\n    \"title\": /* text object */,\n    \"placeholder\": /* text object */,\n    \"message-error\": /* text object or array of text objects */\n  },\n  \"state\": {\n    \"initial-value\": /* text object */\n  }\n}\n</code></pre>"},{"location":"components-definition/form/field/#keys","title":"\ud83d\udd11 Keys","text":""},{"location":"components-definition/form/field/#id","title":"<code>id</code>","text":"<ul> <li>Object ID: A unique identifier used to reference this component locally or externally.</li> <li>Optional if the object is inline and not meant for reuse.</li> </ul>"},{"location":"components-definition/form/field/#subset","title":"<code>subset</code>","text":"<ul> <li>MANDATORY: Must be exactly <code>\"field\"</code> to define the component type.</li> <li>MANDATORY if not resolved by another pointing reference (e.g., when the component is not coming from a resolved reference).</li> </ul>"},{"location":"components-definition/form/field/#option","title":"<code>option</code>","text":"<p>Validation options defining rules applied to the field input.</p> <pre><code>\"option\": {\n  \"validator\": /* validator object or array of validator objects */\n}\n</code></pre> <ul> <li><code>form-validator</code>: A Validator object or an array of such objects defining validation rules.</li> </ul> <p>Note: The <code>id-message-error</code> key inside each validator object links to the corresponding error message defined in the component's <code>content/message-error</code> array or object by matching the same ID.</p>"},{"location":"components-definition/form/field/#content","title":"\ud83d\udcdd <code>content</code>","text":"<p>The content provides user-facing text such as titles, placeholders, and validation error messages.</p> <pre><code>\"content\": {\n  \"title\": /* text object */,\n  \"placeholder\": /* text object */,\n  \"message-error\": /* text object or array of text objects */\n}\n</code></pre> <ul> <li><code>title</code>: A text object representing the field label shown to the user.</li> <li><code>placeholder</code>: A text object displayed when the field is empty.</li> <li><code>message-error</code>: Either a single or an array of Text objects representing validation error messages linked to the validators.</li> </ul>"},{"location":"components-definition/form/field/#state","title":"<code>state</code>","text":"<p>The state provides initial value.</p> <pre><code>\"state\": {\n  \"initial-value\": /* text object */\n}\n</code></pre> <ul> <li><code>initial-value</code>: A text object representing the initial value shown to the user.</li> </ul>"},{"location":"config/","title":"Config Definition","text":"<p>The <code>config</code> JSON file allow you do define material resource url in order to load, manage, and cache. This (or these files) will be called before to call a page. Any change in the validity key will invalid the corresponding cache.</p> <p>Additional keys and options will be added as the system evolves.</p> <p>material-resource structure, resources are grouped into global, local, and contextual scopes.</p> <pre><code>{\n  \"material-resource\": {\n    \"global\": {\n      \"subs\": [\n        {\n          \"validity-key\": \"any-string\",\n          \"url\": \"subs/sub-texts\",\n          \"pre-download\": true(default)/false\n        },...\n      ],\n      \"templates\": [\n        {\n          \"validity-key\": \"1\",\n          \"url\": \"templates/template-page-default\",\n          \"pre-download\": true(default)/false\n        },...\n      ]\n    },\n    \"local\": {\n      \"pages\": [\n        {\n          \"validity-key\": \"any-string\",\n          \"url\": \"page-b\",\n          \"pre-download\": true(default)/false\n        },...\n      ]\n    },\n    \"contextual\": {\n      \"all\": [\n        {\n          \"validity-key\": \"any-string\",\n          \"url-origin\": \"page-home\",\n          \"url\": \"${url-origin}-contextual-texts\",\n          \"pre-download\": true/false(default)\n        },...\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"config/#1-preload-key","title":"1. Preload Key","text":"<p>The <code>preload</code> key specifies collections of resources that the application should load and cache immediately upon startup to ensure optimal performance and offline availability.</p> <ul> <li>The app compares versions to detect updates and downloads the latest resources.</li> <li>Resources listed under <code>preload</code> are cached immediately to improve performance.</li> <li>Resources not listed in <code>preload</code> remain accessible and are fetched and cached on demand when first used.</li> </ul> <pre><code>{\n  \"preload\": {\n    \"subs\": [\n      {\n        \"version\": \"1\",\n        \"url\": \"subs/sub-texts\"\n      },\n      ...\n    ],\n    \"templates\": [\n      {\n        \"version\": \"1\",\n        \"url\": \"templates/template-page-default\"\n      },\n      ...\n    ],\n    \"pages\": [\n      {\n        \"version\": \"1\",\n        \"url\": \"page-home\"\n      },\n      ...\n    ]\n  }\n}\n</code></pre>"},{"location":"config/#1-global-resources","title":"1. Global Resources","text":"<p><code>global</code> defines reusable content that can be referenced by any page. All keys under <code>global</code> are arbitrary (you can choose meaningful names like <code>subs</code>, <code>templates</code>, <code>shared</code>, etc.), but each must map to an array of config objects.</p> <ul> <li>Global resources are not wrapped by a <code>root component</code> key.</li> <li>Typical usage includes <code>subs</code>, <code>templates</code>, or other reusable building blocks.</li> </ul>"},{"location":"config/#2-local-resources","title":"2. Local Resources","text":"<p><code>local</code> defines resources bound to specific page.</p> <ul> <li>Each entry must include a <code>root component</code> key.</li> <li>All other keys (like <code>pages</code>, <code>views</code>, <code>dialogs</code>) are arbitrary, but must resolve to arrays.</li> </ul>"},{"location":"config/#3-contextual-resources","title":"3. Contextual Resources","text":"<p><code>contextual</code> defines resources whose resolution depends on contextual data.</p> <ul> <li>Each object must include a mandatory <code>url-origin</code>.</li> <li><code>url</code> is optional:<ul> <li>If defined, it will be used directly. You can use ${url-origin} as replacement token</li> <li>If omitted, it defaults to <code>\"${url-origin}-contextual\"</code>.</li> </ul> </li> </ul>"},{"location":"config/#4-validity-and-caching","title":"4. Validity and Caching","text":"<ul> <li> <p><code>validity-key</code>:</p> <ul> <li>string used to explicitly invalidate a cached resource.</li> <li>When the key changes, the cache entry is replaced with a fresh downloaded content.</li> </ul> </li> <li> <p>Without <code>validity-key</code>:</p> <ul> <li>The system relies on TTL (Time-to-Live).</li> <li>If you don\u2019t set TTL, the resource will be cached forever.</li> </ul> </li> </ul>"},{"location":"config/#4-pre-download-optional","title":"4. Pre Download (optional)","text":"<ul> <li><code>pre-download</code>:<ul> <li>Boolean flag (<code>true</code> / <code>false</code>).</li> <li>If <code>true</code>, the resource is downloaded and cached immediately at startup.</li> <li>If <code>false</code>, it\u2019s fetched on first use.</li> </ul> </li> </ul> <p>Refer to the Templates Definition for detailed information and examples. For detailed page structure and usage, see the Pages Definition. For more details, see the Subs Definition.</p>"},{"location":"config/subs/","title":"Subs Definition","text":"<p>The <code>subs</code> system defines reusable chunks of content referenced throughout the app by ID. They allow a modular, maintainable, and dynamic way to define UI and content logic.</p> <p>All subs must be referenced by id pointer where they are needed as replacement \ud83d\udcd6 See: <code>object-definition/id.md</code></p> <pre><code>{\n  \"components\": [ ... ],\n  \"styles\": [ ... ],\n  \"options\": { ... },\n  \"contents\": [ ... ],\n  \"texts\": { ... },\n  \"colors\": { ... },\n  \"dimensions\": { ... }\n}\n</code></pre> <p>Each <code>subs</code> file can contain any combination of the following keys:</p> <ul> <li><code>texts</code> \u2013 Translatable strings organized by group. See Text Object Definition.</li> <li><code>colors</code> \u2013 Grouped color values used throughout styles and components. See Color Object Definition.</li> <li><code>dimensions</code> \u2013 Numeric or fractional sizes like font, padding, or spacing. See Dimension Object Definition.</li> <li><code>styles</code> \u2013 Reusable visual rules (font-size, color, etc.) referenced by components. See Style Object Definition.</li> <li><code>options</code> \u2013 Define data-driven value lists, such as select dropdown choices. See Options Object Definition.</li> <li><code>contents</code> \u2013 Logical structures for fields (title, placeholder, error messages). See Content Object Definition.</li> <li><code>components</code> \u2013 UI building blocks composed from content, style, and logic. See Component Object Definition.</li> </ul>"},{"location":"config/subs/#texts","title":"\ud83d\udd24 Texts","text":"<pre><code>{\n  \"texts\": {\n    \"common\": {\n      \"text-body-content-help\": \"There is no help available at the moment\",\n      \"text-body-content-complain\": {\n        \"default\": \"Mmm, I'm listening, yes.\",\n        \"fr\": \"Je m'en fou\"\n      }\n    }\n  }\n}\n</code></pre> <p>Texts are grouped under categories (<code>common</code>, <code>form</code>, etc.) and are accessed via ID references like <code>*form:text-body-content-help</code>.</p> <p>\u26a0\ufe0f Important: If no group is specified in a reference, the system will default to searching in the <code>common</code> group.</p>"},{"location":"config/subs/#colors","title":"\ud83c\udfa8 Colors","text":"<pre><code>{\n  \"colors\": {\n    \"common\": {\n      \"black\": \"#FF000000\",\n      \"gray\": {\n        \"default\": \"#FFD9D9D9\",\n        \"dark\": \"#FF3C3C3C\"\n      }\n    },\n    \"background\": {\n      \"gray-light\": {\n        \"default\": \"#FFD9D9D9\",\n        \"dark\": \"#FF2B2B2B\"\n      },\n      \"funny-color\": \"#FF66D9FF\"\n    }\n  }\n}\n</code></pre> <p>Colors are grouped (e.g. <code>common</code>, <code>background</code>) and accessed using references like <code>*common:black</code> or <code>*background:funny-color</code>.</p> <p>\u26a0\ufe0f Important: If no group is specified in a reference, the system will default to searching in the <code>common</code> group.</p>"},{"location":"config/subs/#dimensions","title":"\ud83d\udccf Dimensions","text":"<pre><code>{\n  \"dimensions\": {\n    \"font\": {\n      \"title\": \"32\",\n      \"body\": {\n        \"default\": \"24\",\n        \"huge\": \"48\"\n      }\n    },\n    \"padding\": {\n      \"spacer-24\": \"24\",\n      \"spacer-48\": \"48\"\n    }\n  }\n}\n</code></pre> <p>Dimensions are numeric or fractional values grouped by purpose (<code>font</code>, <code>padding</code>, etc.) and referenced via <code>*font:title</code> or <code>*padding:spacer-24</code>.</p> <p>\u26a0\ufe0f Important: If no group is specified in a reference, the system will default to searching in the <code>common</code> group.</p>"},{"location":"config/subs/#styles","title":"\ud83c\udfa8 Styles","text":"<pre><code>{\n  \"styles\": [\n    {\n      \"id\": \"title-label\",\n      \"font-size\": \"*font:title\",\n      \"font-color\": \"*blue\" // same as \"*common:blue\"\n    }\n  ]\n}\n</code></pre> <p>Styles are reusable visual definitions.</p>"},{"location":"config/subs/#contents","title":"\ud83e\uddf1 Contents","text":"<pre><code>{\n  \"contents\": [\n    {\n      \"id\": \"input-field-age-content\",\n      \"title\": \"A big title\",\n      \"placeholder\": { \"id\": \"*form:text-form-email-placeholder\" }\n    }\n  ]\n}\n</code></pre> <p>Contents define reusable content blocks. A content entry can reference another by <code>id</code>. In general, IDs are resolved recursively.</p>"},{"location":"config/subs/#components","title":"\ud83e\udde9 Components","text":"<pre><code>{\n  \"components\": [\n    {\n      \"id\": \"button-label-help-to-home\",\n      \"style\": { ... },\n      \"option\": { ... },\n      \"content\": { ... }\n    }\n  ]\n}\n</code></pre> <p>Components are reusable visual units that reference styles, content, etc... \ud83d\udcd6 See: <code>components/index.md</code></p>"},{"location":"config/templates/","title":"Template Example","text":"<p>Here is a full template JSON example. For details on components and references, see \ud83d\udcd6 <code>object-definition/id.md</code> and <code>components-definition/index.md</code>.</p> <pre><code>{\n  \"root\": {\n    \"id\": \"template-page-default\",\n    \"subset\": \"layout-linear\",\n    \"style\": {\n      \"orientation\": \"vertical\",\n      \"background-color\": { \"id\": \"*background:why-not-color\" },\n      \"fill-max-size\": true\n    },\n    \"content\": {\n      \"items\": [\n        {\n          \"subset\": \"label\",\n          \"style\": {\n            \"id\": \"*title-label\",\n            \"font-color\": \"#FF78FF78\"\n          },\n          \"content\": {\n            \"id\": \"*title-content\"\n          }\n        },\n        {\n          \"id\": \"*item-spacer\"\n        },\n        {\n          \"subset\": \"label\",\n          \"style\": {\n            \"font-size\": \"18\",\n            \"font-color\": { \"id\": \"*blue\" }\n          },\n          \"content\": {\n            \"id\": \"*body-content\"\n          }\n        },\n        {\n          \"id\": \"*item-spacer\"\n        },\n        {\n          \"subset\": \"button\",\n          \"content\": {\n            \"id\": \"*action-content\"\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"config/templates/#usage-example","title":"Usage example","text":"<p>This template is then used by supplying local declarations to fulfill the referenced IDs:</p> <pre><code>{\n  \"root\": {\n    \"id\": \"*template-page-default\"\n  },\n  \"contents\": [\n    {\n      \"id\": \"title-content\",\n      \"value\": { \"id\": \"*text-body-title\" }\n    },\n    {\n      \"id\": \"body-content\",\n      \"value\": { \"id\": \"*text-body-content\" }\n    },\n    {\n      \"id\": \"action-content\",\n      \"label\": { \"id\": \"*text-action-help\" },\n      \"action\": \"navigate://url/page-home\"\n    }\n  ],\n  \"texts\": {\n    \"common\": {\n      \"text-body-title\": \"Looking for help?\",\n      \"text-body-content\": { \"id\": \"*text-body-content-help\" },\n      \"text-action-help\": \"Navigate to home page\"\n    }\n  }\n}\n</code></pre>"},{"location":"config/templates/#explanation","title":"Explanation","text":"<ul> <li>The template references IDs like <code>*title-content</code>, <code>*body-content</code>, and <code>*action-content</code>.</li> <li>The usage JSON provides local declarations for these IDs inside <code>contents</code> and <code>texts</code>.</li> <li>Any referenced ID not found locally will be resolved from the shared preloaded <code>subs</code> objects. \ud83d\udcd6 <code>components-definition/index.md</code></li> <li>This allows flexible reuse and override of content per page while keeping a common structure.</li> </ul>"},{"location":"navigation/","title":"TUUCHO Navigation System","text":"<p>TUUCHO provides a flexible navigation system for each page using JSON definitions. Navigation is defined under <code>root/setting/navigation</code>.</p>"},{"location":"navigation/#navigation-structure","title":"Navigation Structure","text":"<p>Navigation is always defined inside each page's <code>root</code> under:</p> <pre><code>\"root\": {\n  \"setting\": {\n    \"navigation\": {\n      \"navigation\": {\n        \"extra\": {\n          \"is-background-solid\": true/false\n        },\n        \"definition\": [\n          {\n            \"selector\": { /* selector object */ },\n            \"option\": { /* option object */ },\n            \"transition\": { /* transition object */ }\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre> <ul> <li> <p><code>extra</code>: Helps the stack preparator for transitions.   Example: if a screen is an overlay, <code>is-background-solid</code> helps determine whether the previous screen should be included in the transition. (by default to true)</p> </li> <li> <p><code>definition</code>: Defines navigation rules, options, and transitions.</p> <ul> <li>Can be a single object if no selector is needed.</li> <li>Multiple definitions can be used with a selector to pick the correct navigation logic based on the current stack.</li> </ul> </li> </ul>"},{"location":"navigation/#selector-object","title":"Selector Object","text":"<p>Selectors determine when a navigation definition should apply:</p> <pre><code>\"selector\": {\n  \"type\": \"page-bread-crumb\",\n  \"values\": [\"page-c\", \"page-a\"]\n}\n</code></pre> <ul> <li><code>page-bread-crumb</code>: Applies the definition only if the last pages in the stack are exactly <code>page-c</code> followed by <code>page-a</code>.</li> </ul>"},{"location":"navigation/#option-object","title":"Option Object","text":"<p>The option object defines stack behavior for navigation:</p> <pre><code>\"option\": { \n  \"clear-stack\": true/false,\n  \"single\": true/false,\n  \"reuse\": \"last/first/true\",\n  \"popUpTo\": {\n    \"route\": \"\",\n    \"inclusive\": true/false,\n    \"greedy\": true/false\n  }\n}\n</code></pre> <ul> <li><code>clear-stack</code>: Clears the navigation stack before navigating.</li> <li><code>single</code>: Ensures only one instance of this page exists in the stack.</li> <li><code>reuse</code>: Can be <code>\"last\"</code>, <code>\"first\"</code>, or <code>true</code> to reuse an existing instance of the page, instead of creating a new one.</li> <li><code>popUpTo</code>: Pops the stack to a specific route with options:</li> <li><code>route</code>: Route to find.</li> <li><code>inclusive</code>: Remove the target route itself.</li> <li><code>greedy</code>: pop until the last routes (if multiple instance) or untile the first one found</li> </ul>"},{"location":"navigation/#transition-object","title":"Transition Object","text":"<p>The transition object defines screen animations:</p> <pre><code>\"transition\": {\n  \"forward\": {\n    \"enter\": { \"type\": \"\" },\n    \"exit\": { \"type\": \"\" }\n  },\n  \"backward\": {\n    \"enter\": { \"type\": \"\" },\n    \"exit\": { \"type\": \"\" }\n  }\n}\n</code></pre> <ul> <li><code>type</code>: Can be <code>\"fade\"</code>, <code>\"slide-horizontal\"</code> or <code>\"slide-vertical\"</code>.</li> <li>You can also provide a string as a shortcut with all default parameters for all directions</li> </ul> <pre><code>\"navigation\": \"fade\"\n</code></pre> <ul> <li>The <code>transition</code> keys can be customized depending on animation type. For details, see Transition Fade and Transition Slide.</li> </ul>"},{"location":"navigation/#key-points","title":"Key Points","text":"<ul> <li>Navigation must be defined under <code>root.setting.navigation</code> in each page.</li> <li>Each page can have multiple navigation definitions with selectors.</li> <li>TUUCHO handles reuse, single-top, clear-stack, and popUpTo rules similar to Compose Navigation.</li> </ul>"},{"location":"navigation/transition-fade/","title":"Transition: Fade","text":"<p>The fade transition controls how screens appear and disappear using alpha blending. TUUCHO provides a flexible JSON structure where defaults can be inherited from higher levels and overridden locally.</p>"},{"location":"navigation/transition-fade/#simplest","title":"Simplest","text":"<pre><code>\"transition\": \"fade\"\n</code></pre> <p>Nothing more to do, you will have fade transition in all directions ith default parameters</p>"},{"location":"navigation/transition-fade/#full-definition","title":"Full Definition","text":"<p>A complete fade transition object looks like this:</p> <pre><code>\"transition\": {\n  \"forward\": {\n    \"enter\": { \"type\": \"fade\", \"alpha-initial\":\"0.2\" },\n    \"exit\": { \"type\": \"fade\", \"alpha-initial\":\"0.3\" }\n  },\n  \"backward\": {\n    \"enter\": { \"type\": \"fade\", \"alpha-initial\":\"0.0\" },\n    \"exit\": { \"type\": \"fade\", \"alpha-initial\":\"0.5\" }\n  }\n}\n</code></pre> <ul> <li><code>forward</code>: Transition applied when navigating to a page.</li> <li><code>backward</code>: Transition applied when navigating back from a page.</li> <li><code>enter</code> / <code>exit</code>: Define how the current and next screens appear or disappear.</li> </ul> <p>They are available for all transitions type.</p> <ul> <li><code>alpha-initial</code>: Starting opacity (0.0 = fully transparent, 1.0 = fully opaque).</li> </ul>"},{"location":"navigation/transition-fade/#simplified-with-shared-type","title":"Simplified with Shared Type","text":"<p>The <code>type</code> can be placed at the higher level, and will be automatically applied to all <code>enter</code> and <code>exit</code> if missing:</p> <pre><code>\"transition\": {\n  \"forward\": {\n    \"type\": \"fade\",\n    \"enter\": { \"alpha-initial\":\"0.0\" },\n    \"exit\": { \"alpha-initial\":\"0.5\" }\n  },\n  \"backward\": {\n    \"type\": \"fade\",\n    \"enter\": { \"alpha-initial\":\"0.0\" },\n    \"exit\": { \"alpha-initial\":\"0.5\" }\n  }\n}\n</code></pre> <p>Here, <code>type: \"fade\"</code> is automatically injected into each <code>enter</code> and <code>exit</code>. This logic works will all transition parameters</p>"},{"location":"navigation/transition-fade/#global-type","title":"Global Type","text":"<p>You can also define <code>type</code> at the root of the transition object. It applies to all sub-objects unless overridden.</p> <pre><code>\"transition\": {\n  \"type\": \"fade\",\n  \"forward\": {\n    \"enter\": { \"alpha-initial\":\"0.0\" },\n    \"exit\": { \"alpha-initial\":\"0.5\" }\n  },\n  \"backward\": {\n    \"enter\": { \"alpha-initial\":\"0.0\" },\n    \"exit\": { \"type\": \"slide-vertical\" }  --&gt; Look here, the type for this one will be different\n  }\n}\n</code></pre> <ul> <li>The <code>backward/exit</code> explicitly overrides the type with a slide-vertical transition.</li> </ul>"},{"location":"navigation/transition-fade/#key-points","title":"Key Points","text":"<ul> <li>Fade transition uses opacity changes to animate screens in and out.</li> <li><code>alpha-initial</code> controls starting opacity and can differ for enter/exit.</li> </ul>"},{"location":"navigation/transition-slide/","title":"Transition: Slide","text":"<p>The slide transition controls how screens slide in and out of view. TUUCHO provides a flexible JSON structure where defaults can be inherited from higher levels and overridden locally.</p>"},{"location":"navigation/transition-slide/#simplest","title":"Simplest","text":"<pre><code>\"transition\": \"slide-horizontal\" or \"slide-vertical\"\n</code></pre> <p>Nothing more to do, you will have a slide transition in all directions with default parameters.</p>"},{"location":"navigation/transition-slide/#full-definition","title":"Full Definition","text":"<p>A complete slide transition object looks like this:</p> <pre><code>\"transition\": {\n  \"forward\": {\n    \"enter\": {\n      \"type\": \"slide-horizontal\",\n      \"duration\": 350,\n      \"entrance\": \"from-start\",\n      \"effect\": \"push\"\n    },\n    \"exit\": {\n      \"type\": \"slide-horizontal\",\n      \"duration\": 350,\n      \"exit-dark-alpha-factor\": 0.6,\n      \"effect\": \"cover\"\n    }\n  },\n  \"backward\": {\n    \"enter\": {\n      \"type\": \"slide-horizontal\",\n      \"duration\": 350,\n      \"entrance\": \"from-end\",\n      \"effect\": \"cover-push\"\n    },\n    \"exit\": {\n      \"type\": \"slide-horizontal\",\n      \"duration\": 350,\n      \"exit-dark-alpha-factor\": 0.6,\n      \"effect\": \"push\"\n    }\n  }\n}\n</code></pre> <ul> <li><code>forward</code>: Transition applied when navigating to a page.</li> <li><code>backward</code>: Transition applied when navigating back from a page.</li> <li><code>enter</code> / <code>exit</code>: Define how the current and next screens appear or disappear.</li> </ul> <p>They are available for all transitions type.</p> <ul> <li><code>duration</code>: Transition duration in milliseconds.</li> <li><code>exit-dark-alpha-factor</code>: Optional dark overlay factor applied when leaving a screen in <code>cover-push</code> or <code>cover</code> effect</li> <li><code>entrance</code>: Direction of the entering page. Options:<ul> <li><code>from-start</code></li> <li><code>from-end</code></li> <li><code>from-top</code></li> <li><code>from-bottom</code></li> </ul> </li> <li><code>effect</code>: Defines the variant transition to use:<ul> <li><code>push</code></li> <li><code>cover-push</code></li> <li><code>cover</code></li> </ul> </li> </ul>"},{"location":"navigation/transition-slide/#simplified-with-shared-type","title":"Simplified with Shared Type","text":"<p>You can define the <code>type</code> (and other parameters) at the higher level. They will be injected into all <code>enter</code> and <code>exit</code> unless overridden.</p> <pre><code>\"transition\": {\n  \"type\": \"slide-vertical\",\n  \"duration\": 350,\n  \"exit-dark-alpha-factor\": 0.5,\n  \"entrance\": \"from-bottom\"\n  \"forward\": {\n    \"effect\": \"cover-push\"\n  },\n  \"backward\": {\n    \"effect\": \"cover\"\n  }\n}\n</code></pre> <p>Here: - <code>type</code>, <code>duration</code>, <code>exit-dark-alpha-factor</code> and <code>entrance</code> are automatically applied to all transitions. - For <code>forward</code> and <code>backward</code> we use a different variant.</p>"},{"location":"navigation/transition-slide/#key-points","title":"Key Points","text":"<ul> <li>Slide transition moves screens in and out of view.</li> <li>Horizontal: <code>from-start</code>, <code>from-end</code>.</li> <li>Vertical: <code>from-top</code>, <code>from-bottom</code>.</li> <li>Effects: <code>push</code>, <code>cover-push</code>, <code>cover</code>.</li> </ul>"},{"location":"object-definition/","title":"Object Definition","text":"<p>This section describes the primary JSON keys used in the TUUCHO rendering engine. You will find each fundamental object\u2019s capabilities and its intended purpose.</p> <ul> <li>id \u2014 Object identifiers</li> <li>page-setting \u2014 Page Setting definitions</li> <li>component-setting \u2014 Component Setting definitions</li> <li>component \u2014 Component definitions (the base of all UI elements)</li> <li>option \u2014 Option definitions for components (parameters to modify or extend features)</li> <li>style \u2014 Style definitions for components (all visual appearance settings)</li> <li>content \u2014 Content data for components (the actual UI element content)</li> <li>state \u2014 State definitions for components (all current state, initial value, etc...)</li> <li>text \u2014 Multilingual text references</li> <li>color \u2014 Color definitions</li> <li>dimension \u2014 Dimension definitions</li> <li>action \u2014 Action definitions (e.g., navigation, form submission)</li> <li>Form-validator \u2014 Validator definitions (form field validation rules)</li> </ul> <p>For more practical examples, please refer to the Components Definition.</p>"},{"location":"object-definition/action/","title":"Action Definition","text":"<p>The <code>action</code> object defines an executable command with optional parameters. It supports specifying a mandatory command via the <code>value</code> key and additional context-dependent parameters in the <code>params</code> object.</p>"},{"location":"object-definition/action/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>value</code> (required): specifies the action command using the format <code>command://authority/target</code>.</li> <li><code>other</code> (optional): any key containing value whose depends on the specific action command.</li> </ul> <p>Example for the <code>form-send</code> action:</p> <pre><code>\"action\": {\n  \"value\": \"form-send://url/form-from-page-home\",\n  \"action-validated\": \"navigate://url/page-confirmation\",\n  \"action-denied\": \"navigate://url/page-failure\"\n}\n</code></pre> <p>This example instructs to send a form from the home page URL and navigate to a confirmation page upon validation.</p>"},{"location":"object-definition/action/#2-string-format-short-syntax","title":"2. String Format (Short Syntax)","text":"<p>When no parameters are needed, you can use a simple string with the action command:</p> <pre><code>\"action\": \"navigate://url/page-help\"\n</code></pre> <p>This is equivalent to:</p> <pre><code>\"action\": {\n  \"value\": \"navigate://url/page-help\"\n</code></pre>"},{"location":"object-definition/action/#3-command-format","title":"3. Command Format","text":"<p>The <code>value</code> follows the command syntax: command://authority/target</p> <ul> <li>command: the action type (e.g., <code>form-send</code>, <code>navigate</code>, etc.)</li> <li>authority: the resource category or domain (e.g., <code>url</code>)</li> <li>target: the specific target or resource identifier</li> </ul>"},{"location":"object-definition/action/#summary-table","title":"Summary Table","text":"Format Purpose Example Full object with params Complex action with parameters See section 1 String value Simple action without parameters <code>\"action\": \"form-send://url/form-from-page-home\"</code> Command format Syntax for the action command <code>command://authority/target</code> <p>For more details and examples, see the following component definitions that use the <code>action</code> object: - Button</p> <p>More components using <code>action</code> will be added soon.</p>"},{"location":"object-definition/color/","title":"Color Definition","text":"<p>The <code>color</code> object is used to define multi-context color values. It supports both direct definitions and references, allowing for consistent theming and reusability across screens or subs.</p>"},{"location":"object-definition/color/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>id</code> follows the same rules outlined in ID Definition, meaning it can be either a unique definition, a pointer, or a combination.</li> <li><code>default</code>: defines the fallback or main color value (required)</li> <li>Additional keys (e.g., <code>dark</code>, <code>light</code>, or any custom theme/context code) define alternative color values for different contexts or themes</li> </ul> <p>Example:</p> <pre><code>\"key-color\": {\n  \"id\": \"primary-color\",\n  \"default\": \"#007bff\",\n  \"dark\": \"#0056b3\",\n  \"light\": \"#66b2ff\"\n}\n</code></pre> <p>This format ensures the application can render colors based on the active theme or context. If no value is found for the current context, the <code>default</code> value is used.</p> <ul> <li><code>key-color</code> depends on the components. Check the component definition.</li> </ul>"},{"location":"object-definition/color/#2-string-format-short-syntax","title":"2. String Format (Short Syntax)","text":"<p>You can simplify the declaration by using a single string for the default color:</p> <pre><code>\"key-color\": \"#007bff\"\n</code></pre> <p>This is equivalent to:</p> <pre><code>\"key-color\": {\n  \"default\": \"#007bff\"\n}\n</code></pre> <p>This format is useful when you\u2019re not using multiple themes or want to quickly define a static color.</p>"},{"location":"object-definition/color/#3-pointer-reference-short-syntax","title":"3. Pointer Reference (Short Syntax)","text":"<p>Instead of defining color directly, you can reference a color defined elsewhere (in the same page or in Subs) by prefixing the value with <code>*</code>.</p> <p>Example:</p> <pre><code>\"key-color\": \"*shared-primary-color\"\n</code></pre> <p>Equivalent to:</p> <pre><code>\"key-color\": {\n  \"id\": \"*shared-primary-color\"\n}\n</code></pre> <p>The engine will resolve the pointer by searching first in the local page, then in the shared Subs.</p> <p>This approach helps maintain consistent colors across pages and reduces duplication.</p>"},{"location":"object-definition/color/#summary-table","title":"Summary Table","text":"Format Purpose Example Full object with contexts Multicontext or themed colors See section 1 String value Quick/default color <code>\"color\": \"#ff0000\"</code> String starting with <code>*</code> Pointer to shared/local color object <code>\"color\": \"*shared-primary-color\"</code> <p>For more advanced examples and usage patterns, see the Components Definition.</p>"},{"location":"object-definition/component-setting/","title":"Component Setting","text":"<pre><code>\"setting\": {\n  \"shadower\": { ... },\n  \"navigation\": { ... }\n}\n</code></pre> <p><code>shadower</code> and <code>navigation</code> is only meaningful on <code>root/setting</code>. There are ignored if you apply them on sub-component.</p>"},{"location":"object-definition/component-setting/#shadower","title":"Shadower","text":"<p>The <code>shadower</code> object enables contextual data loading. It controls whether extra contextual resources (components, content, texts) are requested associated to context (user specific data).</p>"},{"location":"object-definition/component-setting/#navigation-forward-backward","title":"Navigation Forward / Backward","text":"<ul> <li>To activate contextual loading, you must explicitly enable the shadower on navigation forward and/or backward.</li> <li>Two flags are available:<ul> <li><code>enable</code>: <code>true</code> or <code>false</code> \u2014 turn the shadower on or off for that direction.</li> <li><code>wait-done-to-render</code>:<ul> <li><code>true</code> \u2192 synchronous, the page waits until contextual resources are fully loaded before rendering.</li> <li><code>false</code> \u2192 asynchronous (default), the page renders immediately and contextual resources are added when ready.</li> </ul> </li> </ul> </li> </ul> <p>Example:</p> <pre><code>\"setting\": {\n    \"shadower\": {\n        \"navigate-forward\": {\n            \"wait-done-to-render\": false/true,\n            \"enable\": true/true\n        },\n        \"contextual\": {\n            \"url\": {\n              \"component\": \"${url-origin}-contextual-components\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"object-definition/component-setting/#contextual","title":"Contextual","text":"<p>The <code>contextual</code> section defines URLs for contextual resources that should be loaded dynamically based on the current page. You can use ${url-origin} as replacement token.</p> <p>You can specify contextual URLs for: - <code>component</code> - <code>content</code> - <code>text</code></p> <p>URLs can also be declared individually inside the ID object of each resource. See ID object.</p>"},{"location":"object-definition/component-setting/#navigation","title":"Navigation","text":"<p>For <code>setting/navigation</code> Refer to the Navigation page for details.</p>"},{"location":"object-definition/component/","title":"Component Definition","text":"<p>The <code>component</code> key defines a UI element, either directly or by referencing a shared definition. It supports reuse via references, and provides configuration using <code>id</code>, <code>subset</code>, <code>style</code>, <code>content</code>, and <code>option</code>.</p>"},{"location":"object-definition/component/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>id</code>: follows the same rules outlined in ID Definition. It can be a unique ID, a pointer, or a combination.</li> <li><code>subset</code>: Mandatory unless inherited through a reference. Indicates the component type (e.g., <code>button</code>, <code>input</code>, <code>label</code>).</li> <li><code>option</code>: A Option Object applied to this component.</li> <li><code>style</code>: A Style Object applied to this component.</li> <li><code>content</code>: A Content Object applied to this component.</li> </ul> <p>Example:</p> <pre><code>\"component\": {\n  \"id\": \"submit-button\",\n  \"subset\": \"button\",\n  \"style\": \"*style-primary-button\",\n  \"content\": {\n    \"label\": \"Submit\",\n    \"action\": {\n      \"value\": \"form-send://url/form-from-newletter-subscription\",\n      \"params\": {\n        \"action-validated\": \"navigate://url/page-confirmation\"\n      }\n    }\n  },\n  \"option\": {\n    \"analytics\": [\"on-appear\", \"on-click\"]\n  }\n}\n</code></pre>"},{"location":"object-definition/component/#2-pointer-reference-short-syntax","title":"2. Pointer Reference (Short Syntax)","text":"<p>A component can be defined by referencing a shared or previously defined component using a string starting with <code>*</code>.</p> <pre><code>\"component\": \"*shared-submit-button\"\n</code></pre> <p>Equivalent to:</p> <pre><code>\"component\": {\n  \"id\": \"*shared-submit-button\"\n}\n</code></pre> <p>If the referenced component does not define <code>subset</code>, the current reference must include it.</p>"},{"location":"object-definition/component/#subset-resolution-rules","title":"Subset Resolution Rules","text":"<ul> <li> <p><code>subset</code> is mandatory if:</p> <ul> <li>The component is defined inline and not referencing anything.</li> <li>The referenced component does not define a <code>subset</code>.</li> </ul> </li> <li> <p><code>subset</code> is optional if:</p> <ul> <li>The referenced component already defines it.</li> </ul> </li> </ul> <p>Failure to define <code>subset</code> where required will result in a parsing error.</p>"},{"location":"object-definition/component/#summary-table","title":"Summary Table","text":"Field Required Description <code>id</code> Optional Identifier or pointer (see ID) <code>subset</code> Conditional Required unless inherited through a pointer <code>option</code> Optional A Option Object to apply to this component <code>style</code> Optional A Style Object to apply to this component <code>content</code> Optional A Content Object to apply to this component <p>For supported <code>subset</code> values and component-specific options, see the Components Definition.</p>"},{"location":"object-definition/content/","title":"Content Definition","text":"<p>The <code>content</code> object defines component-specific content such as nested elements, labels, or interactive behavior. It supports both unique identification and reference-based reuse.</p>"},{"location":"object-definition/content/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>id</code>: follows the same rules outlined in ID Definition. It can be a unique ID, a pointer, or a combination.</li> <li><code>subset</code>: (optional) a string indicating the component type this style belongs to (e.g., <code>\"button\"</code>, <code>\"label\"</code>). This helps the parser optimize resolution. If omitted, the parser will infer the component type during resolution.</li> <li>Other keys depend on the component using this content. For detailed content properties, refer to the Components Definition.</li> </ul> <p>Example:</p> <pre><code>\"content\": {\n  \"id\": \"submit-button-content\",\n  \"subset\": \"button\",\n  \"label\": {\n    \"default\": \"Submit\",\n    \"fr\": \"Soumettre\"\n  },\n  \"action\": \"navigate://url/page-help\"\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>label</code> follows the text object rules (see Text)</li> <li><code>action</code> follows the action object structure (see Action)</li> </ul>"},{"location":"object-definition/content/#2-pointer-reference-short-syntax","title":"2. Pointer Reference (Short Syntax)","text":"<p>If the <code>content</code> is defined as a string starting with <code>*</code>, it is treated as a reference to another <code>content</code> object.</p> <pre><code>\"content\": \"*shared-content-submit-button\"\n</code></pre> <p>This is equivalent to:</p> <pre><code>\"content\": {\n  \"id\": \"*shared-content-submit-button\"\n}\n</code></pre> <p>The engine will resolve the pointer locally first, then in shared subs.</p>"},{"location":"object-definition/content/#summary-table","title":"Summary Table","text":"Format Purpose Example Full object Inline content definition See above example String starting with <code>*</code> Pointer to shared/local content object <code>\"content\": \"*shared-confirm-button-content\"</code> <p>For more component-specific keys inside <code>content</code>, refer to the Components Definition.</p>"},{"location":"object-definition/dimension/","title":"Dimension Definition","text":"<p>The <code>dimension</code> object is used to define unitless numeric values that represent sizes, lengths, or other measurements. It supports both direct definitions and references, allowing for reuse and consistency across screens or subs.</p>"},{"location":"object-definition/dimension/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>id</code> follows the same rules outlined in ID Definition, meaning it can be either a unique definition, a pointer, or a combination.</li> <li><code>default</code>: defines the fallback or main numeric value (required)</li> <li>Additional keys (e.g., different contexts or variants) can define alternative numeric values</li> </ul> <p>Example:</p> <pre><code>\"key-dimension\": {\n  \"id\": \"button-height\",\n  \"default\": 48,\n  \"small\": 36,\n  \"large\": 64\n}\n</code></pre> <p>This format ensures the application can render dimensions based on the active context or variant. If no value is found for the current context, the <code>default</code> value is used.</p> <ul> <li><code>key-dimension</code> depends on the components. Check the component definition.</li> </ul>"},{"location":"object-definition/dimension/#2-primitive-format-short-syntax","title":"2. Primitive Format (Short Syntax)","text":"<p>You can simplify the declaration by using a single numeric value:</p> <pre><code>\"key-dimension\": 48\n</code></pre> <p>This is equivalent to:</p> <pre><code>\"key-dimension\": {\n  \"default\": 48\n}\n</code></pre> <p>This format is useful when you\u2019re not using multiple variants or want to quickly define a static dimension.</p>"},{"location":"object-definition/dimension/#3-pointer-reference-short-syntax","title":"3. Pointer Reference (Short Syntax)","text":"<p>Instead of defining dimension directly, you can reference a dimension defined elsewhere (in the same page or in Subs) by prefixing the value with <code>*</code>.</p> <p>Example:</p> <pre><code>\"key-dimension\": \"*shared-button-height\"\n</code></pre> <p>Equivalent to:</p> <pre><code>\"key-dimension\": {\n  \"id\": \"*shared-button-height\"\n}\n</code></pre> <p>The engine will resolve the pointer by searching first in the local page, then in the shared Subs.</p> <p>This approach helps maintain consistent dimensions across pages and reduces duplication.</p>"},{"location":"object-definition/dimension/#important-note-on-units","title":"Important Note on Units","text":"<p>Dimension values are unitless numbers. The interpretation of units (pixels, dp, em, etc.) is handled by the component that consumes these values. This allows flexibility across different platforms or rendering contexts.</p>"},{"location":"object-definition/dimension/#summary-table","title":"Summary Table","text":"Format Purpose Example Full object with variants Multi-variant or contextual values See section 1 Numeric value Quick/default dimension <code>\"dimension\": 24</code> String starting with <code>*</code> Pointer to shared/local dimension object <code>\"dimension\": \"*shared-padding\"</code> <p>For more advanced examples and usage patterns, see the Components Definition.</p>"},{"location":"object-definition/form-validator/","title":"Form Validator Definition","text":"<p>The <code>form validator</code> object is used to enforce validation rules for input components. It supports multiple formats\u2014from simple strings to detailed object arrays\u2014offering flexibility in how validation logic is defined and reused.</p>"},{"location":"object-definition/form-validator/#1-array-format-multiple-validators","title":"1. Array Format (Multiple Validators)","text":"<p>You can define multiple validators using an array of objects.</p> <p>Each validator object must include:</p> <ul> <li><code>type</code>: the validation type (e.g., <code>\"string-not-null\"</code>, <code>\"string-min-value\"</code>, <code>\"string-email\"</code>, etc.)</li> <li><code>id-message-error</code>: a reference to the error message shown when validation fails. This must be an ID pointing to a message defined in the content section. It is context-dependent\u2014refer to the desired component's documentation for more details.</li> <li>Additional keys may be required depending on the <code>type</code> (e.g., <code>value</code> for min/max validators).</li> </ul> <p>Example:</p> <pre><code>\"form-validator\": [\n  {\n    \"type\": \"string-min-value\",\n    \"value\": \"18\",\n    \"id-message-error\": \"*validator-1\"\n  },\n  {\n    \"type\": \"string-max-value\",\n    \"value\": \"65\",\n    \"id-message-error\": \"*validator-2\"\n  },\n  {\n    \"type\": \"string-not-null\",\n    \"id-message-error\": \"*validator-4\"\n  }\n]\n</code></pre>"},{"location":"object-definition/form-validator/#2-object-format-single-validator","title":"2. Object Format (Single Validator)","text":"<p>When only one validator is needed, you can define it as a single object:</p> <pre><code>\"form-validator\": {\n  \"type\": \"string-email\",\n  \"id-message-error\": \"*validator-1\"\n}\n</code></pre> <p>This format behaves the same as the array version, but it's optimized for single-rule use cases.</p>"},{"location":"object-definition/form-validator/#3-string-format-short-syntax","title":"3. String Format (Short Syntax)","text":"<p>For basic use cases, you can use a simple string to define the validator type.</p> <p>In this format:</p> <ul> <li>The string value is used as the <code>type</code>.</li> <li>The <code>id-message-error</code> is auto-resolved using the first message found in the <code>content</code> section.</li> </ul> <p>Example:</p> <pre><code>\"form-validator\": \"string-not-null\"\n</code></pre> <p>Equivalent to:</p> <pre><code>\"form-validator\": {\n  \"type\": \"string-not-null\",\n  \"id-message-error\": /* auto-resolved */\n}\n</code></pre>"},{"location":"object-definition/form-validator/#4-supported-validator-types","title":"4. Supported Validator Types","text":"<p>Below are the currently supported validator types:</p> <ul> <li> <p><code>string-not-null</code>   Ensures the input is not null or empty.</p> </li> <li> <p><code>string-email</code>   Validates that the input is a valid email format.</p> </li> <li> <p><code>string-only-digits</code>   Validates that the input contains only digits.</p> </li> <li> <p><code>string-min-length</code>   Ensures the input length is at least a minimum value. Requires: <code>length</code> (the minimum length as a number or string).</p> </li> <li> <p><code>string-max-length</code>   Ensures the input length does not exceed a maximum value. Requires: <code>length</code> (the maximum length as a number or string).</p> </li> <li> <p><code>string-min-digit-length</code>   Ensures the number of digits in the input is at least the specified minimum. Requires: <code>length</code> (the minimum digit count as a number or string).</p> </li> <li> <p><code>string-min-value</code>   Ensures the numeric value of the input is at least the specified minimum. Requires: <code>value</code> (the minimum numeric value as a number or string).</p> </li> <li> <p><code>string-max-value</code>   Ensures the numeric value of the input does not exceed the specified maximum. Requires: <code>value</code> (the maximum numeric value as a number or string).</p> </li> </ul>"},{"location":"object-definition/form-validator/#important-notes","title":"Important Notes","text":"<ul> <li>The <code>type</code> field is mandatory in all formats.</li> <li>The <code>id-message-error</code> field is also mandatory, unless using the short string format\u2014then it is automatically resolved.</li> <li>Additional keys like <code>value</code> are required depending on the validator <code>type</code>.</li> </ul>"},{"location":"object-definition/form-validator/#summary-table","title":"Summary Table","text":"Format Purpose Example Array of objects Multiple validators See section 1 Single object One validator with full control <code>\"validator\": { \"type\": \"string-email\", ... }</code> String (short syntax) Simple validator with auto-error <code>\"validator\": \"string-not-null\"</code> <p>For more details and examples, see the following component definitions that use the <code>validator</code> object: - Field Component</p>"},{"location":"object-definition/id/","title":"ID Definition","text":"<p>The <code>id</code> field plays a dual role in defining components within the UI rendering system. It can serve as a unique identifier or as a pointer (reference) to another element, enabling both targeted interactions and structural reusability.</p>"},{"location":"object-definition/id/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>value</code>: A unique ID to target the component (for animations or logic)</li> <li><code>source</code>: A reference to reuse a shared or predefined component</li> <li><code>url-source</code>: Optional field that allow to define a custom url and method where the rest of data is.</li> </ul> <p>Example:</p> <pre><code>\"id\": {\n  \"value\": \"button-form-confirm\",\n  \"source\": \"*shared-button-primary\",\n  \"url-source\": {\n     \"contextual\": \"${url-origin}-contextual-texts\"\n  }\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>\"button-form-confirm\"</code> is the unique ID you can target in animations or logic.</li> <li><code>\"*shared-button-primary\"</code> is a pointer referencing a shared component defined elsewhere.</li> <li><code>url-source</code> with <code>contextual</code> method inform to retrieve the missing data at this url.</li> </ul> <p>This pattern combines reusability with precise control, useful when you want to interact with a reused component as a distinct element.</p>"},{"location":"object-definition/id/#2-unique-identifier-short-syntax","title":"2. Unique Identifier (Short Syntax)","text":"<p>When the <code>id</code> is a simple string not starting with <code>*</code>, it acts as a unique identifier for the component:</p> <ul> <li>Used for animations</li> <li>Used for targeted actions or dynamic behaviors</li> </ul> <p>Example:</p> <pre><code>\"id\": \"login-form\"\n</code></pre> <p>This is equivalent to:</p> <pre><code>\"id\": {\n  \"value\": \"login-form\"\n}\n</code></pre> <p>Each <code>id</code> should be unique within its scope (e.g., within a page or a subs collection).</p>"},{"location":"object-definition/id/#3-pointer-reference-short-syntax","title":"3. Pointer Reference (Short Syntax)","text":"<p>If the <code>id</code> is a string starting with <code>*</code>, it is treated as a pointer (reference) to another component:</p> <ul> <li>The engine first looks for the referenced element in the local page scope, then in the shared subs.</li> <li>This enables reusing shared components without redefining them.</li> </ul> <p>Example:</p> <pre><code>\"id\": \"*shared-header\"\n</code></pre> <pre><code>\"id\": {\n  \"source\": \"*shared-header\"\n}\n</code></pre> <p>In this case, the element's <code>id</code> points to the shared <code>\"shared-header\"</code> component.</p>"},{"location":"object-definition/id/#4-auto-generated-ids","title":"4. Auto-Generated IDs","text":"<p>If a component is only defined as a pointer (e.g., <code>\"id\": \"*some-shared-id\"</code>) without an explicit unique ID, TUUCHO automatically assigns an internal ID.</p> <ul> <li>These auto-generated IDs cannot be referenced in animations or logic because their exact value is unknown.</li> </ul>"},{"location":"object-definition/id/#summary-table","title":"Summary Table","text":"Format Purpose Example Object with <code>value</code> + <code>source</code> Unique + reusable (combined reference) <code>&lt;json&gt;\"id\": { \"value\": \"btn-ok\", \"source\": \"*shared-button\" }&lt;/json&gt;</code> String without <code>*</code> Unique identifier <code>&lt;json&gt;\"id\": \"login-form\"&lt;/json&gt;</code> String starting with <code>*</code> Pointer to a shared/local component <code>&lt;json&gt;\"id\": \"*shared-header\"&lt;/json&gt;</code> <p>Use the object format if you need both a pointer and a unique, trackable ID for animation or other features.</p> <p>For more details, see the Components Definition.</p>"},{"location":"object-definition/option/","title":"Option Definition","text":"<p>The <code>option</code> object is used to define customizable configuration or behavioral values for components. It supports both full object definitions and pointer references, promoting reuse and modular organization across screens or subs.</p>"},{"location":"object-definition/option/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>id</code>: follows the same rules outlined in ID Definition. It can be a unique ID, a pointer, or a combination.</li> <li><code>subset</code>: (optional) a string indicating the component type this style belongs to (e.g., <code>\"button\"</code>, <code>\"label\"</code>). This helps the parser optimize resolution. If omitted, the parser will infer the component type during resolution.</li> <li>Other keys are context-specific and depend on the component that consumes the option. For valid option keys, refer to the relevant Components Definition.</li> </ul> <p>Example:</p> <pre><code>\"option\": {\n  \"id\": /* id object */,\n  \"validator\": /* validator object */\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>validator</code> follow the validator object rules.</li> </ul>"},{"location":"object-definition/option/#2-pointer-reference-short-syntax","title":"2. Pointer Reference (Short Syntax)","text":"<p>An <code>option</code> can be defined as a primitive string starting with <code>*</code>, referencing another option defined in the same page or in Subs.</p> <ul> <li>Note: Plain string values (not starting with <code>*</code>) are not allowed as option definitions.</li> </ul> <p>Example:</p> <pre><code>\"option\": \"*shared-email-field-options\"\n</code></pre> <p>Equivalent to:</p> <pre><code>\"option\": {\n  \"id\": \"*shared-email-field-options\"\n}\n</code></pre> <p>This allows referencing shared configuration logic across components for consistency and reduced duplication.</p>"},{"location":"object-definition/option/#important-notes","title":"Important Notes","text":"<ul> <li>The <code>subset</code> key assists the parser in identifying which component the option applies to. Although optional, specifying it can improve parsing and validation, especially for shared or split elements. If the option is defined for the entire component, including <code>subset</code> is not necessary.</li> <li>Additional keys in the <code>option</code> object are defined by the target component. For valid properties, see the Components Definition.</li> </ul>"},{"location":"object-definition/option/#summary-table","title":"Summary Table","text":"Format Purpose Example Full object with <code>id</code> and keys Complete option configuration See above example String starting with <code>*</code> Pointer to shared/local option object <code>\"option\": \"*shared-email-field-options\"</code> <p>For more advanced examples and usage patterns, see the Components Definition.</p>"},{"location":"object-definition/page-setting/","title":"Page Setting","text":"<p>page setting is setting key at level 0 inside the json file</p> <pre><code>\"setting\": {\n  \"ttl\": { ... }\n}\n</code></pre>"},{"location":"object-definition/page-setting/#ttl","title":"TTL","text":"<p>The <code>ttl</code> object defines the lifetime policy for cached resources. It controls how long a resource remains valid before the system considers it stale and requests a fresh copy.</p>"},{"location":"object-definition/page-setting/#strategies","title":"Strategies","text":"<p>The <code>strategy</code> field defines the caching rule to apply:</p> <ol> <li> <p>Transient The resource is cached for a limited duration, defined by <code>transient-value</code>.</p> </li> <li> <p><code>transient-value</code> accepts multiple formats:</p> <ul> <li>Relative durations:<ul> <li><code>10s</code> = 10 seconds</li> <li><code>5mn</code> = 5 minutes</li> <li><code>7d</code> = 7 days</li> <li><code>2mth</code> = 2 months</li> </ul> </li> <li>Absolute ISO UTC datetime:<ul> <li><code>\"2025-09-15T00:00:00Z\"</code></li> </ul> </li> <li>Date:<ul> <li>00h00 is applied.</li> </ul> </li> <li>Time of day:<ul> <li><code>\"03:00\"</code> \u2192 if before current time, same day is applied;   if above current time, next day is applied.</li> </ul> </li> </ul> </li> </ol> <pre><code>\"setting\": {\n  \"ttl\": {\n    \"strategy\": \"transient\",\n    \"transient-value\": \"5mn\"\n  }\n}\n</code></pre> <ol> <li>Single-use The resource is valid only for a single access. After being used once, it is purged from the cache.</li> </ol> <pre><code>\"setting\": {\n  \"ttl\": {\n    \"strategy\": \"single-use\"\n  }\n}\n</code></pre>"},{"location":"object-definition/page-setting/#default-behavior","title":"Default Behavior","text":"<p>If <code>ttl</code> is absent:</p> <ul> <li> <p>Global and Local resources:   Cached indefinitely, until the <code>validity-key</code> defined in the config changes. Refer to the Config   No expiration is applied unless explicitly declared.</p> </li> <li> <p>Contextual resources:   Cached with a single-use policy by default, even without explicit <code>ttl</code>.</p> </li> </ul>"},{"location":"object-definition/page-setting/#summary","title":"Summary","text":"<ul> <li><code>ttl</code> is optional but recommended for dynamic resources.</li> <li>Strategies:<ul> <li>transient \u2192 expires after a duration (<code>transient-value</code>) or at a given date/time.</li> <li>single-use \u2192 removed from cache immediately after first use.</li> </ul> </li> <li>Defaults:<ul> <li>Global/Local = infinite until <code>validity-key</code> changes.</li> <li>Contextual = single-use if not specified.</li> </ul> </li> <li>Use ISO UTC datetimes or shorthand units (<code>s</code>, <code>mn</code>, <code>d</code>, <code>mth</code>) for <code>transient-value</code>.</li> </ul>"},{"location":"object-definition/state/","title":"State Definition","text":"<p>The <code>state</code> object is used to define the internal state configuration of a component.</p>"},{"location":"object-definition/state/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>id</code>: follows the same rules outlined in ID Definition. It can be a unique ID, a pointer, or a combination.</li> <li><code>subset</code>: (optional) a string indicating the component type this state belongs to (e.g., <code>\"field\"</code>). This helps the parser optimize resolution. If omitted, the parser will infer the component type during resolution.</li> <li>Other keys are context-specific and defined by the component consuming the state. For valid option keys, refer to the relevant Components Definition.</li> </ul> <p>Example:</p> <pre><code>\"state\": {\n  \"id\": /* id object */\n  \"initial-value\": /* text object */\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>initial-value</code> is a Text Object and sets the field\u2019s initial content.</li> </ul>"},{"location":"object-definition/state/#important-notes","title":"Important Notes","text":"<ul> <li>The <code>subset</code> key helps the parser determine which component the state is applied to. While optional, using it is recommended for shared or dynamic states that span multiple components.</li> <li>Additional keys in the <code>state</code> object are defined by the target component. For valid properties, see the Components Definition.</li> </ul> <p>For more advanced patterns and component-specific keys, see the Components Definition.</p>"},{"location":"object-definition/style/","title":"Style Definition","text":"<p>The <code>style</code> object is used to define visual styling information for components. It supports both direct definitions and references, enabling style reuse and modularity across screens or subs.</p>"},{"location":"object-definition/style/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>id</code>: follows the same rules outlined in ID Definition. It can be a unique ID, a pointer, or a combination.</li> <li><code>subset</code>: (optional) a string indicating the component type this style belongs to (e.g., <code>\"button\"</code>, <code>\"label\"</code>). This helps the parser optimize resolution. If omitted, the parser will infer the component type during resolution.</li> <li>Other keys depend on the specific component and define style properties relevant to that component. For detailed style properties, refer to the Components Definition.</li> </ul> <p>Example:</p> <pre><code>\"style\": {\n  \"id\": \"primary-button-style\",\n  \"subset\": \"button\",\n  \"backgroundColor\": \"#007BFF\",\n  \"textColor\": \"#FFFFFF\",\n  \"borderRadius\": 4\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>backgroundColor</code> and <code>textColor</code> follow the color object rules.</li> <li><code>borderRadius</code> follows the dimension object rules.</li> </ul> <p>For simplicity, the example uses the short syntax (primitive values).</p>"},{"location":"object-definition/style/#2-pointer-reference-short-syntax","title":"2. Pointer Reference (Short Syntax)","text":"<p>A <code>style</code> can be defined as a primitive string starting with <code>*</code>, which acts as a reference to another style defined elsewhere (in the same page or in Subs).</p> <ul> <li>Note: Plain string values (not starting with <code>*</code>) are not allowed as styles.</li> </ul> <p>Example:</p> <pre><code>\"style\": \"*shared-primary-button-style\"\n</code></pre> <p>Equivalent to:</p> <pre><code>\"style\": {\n  \"id\": \"*shared-primary-button-style\"\n}\n</code></pre> <p>The engine resolves this pointer by searching first in the local page, then in shared Subs, allowing for consistent style reuse.</p>"},{"location":"object-definition/style/#important-notes","title":"Important Notes","text":"<ul> <li>The <code>subset</code> key assists the parser in identifying which component the style applies to. Although optional, specifying it can improve parsing and validation, especially for shared or split elements. If the style is defined for the entire component, including <code>subset</code> is not necessary.</li> <li>Other keys in the style object depend on the target component and should be defined accordingly. For valid style properties, refer to the specific Components Definition.</li> </ul>"},{"location":"object-definition/style/#summary-table","title":"Summary Table","text":"Format Purpose Example Full object with <code>id</code> and <code>subset</code> Complete style definition See above example String starting with <code>*</code> Pointer to shared/local style object <code>\"style\": \"*shared-primary-button-style\"</code> <p>For more advanced examples and usage patterns, see the Components Definition.</p>"},{"location":"object-definition/text/","title":"Text Definition","text":"<p>The <code>text</code> object is used to define multilingual textual content. It supports both direct definitions and references, allowing for localization and reusability across screens or subs.</p>"},{"location":"object-definition/text/#1-full-object-format","title":"1. Full Object Format","text":"<ul> <li><code>id</code>: follows the same rules outlined in ID Definition, meaning it can be either a unique definition, a pointer, or a combination.</li> <li><code>default</code>: defines the fallback or main text (required)</li> <li>Additional keys (e.g., <code>en</code>, <code>fr</code>, <code>ja</code>, etc.) define translations for different language codes</li> </ul> <p>Example:</p> <pre><code>\"key-text\": {\n  \"id\": \"title\",\n  \"default\": \"Click here\",\n  \"en\": \"Click here\",\n  \"fr\": \"Cliquez ici\",\n  \"ja\": \"\u3053\u3053\u3092\u30af\u30ea\u30c3\u30af\"\n}\n</code></pre> <p>This format ensures the application can render text based on the active language. If no translation is found for the current language, the <code>default</code> value is used.</p> <ul> <li><code>key-text</code> depend of the components. Check the component definition.</li> </ul>"},{"location":"object-definition/text/#2-string-format-short-syntax","title":"2. String Format (Short Syntax)","text":"<p>You can simplify the declaration by using a single string:</p> <pre><code>\"key-text\": \"Click here\"\n</code></pre> <p>This is equivalent to:</p> <pre><code>\"key-text\": {\n  \"default\": \"Click here\"\n}\n</code></pre> <p>This format is useful when you're not using multilingual support or when you want to define quick UI prototypes.</p>"},{"location":"object-definition/text/#3-pointer-reference-short-syntax","title":"3. Pointer Reference (Short Syntax)","text":"<p>Instead of defining text directly, you can reference a text defined elsewhere (in the same page or in Subs) by prefixing the value with <code>*</code>.</p> <p>Example:</p> <pre><code>\"key-text\": \"*text-button-login\"\n</code></pre> <pre><code>\"key-text\": {\n  \"id\": \"*text-button-login\"\n}\n</code></pre> <p>The engine will resolve the pointer by searching first in the local page, then in the shared Subs.</p> <p>This approach is useful for maintaining consistency across pages and reducing repetition in large applications.</p>"},{"location":"object-definition/text/#summary-table","title":"Summary Table","text":"Format Purpose Example Full object with translations Multilingual content See section 1 String value Quick/default text <code>\"text\": \"Submit\"</code> String starting with <code>*</code> Pointer to shared/local text object <code>\"text\": \"*shared-title\"</code> <p>For more advanced examples and usage patterns, see the Components Definition.</p>"},{"location":"pages-definition/","title":"Page","text":"<p>A page JSON describes a full screen layout.</p> <pre><code>{\n  \"setting\": { ... },\n  \"root\": { ... },\n  \"components\": [ ... ],\n  \"styles\": [ ... ],\n  \"options\": { ... },\n  \"contents\": [ ... ],\n  \"texts\": { ... },\n  \"colors\": { ... },\n  \"dimensions\": { ... }\n}\n</code></pre> <ul> <li>The root object serves as the entry point for the page.</li> <li>The other sections define local reusable objects that can be referenced within the page.</li> <li>For shared or common objects, see the relevant subs repository \ud83d\udcd6 Subs Definition.</li> </ul> <p>Refer to the following for detailed definitions of each object type:</p> <ul> <li>Setting</li> <li>Components</li> <li>Styles</li> <li>Options</li> <li>Contents</li> <li>Texts</li> <li>Colors</li> <li>Dimensions</li> </ul> <p>All available components can be browsed here.</p> <p>This modular design enables pages to remain lightweight by reusing existing components, styles, validators, and texts.</p> <p>Here some examples:</p> <ul> <li>Page Home</li> <li>Page Help</li> <li>Page Confirmation</li> </ul>"},{"location":"pages-definition/page-confirmation/","title":"Page - Confirmation - Example","text":"<pre><code>{\n  \"root\": {\n    \"subset\": \"layout-linear\",\n    \"style\": {\n      \"orientation\": \"vertical\",\n      \"background-color\": { \"id\": \"*background:funny-color\" },\n      \"fill-max-size\": true\n    },\n    \"content\": {\n      \"items\": [\n        {\n          \"subset\": \"label\",\n          \"style\": {\n            \"id\": \"*title-label\"\n          },\n          \"content\": {\n            \"value\": \"Confirmation:\"\n          }\n        },\n        {\n          \"id\": \"*item-spacer-half\"\n        },\n        {\n          \"subset\": \"label\",\n          \"style\": {\n            \"id\": \"*title-body\",\n            \"font-color\": {\"id\":\"*black\"}\n          },\n          \"content\": {\n            \"value\": { \"default\": \"Merci, vous avez bien \u00e9t\u00e9 ajout\u00e9 \u00e0 notre newsletter\" }\n          }\n        },\n        {\n          \"id\": \"*item-spacer\"\n        },\n        {\n          \"subset\": \"button\",\n          \"content\": {\n            \"label\": {\n              \"style\": { \"id\": \"*label-main-button-back\" },\n              \"content\": {\n                \"value\": \"Navigate to home page\"\n              }\n            },\n            \"action\": \"navigate://url/page-home\"\n          }\n        }\n      ]\n    }\n  },\n  \"components\": [\n    {\n      \"id\": \"item-spacer-half\",\n      \"subset\": \"spacer\",\n      \"style\": {\n        \"weight\": \"0.5\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Elements than doesn't exist in the json are resolved from the subs \ud83d\udcd6 Subs Definition.</p>"},{"location":"pages-definition/page-help/","title":"Page - Help - Example","text":"<pre><code>{\n  \"root\": {\n    \"id\": \"*template-page-default\"\n  },\n  \"contents\": [\n    {\n      \"id\": \"title-content\",\n      \"value\": { \"id\": \"*text-body-title\" }\n    },\n    {\n      \"id\": \"body-content\",\n      \"value\": { \"id\": \"*text-body-content\" }\n    },\n    {\n      \"id\": \"action-content\",\n      \"label\": { \"id\": \"*button-label-help-to-home\" },\n      \"action\": \"navigate://url/page-home\"\n    }\n  ],\n  \"texts\": {\n    \"common\": {\n      \"text-body-title\": \"Looking for help?\",\n      \"text-body-content\": { \"id\": \"*text-body-content-help\" },\n      \"text-action-help\": \"Navigate to home page\"\n    }\n  }\n}\n</code></pre> <p>Using the template loaded with subs \ud83d\udcd6 Subs Definition.</p> <pre><code>{\n  \"root\": {\n    \"id\": \"template-page-default\",\n    \"subset\": \"layout-linear\",\n    \"style\": {\n      \"orientation\": \"vertical\",\n      \"background-color\": { \"id\": \"*background:why-not-color\" },\n      \"fill-max-size\": true\n    },\n    \"content\": {\n      \"items\": [\n        {\n          \"subset\": \"label\",\n          \"style\": {\n            \"id\": \"*title-label\",\n            \"font-color\": \"#FF78FF78\"\n          },\n          \"content\": {\n            \"id\": \"*title-content\"\n          }\n        },\n        {\n          \"id\": \"*item-spacer\"\n        },\n        {\n          \"subset\": \"label\",\n          \"style\": {\n            \"font-size\": \"18\",\n            \"font-color\": {\"id\":\"*blue\"}\n          },\n          \"content\": {\n            \"id\": \"*body-content\"\n          }\n        },\n        {\n          \"id\": \"*item-spacer\"\n        },\n        {\n          \"subset\": \"button\",\n          \"content\": {\n            \"id\": \"*action-content\"\n          }          \n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"pages-definition/page-home/","title":"Page - Home - Example","text":"<pre><code>{\n  \"root\": {\n    \"id\": \"page-home\",\n    \"subset\": \"layout-linear\",\n    \"style\": {\n      \"orientation\": \"vertical\",\n      \"background-color\": { \"id\": \"*background:gray-light\" },\n      \"fill-max-size\": true\n    },\n    \"content\": {\n      \"items\": [\n        \"*title\",\n        \"*item-spacer-48-v\",\n        \"*body\",\n        \"*item-spacer\",\n        {\n          \"subset\": \"label\",\n          \"style\": \"*title-section\",\n          \"content\": {\n            \"value\": \"*form:text-form-section-title\"\n          }\n        },\n        {\n          \"id\": \"*item-spacer-24-v\"\n        },\n        {\n          \"id\": {\n            \"value\": \"age\",\n            \"source\": \"*input-field-age\"\n          }\n        },\n        {\n          \"id\": {\n            \"value\": \"email\",\n            \"source\": \"*input-field-email\"\n          }\n        },\n        {\n          \"id\": \"input-field-custom\",\n          \"subset\": \"field\",\n          \"option\": {\n            \"validator\": \"string-not-null\"\n          },\n          \"content\": {\n            \"title\": \"any comment?\",\n            \"placeholder\": \"short comment, please I'm lazy to read\",\n            \"message-error\": \"Can't be empty, bro say something\"\n          }\n        },\n        {\n          \"id\": \"*item-spacer\"\n        },\n        {\n          \"subset\": \"layout-linear\",\n          \"style\": {\n            \"orientation\": \"horizontal\",\n            \"background-color\": \"*background:funny-color\",\n            \"fill-max-width\": true\n          },\n          \"content\": {\n            \"items\": [\n              {\n                \"subset\": \"button\",\n                \"content\": {\n                  \"label\": {\n                    \"style\": { \"id\": \"*label-main-button-form\" },\n                    \"content\": { \"value\": \"Send Form\" }\n                  },\n                  \"action\": {\n                    \"value\": \"form-send://url/form-from-page-home\",\n                    \"params\": {\n                      \"action-validated\": \"navigate://url/page-confirmation\"\n                    }\n                  }\n                }\n              },\n              {\n                \"subset\": \"button\",\n                \"content\": {\n                  \"label\": {\n                    \"style\": { \"id\": \"*label-main-button-help\" },\n                    \"content\": {\n                      \"value\": \"Get Help\"\n                    }\n                  },\n                  \"action\": \"navigate://url/page-help\"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  },\n  \"components\": [\n    {\n      \"id\": \"title\",\n      \"subset\": \"label\",\n      \"style\": \"*title-label\",\n      \"content\": {\n        \"value\": { \"id\": \"*text-title\" }\n      }\n    },\n    {\n      \"id\": \"body\",\n      \"subset\": \"label\",\n      \"style\": {\n        \"id\": \"*title-body\"\n      },\n      \"content\": {\n        \"value\": { \"id\": \"*text-body\" }\n      }\n    },\n    {\n      \"id\": \"input-field-age\",\n      \"subset\": \"field\",\n      \"option\": {\n        \"validator\": [\n          {\n            \"type\": \"string-min-value\",\n            \"value\": \"18\",\n            \"id-message-error\": \"*validator-1\"\n          },\n          {\n            \"type\": \"string-max-value\",\n            \"value\": \"65\",\n            \"id-message-error\": \"*validator-2\"\n          },\n          {\n            \"type\": \"string-not-null\",\n            \"id-message-error\": \"*validator-4\"\n          }\n        ]\n      },\n      \"content\": {\n        \"title\": \"*form:text-form-age-title\",\n        \"placeholder\": \"*form:text-form-age-placeholder\",\n        \"message-error\": [\n          {\n            \"id\": \"validator-1\",\n            \"default\": \"you must have at least 18 years\"\n          },\n          {\n            \"id\": \"validator-2\",\n            \"default\": \"you must have at most 65 years\"\n          },\n          {\n            \"id\": \"validator-4\",\n            \"default\": \"age can't be empty\"\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"input-field-email\",\n      \"subset\": \"field\",\n      \"option\": {\n        \"validator\": [\n          {\n            \"type\": \"string-email\",\n            \"id-message-error\": \"*validator-1\"\n          },\n          {\n            \"type\": \"string-not-null\",\n            \"id-message-error\": \"*validator-2\"\n          }\n        ]\n      },\n      \"content\": \"*input-field-age-content\"\n    }\n  ],\n  \"styles\": [\n    {\n      \"id\": \"title-section\",\n      \"font-size\": \"18\",\n      \"font-color\": \"*red\"\n    }\n  ],\n  \"texts\": {\n    \"common\": {\n      \"text-title\": \"Home Page\",\n      \"text-body\": \"bienvenue sur la page d'accueil\"\n    },\n    \"form\": {\n      \"text-form-section-title\": \"Inscription \u00e0 la new letter\",\n      \"text-form-email-title\": \"email*\",\n      \"text-form-email-placeholder\": \"my.email@gmail.com\",\n      \"text-form-age-title\": \"age*\",\n      \"text-form-age-placeholder\": \"27\"\n    }\n  }\n}\n</code></pre> <p>Elements than doesn't exist in the json are resolved from the subs \ud83d\udcd6 Subs Definition.</p>"}]}